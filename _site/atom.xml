<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Flyaway's Wiki</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2013-02-07T13:19:09+08:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name>Flyaway</name>
   <email>flyaway1217@gmail.com</email>
 </author>

 
 <entry>
   <title>《Learning Python》学习笔记——13.文档</title>
   <link href="http://username.github.com/Python/2013/02/05/Learning-Python13"/>
   <updated>2013-02-05T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/05/Learning-Python13</id>
   <content type="html">&lt;h1 id=&quot;pyton&quot;&gt;Pyton文档资源&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;形式&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;角色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#注释&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件中的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dir函数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象中可用属性的列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文档字符串:&lt;code&gt;__doc__&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附加在对象上的文件中的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PyDoc:help函数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象的交互帮助&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PyDoc:HTML报表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浏览器中的模块文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;标准手册&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;正式的语言和库的说明&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网站资源&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在线教程、例子等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;出版的书籍&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;商业参考书籍&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;#注释&lt;/h2&gt;
&lt;p&gt;井字号注释是代码编写的最基本方式。Python会忽略#之后所有文字(只要#不是位于字符串常量中)，所以你可以在这个字符之后插入一些对程序员有意义的文字和说明。不过，这类注释只能在源码中看到。&lt;/p&gt;

&lt;h2 id=&quot;dir&quot;&gt;dir函数&lt;/h2&gt;
&lt;p&gt;内置的dir函数是抓取对象内可用所有属性列表的简单方式，它能够调用任何有属性的对象。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;文档字符串&lt;/h2&gt;
&lt;p&gt;除了#注释外，Python也支持可自动附加在对象上的文档，而且在运行时还可保存查看。从语法上来说，这类注释是写成字符串，放在模块文件、函数以及类语句的顶端，就在任何可执行程序代码之前。Python会自动封装这个字符串，也就是成为所谓的文档字符串，使其成为相应对象的&lt;code&gt;__doc__&lt;/code&gt;属性。&lt;/p&gt;

&lt;p&gt;这个文档协议的重点在于，注释会保存在&lt;code&gt;__doc__&lt;/code&gt;属性中以供查看(文件导入之后)。
文档字符串的例子:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Module documentation&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Words to Here&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	function documentation&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	can we have your liver then?&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#square&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&amp;quot;class documentation&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pydochelp&quot;&gt;PyDoc:help函数&lt;/h2&gt;
&lt;p&gt;文档字符串技术是实用的工具，Python现在配备了一个工具，使其更易于显示。标准PyDoc工具是Python程序代码，知道如何提取文档字符串并且自动提取使其结构化的信息，并将其格式化成各种类型的排列友好的报表。&lt;/p&gt;

&lt;p&gt;两种最主要的PyDoc接口是内置的help函数和PyDoc GUI/HTML接口。help函数会启用PyDoc从而产生简单的文字报表。&lt;/p&gt;

&lt;h2 id=&quot;pydochtml&quot;&gt;PyDoc:HTML报表&lt;/h2&gt;
&lt;p&gt;想要更宏观的显示的话，PyDoc也提供GUI接口，可以将其报表通过HTML网页格式来呈现，可通过任何浏览器来查看。在这种模式下，PyDoc可以在本地运行，也能在远程服务器上运行。报表中会包含自动创建的超链接，让你能够点击应用程序中相关组件的稳定。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;标准手册&lt;/h2&gt;
&lt;p&gt;为了获得语言以及工具集最新的完整说明，Python标准手册随时可以提供支持。Python手册以HTML和其他格式来实现，在Windows上是随着Python系统安装的。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;常见编写代码的陷阱&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;别忘了逗号&lt;/li&gt;
  &lt;li&gt;从第1行开始&lt;/li&gt;
  &lt;li&gt;空白行在交互模式提示符下很重要&lt;/li&gt;
  &lt;li&gt;缩进要一致&lt;/li&gt;
  &lt;li&gt;不要在Python中写C代码&lt;/li&gt;
  &lt;li&gt;使用简单的for循环，而不是while或range&lt;/li&gt;
  &lt;li&gt;要注意赋值语句中的可变对象&lt;/li&gt;
  &lt;li&gt;不要期待在原处修改对象的函数会返回结果&lt;/li&gt;
  &lt;li&gt;一定要使用括号调用函数&lt;/li&gt;
  &lt;li&gt;不要在导入和重载中使用扩展名或路径&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——12.迭代器和解析,第一部分</title>
   <link href="http://username.github.com/Python/2013/02/05/Learning-Python12"/>
   <updated>2013-02-05T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/05/Learning-Python12</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;迭代器:初探&lt;/h1&gt;
&lt;p&gt;上一章曾经提到过，其实for循环是可用于任何可迭代的对象上的。实际上，对Python中所有会从左至右扫描对象的迭代工具而言都是如此，这些迭代工具包括了for循环、列表解析、in成员关系测试以及map内置函数等。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;可迭代对象&amp;rdquo;的概念在Python中是相当新颖的，基本这就是序列观念的通用化:如果对象时实际保存的序列，或者可以再迭代工具环境中一次产生一个结果的对象,那就看做是可迭代的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;文件迭代器&lt;/h2&gt;
&lt;p&gt;作为内置数据类型的文件也是可迭代的，它有一个名为&lt;code&gt;__next__&lt;/code&gt;的方法，每次调用时，就会返回文件中的下一行。当到达文件末尾时，&lt;code&gt;__next__&lt;/code&gt;会引发内置的StopIteration异常，而不是返回空字符串。&lt;/p&gt;

&lt;p&gt;这个接口就是Python中所谓的迭代协议:有&lt;code&gt;__next__&lt;/code&gt;方法的对象会前进到下一个结果，而在一系列结果的末尾时，则会引发StopIteration。任何这类对象都认为是可迭代的。任何这类对象也能以for循环或其他迭代工具遍历，因为所有迭代工具内部工作起来都是在每次迭代中调用&lt;code&gt;__next__&lt;/code&gt;，并且捕捉StopIteratin异常来确定何时离开。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;script.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就是文件迭代的一个例子，并且这种用法是最高效的文件读取方法，主要有三个优点:这是最简单的写法，运行快，并且从内存使用情况来说也是最好的。&lt;/p&gt;

&lt;p&gt;替代的写法是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;).readlines():&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种调用方法会把文件一次性读到内存中，如果文件太大，那么内存会被消耗光的。&lt;/p&gt;

&lt;h2 id=&quot;iternext&quot;&gt;手动迭代:iter和next&lt;/h2&gt;
&lt;p&gt;为了支持手动迭代代码(用较少的录入)，Python3.0还提供了一个内置函数next，它会自动调用一个对象的&lt;code&gt;__next__&lt;/code&gt;方法。给定一个对象X，调用&lt;code&gt;next(X)&lt;/code&gt;等同于&lt;code&gt;X.__next__()&lt;/code&gt;，但前者简单很多。&lt;/p&gt;

&lt;p&gt;从技术角度来讲，迭代协议还有一点值得注意。当for循环开始时，会通过它传给iter内置函数，以便从可迭代对象中获得一个迭代器，返回的对象含有需要的next方法。调用iter的步骤对于文件来说不是必须的，因为文件对象就是自己的迭代器，但是对于其他的一些内置数据类型来说，就不一定了。&lt;/p&gt;

&lt;p&gt;列表以及很多其他的内置对象，不是自身的迭代器，因为它们支持多次打开迭代器。对这样的对象，我们必须调用iter来启动迭代:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#return false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#会报错&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然Python迭代工具自动调用这些(&lt;code&gt;iter&lt;/code&gt;,&lt;code&gt;__next__&lt;/code&gt;)函数，我们也可以使用它们来手动地应用迭代协议。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;列表解析:初探&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;列表解析基础知识&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;列表解析写在一个方括号中，因为它们最终是构建一个新的列表的一种方式。它们以我们所组成的一个任意的表达式开始，该表达式使用我们所组成的一个循环变量(x+10)。这后面跟着我们现在应该看作是一个for循环头部的部分，它申明了循环变量，以及一个可迭代对象(for x in L)&lt;/p&gt;

&lt;p&gt;要运行该表达式，Python在解释器内部执行一个遍历L的迭代，按照顺序把x赋给每个元素，并且收集对各元素运行左边的表达式的结果。我们得到的结果列表就是列表解析所表达的内容——针对L中的每个x,包含了x+10的一个新列表。&lt;/p&gt;

&lt;p&gt;其实列表解析式并不是必须的，因为它能完成的工作都能够通过for循环完成，但是列表解析式比手动的for循环语句运行得更快(往往速度快一倍)，因为它们的迭代在解释器内部是以C语言的速度执行的，而不是以手动的Python代码执行的，特别是对于较大的数据集合，这是使用列表解析的一个主要的性能优点。&lt;/p&gt;

&lt;p&gt;当我们考虑在一个序列中的每个项上执行一个操作时，都可以考虑使用列表解析。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;扩展的列表解析语法&lt;/h2&gt;
&lt;p&gt;实际上，列表解析可以有更高级的应用。作为一个特别有用的扩展，表达式中嵌套的for循环可以有一个相关的if子句，来过滤那些测试不为真的结果项。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;script.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这条if子句检查从文件读取的每一行，看它的第一个字符是否是p；如果不是，从结果列表中省略改行。&lt;/p&gt;

&lt;p&gt;事实上，如果我们愿意的话，列表解析可以变得更加复杂——它们的完整语法允许任意数目的for子句，每个子句有一个可选的相关的if子句。&lt;/p&gt;

&lt;h1 id=&quot;python30&quot;&gt;Python3.0中的新的可迭代对象&lt;/h1&gt;
&lt;p&gt;Pyton3.0中的一个基本的改变是，它比Python2.x更强调迭代。除了与文件和字典这样的内置类型相关的迭代，字典方法keys、values和items都在Python3.0中返回可迭代对象。
返回一个可迭代对象而不是返回一个结果列表的好处在于节省了内存的空间。&lt;/p&gt;

&lt;h2 id=&quot;vs&quot;&gt;多个迭代器VS单个迭代器&lt;/h2&gt;
&lt;p&gt;多个迭代器:在它们的结果中能保持不同位置的多个迭代器
单个迭代器:只能保持一个迭代器，在遍历其结果之后，它们就用尽了。&lt;/p&gt;

&lt;p&gt;通常通过针对iter调用返回一个新的对象，来支持多个迭代器；单个迭代器一般意味着一个对象返回其自身。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;字典视图迭代器&lt;/h2&gt;
&lt;p&gt;在Python3.0中，字典的keys、values和items方法返回可迭代的视图对象，它们一次产生一个结果项，而不是在内存中一次产生全部结果列表。视图项保持和字典中的那些项相同的物理顺序，并且反映对底层的字典做出的修改。&lt;/p&gt;

&lt;p&gt;和所有迭代器一样，我们总可以通过把一个Python3.0字典视图传递到list内置函数中，从而强制构建一个真正的列表。然而，这通常不是必须的。&lt;/p&gt;

&lt;p&gt;此外，Python3.0字典仍然有自己的迭代器，它返回连续的键。因此，无需直接在此环境中调用keys:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——11.while和for循环</title>
   <link href="http://username.github.com/Python/2013/02/04/Learning-Python11"/>
   <updated>2013-02-04T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/04/Learning-Python11</id>
   <content type="html">&lt;h1 id=&quot;while&quot;&gt;while循环&lt;/h1&gt;

&lt;p&gt;while语句是Python语言中最通用的迭代结构，简而言之，只要顶端测试一直计算到真值，就会重复执行一个语句块。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一般格式&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;breakcontinuepasselse&quot;&gt;break,continue,pass和循环else&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;跳出最近所在的循环(跳过整个循环语句)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;跳到最近所在循环的开头处(来到循环的首行)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;什么事也不做，只是空占位符语句。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;循环else块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有当前循环正常离开时才会执行(也就是没有碰到break语句)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一般循环格式&lt;/h2&gt;

&lt;p&gt;加入break和continue语句后，while的一般格式变为:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pass&quot;&gt;pass&lt;/h2&gt;

&lt;p&gt;pass语句是无运算的占位符，当语法需要语句并且还没有任何实用的语句可写时，就可以使用它。&lt;/p&gt;

&lt;h2 id=&quot;else&quot;&gt;循环else&lt;/h2&gt;

&lt;p&gt;在while语句中加入else和C/C++中的语法不太一样，这里详细说明一下。else后面的代码只有当循环正常结束时才会执行，如果是用break跳出循环的，这部分代码就不会运行，具体看一个求质数的例子:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;has factor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;is prime&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再看一个对比的例子，没有使用else的情况:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Ni&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用else后的情况:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Ni&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;for&quot;&gt;for循环&lt;/h1&gt;

&lt;p&gt;for循环在Python中是一个通用的序列迭代器:可以遍历任何有序的序列对象内元素。for语句可以用于字符串、列表、元组、其他内置可迭代对象。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;一般格式&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此处的else的作用和while语句中的一样。另外需要注意的是，当Python运行for循环时，会逐个将序列对象中的元素赋值给目标，然后为每个元素执行循环体。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;编写循环的技巧&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;内置&lt;strong&gt;range&lt;/strong&gt;函数:返回一系列连续增加的整数，可作为for中的索引&lt;/li&gt;
  &lt;li&gt;内置&lt;strong&gt;zip&lt;/strong&gt;函数:返回并行元素的元组的列表，可用于在for中遍历数个数列&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whilerange&quot;&gt;循环计数器:while和range&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当range函数只有一个参数时，会返回从零算起的整数列表，但其中不包括该参数的值。如果传进两个参数，那第一个参数是上边界，第二个参数是下边界。如果传进三个参数时，第三个参数表示步进值。&lt;/p&gt;

&lt;p&gt;range提供了一种简单的方法，重复特定次数的动作:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Pythons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;相应的C++代码则是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;zipmap&quot;&gt;并行遍历:zip和map&lt;/h2&gt;

&lt;p&gt;zip会取得一个或多个序列为参数，然后返回元组的列表，将这些序列中的并排的元素配成对。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的执行结果是:[(1,5),(2,6),(3,7),(4,8)]&lt;/p&gt;

&lt;p&gt;当参数的长度不同时，zip会以最短序列的长度为准来截断所得到的元组。&lt;/p&gt;

&lt;p&gt;使用zip构造字典:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;totast&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;enumerate&quot;&gt;产生偏移和元素:enumerate&lt;/h2&gt;

&lt;p&gt;enumerate函数一个比较新的内置函数，它能同时返回元素值和偏移值:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;appears at offset&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——10.if测试和语法规则</title>
   <link href="http://username.github.com/Python/2013/02/03/Learning-Python10"/>
   <updated>2013-02-03T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/03/Learning-Python10</id>
   <content type="html">&lt;h1 id=&quot;if&quot;&gt;if语句&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;通用格式&lt;/h2&gt;

&lt;p&gt;if语句一般形式如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外需要注意的是，Python中是没有&lt;code&gt;switch/case&lt;/code&gt;语句的&lt;/p&gt;

&lt;h1 id=&quot;python&quot;&gt;Python语法规则&lt;/h1&gt;

&lt;p&gt;Python的语法特性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语句是逐个运行的。&lt;/li&gt;
  &lt;li&gt;块和语句的边界会自动检测&lt;/li&gt;
  &lt;li&gt;复合语句=首行+&amp;rdquo;:&amp;rdquo;+缩进语句&lt;/li&gt;
  &lt;li&gt;空白行、空格以及注释通常都会忽略&lt;/li&gt;
  &lt;li&gt;文档字符串(docstring)会忽略，但会保存并由工具显示&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;代码分隔符&lt;/h2&gt;

&lt;p&gt;Python会自动以行缩进检测块的边界，也就是程序代码左侧的空白空间。缩进至右侧相同距离的所有语句属于同一块的代码，换句话说，块内的语句会垂直对齐，就好像在一栏之内。更深层的嵌套块就是比所在块进一步向右缩进&lt;/p&gt;

&lt;p&gt;缩进的时候，可以使用空格也可以使用制表符，Python不在乎你怎么缩进，只在乎缩进是否一致。
不过，最好的是使用空格进行缩进，因为一个制表符在不同的编辑器中呈现的效果是不同的，其次也最好不要使用制表符和空格符混合使用&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;语句的分隔符&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;如果使用语法括号对，语句就可以横跨数行&lt;/li&gt;
  &lt;li&gt;如果语句以反斜杠结尾，就可横跨数行&lt;/li&gt;
  &lt;li&gt;字符串常量有特殊规则&lt;/li&gt;
  &lt;li&gt;其他规则&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;真值测试&lt;/h1&gt;

&lt;p&gt;在Python中:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任何非零数字或非空对象都为真&lt;/li&gt;
  &lt;li&gt;数字零、空对象以及特殊对象None都被认作是假&lt;/li&gt;
  &lt;li&gt;比较和相等测试会递归地应用在数据结构中&lt;/li&gt;
  &lt;li&gt;比较和相等测试会返回True或False(1和0的特殊版本)&lt;/li&gt;
  &lt;li&gt;布尔and和or运算会返回真或假的操作对象&lt;/li&gt;
  &lt;li&gt;Python中的and、or运算都是短路运算&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——9.赋值、表达式和打印</title>
   <link href="http://username.github.com/Python/2013/02/02/Learning-Python9"/>
   <updated>2013-02-02T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/02/Learning-Python9</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;赋值语句&lt;/h1&gt;

&lt;p&gt;赋值语句的特性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;赋值语句建立对象的引用&lt;/li&gt;
  &lt;li&gt;变量名在首次赋值时会被创建&lt;/li&gt;
  &lt;li&gt;变量名在引用前必须先赋值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python赋值语句形式:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;运算&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam = &amp;lsquo;Spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基本形式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam,ham=&amp;rsquo;yum&amp;rsquo;,&amp;rsquo;YUM&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组赋值运算(位置性)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[spam,ham]=[&amp;lsquo;yum&amp;rsquo;,&amp;rsquo;YUM&amp;rsquo;]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表赋值运算(位置性)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a,b,c,d=&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列赋值运算，通用性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a,*b =&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展的序列解包(Python3.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam=ham=&amp;rsquo;lunch&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;多目标赋值运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spams += 42&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增强赋值运算(相当于spams=spams+42)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中有几点需要说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第三行和第二行的赋值结果是一样的，spam绑定到&amp;rsquo;yum&amp;rsquo;,ham绑定到&amp;rsquo;YUM&amp;rsquo;,在Python中，这叫做分解赋值&lt;/li&gt;
  &lt;li&gt;第四行的赋值结果是:a赋值为&amp;rsquo;s&amp;rsquo;,b赋值为&amp;rsquo;p&amp;rsquo;,c赋值为&amp;rsquo;a&amp;rsquo;,d赋值为&amp;rsquo;m&amp;rsquo;&lt;/li&gt;
  &lt;li&gt;第五行，用右边的字符串的第一个字母来匹配a，用剩下的部分来匹配b:a赋值为&amp;rsquo;s&amp;rsquo;,b赋值为&amp;rsquo;pam&amp;rsquo;.这在Python称作扩展的解包。需要注意的是，带星号的变量总是返回的是一个列表，哪怕只有一个元素或没有元素&lt;/li&gt;
  &lt;li&gt;最后一行的用法和C/C++等其他语言中的语法和意义都是一样的，需要说明的是，在Python中，每个二元表达式运算符都有增强赋值语句&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;赋值语句执行时，Python会建立临时的元组，来存储右侧变量原始的值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据上面最后一点的说明，在Python中可以实现不用第三个变量就能交换两个变量的值:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;多目标赋值语句&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;多目标赋值以及共享引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用多目标赋值时，需要注意的是，这些变量都是指向同一个对象的。这对于不可变的类型来说，没什么问题，但是对于原处可变的类型来说，需要特别注意了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码执行后，a和b都是[42]&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;增强赋值语句&lt;/h2&gt;

&lt;p&gt;Python支持一下的增强语句:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;X+=Y&lt;/td&gt;
      &lt;td&gt;X&amp;amp;=Y&lt;/td&gt;
      &lt;td&gt;X-=Y&lt;/td&gt;
      &lt;td&gt;X|=Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X*=Y&lt;/td&gt;
      &lt;td&gt;X^=Y&lt;/td&gt;
      &lt;td&gt;X/=Y&lt;/td&gt;
      &lt;td&gt;X&amp;raquo;=Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X%=Y&lt;/td&gt;
      &lt;td&gt;X&amp;laquo;=Y&lt;/td&gt;
      &lt;td&gt;X**=Y&lt;/td&gt;
      &lt;td&gt;X//=Y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在Python中使用了优化技术，增强赋值语句会在底层实现时比较高效&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;另外需要注意的是，在使用增强赋值语句时，对于可变变量来说是原处修改的，需要特别注意！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;变量命名规则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;语法:(下划线或字母)+(任意数目的字母、数字或下划线)&lt;/li&gt;
  &lt;li&gt;区分大小写&lt;/li&gt;
  &lt;li&gt;禁止使用保留字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python3.0中的保留字:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;finally&lt;/td&gt;
      &lt;td&gt;is&lt;/td&gt;
      &lt;td&gt;return&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;continue&lt;/td&gt;
      &lt;td&gt;for&lt;/td&gt;
      &lt;td&gt;lamdba&lt;/td&gt;
      &lt;td&gt;try&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
      &lt;td&gt;from&lt;/td&gt;
      &lt;td&gt;nonlocal&lt;/td&gt;
      &lt;td&gt;while&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;and&lt;/td&gt;
      &lt;td&gt;del&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;not&lt;/td&gt;
      &lt;td&gt;with&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;as&lt;/td&gt;
      &lt;td&gt;elif&lt;/td&gt;
      &lt;td&gt;if&lt;/td&gt;
      &lt;td&gt;or&lt;/td&gt;
      &lt;td&gt;yield&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;assert&lt;/td&gt;
      &lt;td&gt;else&lt;/td&gt;
      &lt;td&gt;import&lt;/td&gt;
      &lt;td&gt;pass&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;break&lt;/td&gt;
      &lt;td&gt;except&lt;/td&gt;
      &lt;td&gt;in&lt;/td&gt;
      &lt;td&gt;raise&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;命名惯例&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以单一下划线开头的变量名(_X)不会被from module import *语句导入&lt;/li&gt;
  &lt;li&gt;前后有下划线的变量名(&lt;em&gt;X&lt;/em&gt;)是系统定义的变量名，对解释器有特殊意义&lt;/li&gt;
  &lt;li&gt;以两下划线开头、但结尾没有两个下划线的变量名(__X)是类的本地(&amp;ldquo;压缩&amp;rdquo;)变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;打印操作&lt;/h1&gt;

&lt;p&gt;在Python中，print语句可以实现打印:只是对程序员友好的标准输出流的接口而已
标准输出流、标准输入流、错误流是脚本启动时所创建的3中数据连接中的一种。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Python3.X中，打印是一个内置函数，用关键字参数来表示特定模式&lt;/li&gt;
  &lt;li&gt;在Python2.X中，打印是语句，拥有自己的特定语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python30print&quot;&gt;Python3.0中的print函数&lt;/h2&gt;

&lt;p&gt;print函数不会返回任何值，从技术上讲，它将返回None。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;调用格式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从语法上讲，Python3.0中的print函数有如下的形式。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上述表达式中，方括号中的项是可选的，并且可能会在一个给定的调用中省略，并且=后面的值都给出了参数的默认值。这个内置的函数吧字符串sep所分割开的一个或多个对象的文本表示，后面跟着字符串and，都打印到流file中。&lt;/p&gt;

&lt;p&gt;这些参数是这样控制print操作的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sep是在每个对象的文本之间插入的一个字符串，如果没有传递的话，它默认地是一个单个空格；传递一个空字符串将会抑制分隔符&lt;/li&gt;
  &lt;li&gt;end是添加在打印文本末尾的一个字符串，如果没有传递的话，它默认的是一个\n换行字符。传递一个空字符将会避免在打印的文本的末尾移动到下一个输入行——下一个print将会保持添加到当前输出行的末尾。&lt;/li&gt;
  &lt;li&gt;file指定了文本将要发送到的文件、标准流或者其他类似文件的对象；如果没有传递的话，默认的是sys.stdout。带有一个类似文件的write(string)的方法的任何对象都可以传递，但真正的文件应该已经为了输出而打开。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;打印流重定向&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就简单的标准输出流重定向到了文本文件中，而且是以追加的模式。其实，甚至可以将sys.stdout重设为非文件对象，只要该对象有预期的协议(write方法)。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——8.Python语句简介</title>
   <link href="http://username.github.com/Python/2013/02/01/Learning-Python8"/>
   <updated>2013-02-01T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/01/Learning-Python8</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;重访Python程序结构&lt;/h1&gt;

&lt;p&gt;概念层次:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程序由模块构成&lt;/li&gt;
  &lt;li&gt;模块包含语句&lt;/li&gt;
  &lt;li&gt;语句包含表达式&lt;/li&gt;
  &lt;li&gt;表达式建立并处理对象&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;python-1&quot;&gt;Python的语句&lt;/h1&gt;

&lt;p&gt;Python语句&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;语句&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;角色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;赋值&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建引用值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;执行函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;打印调用&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;打印对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;if/elif/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;选择动作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列迭代&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;while/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;一般循环&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pass&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;空占位符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;break&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;循环推出&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;continue&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;循环继续&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;def&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数和方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;return&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;yield&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成器函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;global&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;命名空间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nonlocal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;命名空间(Pyton3.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;import&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;模块访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;from&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;属性访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;class&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;try/except/finally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;捕捉异常&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;raise&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;触发异常&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;assert&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调试检查&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;with/as&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;环境管理器(2.6)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;del&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除引用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;相关说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从技术上讲，print在Python3.0中不是一个保留字，也不是一条语句，而是一个内置函数调用，由于它几乎总是作为一条表达式语句运行，通常将其看做是一条语句类型。&lt;/li&gt;
  &lt;li&gt;yield实际上是一个表达式，而不是一条语句，也是一个保留字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意事项:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Python2.6中，nonlocal不可用&lt;/li&gt;
  &lt;li&gt;在Python2.6中,print是一条语句，而不是一个内置函数调用&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——7.元组、文件及其他</title>
   <link href="http://username.github.com/Python/2013/01/31/Learning-Python7"/>
   <updated>2013-01-31T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/31/Learning-Python7</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;元组&lt;/h1&gt;

&lt;p&gt;元组由简单的对象构成。元组与列表非常类似，只不过元组不能再原处修改(它们是不可变的)，通常是写成圆括号(而不是方括号)中一系列项。它的属性有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任意对象的有序集合&lt;/li&gt;
  &lt;li&gt;通过偏移存取&lt;/li&gt;
  &lt;li&gt;属于不可变序列类型&lt;/li&gt;
  &lt;li&gt;固定长度、异构、任意嵌套&lt;/li&gt;
  &lt;li&gt;对象引用的数组&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实际应用中的元组&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;元组的特殊语法:逗号和圆括号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为圆括号也可以把表达式括起来，如果圆括号里的单一对象时元组对象而不是一个简单的表达式，需要对Python进行特别说明。如果确实想得到一个元组，只要在这一单个元素之后、关闭圆括号之前加上一个逗号就可以了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，第一行的x是一个整数，第二行的y则是一个包含了一个元素40的元组。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;转换、方法以及不可变性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;元组的操作和字符串及列表是一致的，值得注意的区别在于&amp;rdquo;+&amp;rdquo;、&amp;rdquo;*&amp;ldquo;以及分片操作应用于元组时将返回新元组，并且元组不提供字符串、列表和字典中的方法。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;为什么有了列表还要元组&lt;/h2&gt;

&lt;p&gt;元组的不可变性提供了某种完整性，这样你可以确保元组在程序中不会被另一个引用修改，而列表就没有这样的保证了。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;文件&lt;/h1&gt;

&lt;p&gt;内置open函数后创建一个Python文件对象，可以作为计算机上的一个文件链接。在调用open之后，你可以通过调用返回的文件对象的方法来读写相关外部文件。&lt;/p&gt;

&lt;p&gt;常见文件运算&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(r&amp;rsquo;C:\spam&amp;rsquo;,&amp;rsquo;w&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建输出文件(&amp;lsquo;w&amp;rsquo;指写入)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(&amp;lsquo;data&amp;rsquo;,&amp;rsquo;r&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建只读文件(&amp;lsquo;r&amp;rsquo;值只读)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(&amp;lsquo;data&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与上一行相同(&amp;lsquo;r&amp;rsquo;是默认值)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=intput.read()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把整个文件读进单一字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=intput.read(N)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取之后的N个字节(一或多个)到一个字符串中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=input.readline()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取下一行(包括行末标识符)到一个字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aList=input.readlines()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取整个文件到字符串列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.write(aString)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;写入字节字符串到文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.writelines(alist)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把列表内所有字符串写入文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.close()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;手动关闭(当文件收集完成时会替你关闭文件)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.flush()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把输出缓冲区刷到硬盘中，但不关闭文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;anyFile.seek(N)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改文件位置到偏移量N处，以便进行下一个操作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for line in open(&amp;lsquo;data&amp;rsquo;):use line&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件迭代器一行一行地读取&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;open(&amp;lsquo;f.txt&amp;rsquo;,encoding=&amp;rsquo;latin-1&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0 Unicode文本文件(str字符串)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;open(&amp;lsquo;f.bin&amp;rsquo;,&amp;rsquo;rb&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0 二进制byte文件(bytes字符串)　　　&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-4&quot;&gt;打开文件&lt;/h2&gt;

&lt;p&gt;为了打开一个文件，程序会调用内置open函数，首先是外部文件名，接着是处理模式。模式使用字符串&amp;rsquo;r&amp;rsquo;代表以只读方式打开文件(默认值)，&amp;rsquo;w&amp;rsquo;代表以写的方式打开文件，&amp;rsquo;a&amp;rsquo;代表追加模式。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;使用文件&lt;/h2&gt;

&lt;p&gt;一旦存在一个文件对象，就可以调用其方法来读写相关的外部文件。不管在任何情况下，Python程序中的文本文件都采用字符串的形式，读取文件时会返回字符串形式的文本。&lt;/p&gt;

&lt;p&gt;上面表格中的方法是子常用的读写方法，如下是一些基础用法的提示:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件迭代器是最好的读取行的工具&lt;/li&gt;
  &lt;li&gt;内容是字符串，不是对象
当你把数据写入文件时，Python不会自动把对象转换为字符串，你必须传递一个已经格式化的字符串。&lt;/li&gt;
  &lt;li&gt;close是通常选项&lt;/li&gt;
  &lt;li&gt;文件是缓冲的并且是可查找的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;实际应用中的文件&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用pickle存储Python的原生对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pickle模块是能够让我们直接在文件中存储几乎任何Python对象的高级工具，也并不要求我们把字符串转换来转换去，它就像是超集通用的数据格式化和解析工具。&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;重访类型分类&lt;/h1&gt;

&lt;p&gt;关于对象类型，有以下的一些药店需要记住:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象根据分类共享操作；&lt;/li&gt;
  &lt;li&gt;只有可变对象(列表、字典和集合)可以原处修改，我们不能原处修改数字、字符串或元组&lt;/li&gt;
  &lt;li&gt;数字类型包括了:整数、浮点数、复数、小数和分数&lt;/li&gt;
  &lt;li&gt;集合类似于一个无值的字典的键，但是，它们不能映射为值，并且没有顺序；因此，集合不是一个映射类型或者一个序列类型，frozenset是集合的一个不可变的版本&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;对象类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;分类&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;是否可变&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数字&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数值&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对应&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sets&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;frozenset&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bytearray(3.0)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;vs-&quot;&gt;引用 VS 拷贝&lt;/h1&gt;

&lt;p&gt;引用的一大优点是:你可以在程序范围内任何地方传递大型对象而不必途中产生拷贝。&lt;/p&gt;

&lt;p&gt;如果确实需要拷贝，有如下的方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;没有限制条件的分片表达式(L[:])能够复制序列&lt;/li&gt;
  &lt;li&gt;字典copy方法(X.copy())能够复制字典&lt;/li&gt;
  &lt;li&gt;有些内置函数(例如:list)能够生成拷贝(list(L))&lt;/li&gt;
  &lt;li&gt;copy标准库模块能够生成完整拷贝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于拷贝还需要注意的是:无条件值的分片以及字典copy方法只能做顶层复制。也就是说，不能够复制嵌套的数据结构。如果需要一个深层嵌套的数据结构的完整的、完全独立的拷贝，那么就要使用标准的copy模块，包括&lt;code&gt;import copy&lt;/code&gt;语句，并进行这样的拷贝:&lt;code&gt;x = copy.deepcopy(Y)&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;比较、相等性和真值&lt;/h1&gt;

&lt;p&gt;所有的Python对象也可以支持比较操作，测试相等性、相对大小等.Python的比较总是检查复合对象的所有部分，直到可以得出结果为止。事实上，当嵌套对象存在时，Python能够自动遍历数据结构，并从左到右递归地应用比较，要多深就走多深。过程中首次发现的差值将决定比较的结果。
有两种方式可以测试相等性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;rdquo;==&amp;rdquo;操作符测试值的相等性。Python运行相等测试&lt;/li&gt;
  &lt;li&gt;&amp;ldquo;is&amp;rdquo;表达式测试对象的一致性。Python测试二者是否是同一个对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般来说，Python中不同的类型的比较方法如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字通过相对大小进行比较&lt;/li&gt;
  &lt;li&gt;字符串按照字典顺序，一个字符接一个字符地对比进行比较(&amp;ldquo;abc&amp;rdquo;&amp;lt;&amp;rdquo;ac&amp;rdquo;)&lt;/li&gt;
  &lt;li&gt;列表和元组从左到右对每部分进行比较&lt;/li&gt;
  &lt;li&gt;字典通过排序之后的(键、值)列表进行比较。&lt;/li&gt;
  &lt;li&gt;数字混合类型比较在Python3.0中是错误的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python中真和假的含义&lt;/h2&gt;

&lt;p&gt;在Python中，整数0代表假，整数1代表真。&lt;/p&gt;

&lt;p&gt;除此之外，Python也把任意的空数据结构视为假，把任何非空数据结构视为真。真和假的概念是Python中每个对象的固有属性:每个对象不是真就是假:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字如果非零，则为真 &lt;/li&gt;
  &lt;li&gt;其他对象如果非空，则为真&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;None对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python还有一个特殊的对象:None，总被认为是假，一般都是起到一个空的占位作用&lt;/p&gt;

&lt;h2 id=&quot;type&quot;&gt;Type对象&lt;/h2&gt;

&lt;p&gt;事实上，即使是类型本身在Python中也是对象类型&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——6.列表与字典</title>
   <link href="http://username.github.com/Python/2013/01/30/Learning-Python6"/>
   <updated>2013-01-30T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/30/Learning-Python6</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;列表&lt;/h1&gt;

&lt;p&gt;列表是Python中最具灵活性的有序集合对象类型。与字符串不同的是，列表可以包含任何类型的对象:数字、字符串甚至其他列表。列表是可变对象，它支持原地修改的操作。&lt;/p&gt;

&lt;p&gt;Python的列表是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任意对象的有序集合&lt;/li&gt;
  &lt;li&gt;通过偏移读取&lt;/li&gt;
  &lt;li&gt;可变长度、异构以及任意嵌套&lt;/li&gt;
  &lt;li&gt;属于可变序列的分类&lt;/li&gt;
  &lt;li&gt;对象引用数组(列表中的存储的是对象的引用，而不是对象的拷贝)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;实际应用中的列表&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基本列表操作&lt;/h2&gt;

&lt;p&gt;由于列表是序列，它支持很多与字符串相同的操作。列表对&amp;rdquo;+&amp;rdquo;和&amp;rdquo;*&amp;ldquo;操作的响应与字符串很相似，两个操作的意思也是合并和重复，只不过是一个新的列表，而不是一个字符串。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;索引、分片和矩阵&lt;/h2&gt;

&lt;p&gt;对于列表而言，索引和分片操作与字符串中的操作基本相同。然而对列表进行索引的结果就是你指定的偏移处的对象(不管是什么类型)，而对列表分片时往往返回一个新的列表。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码定义了一个3*3的二维矩阵。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;原处修改列表&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引与分片的赋值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用列表的时候，可以将它赋值给一个特定项(偏移)或整个片段(分片)来改变它的内容，索引和分片的赋值都是原地修改，它们对列表进行直接修改，而不是生成一个新的列表作为结果.Python中的索引赋值与C及大多数其他语言极为相似——Python用一个新值取代指定偏移的对象引用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;列表方法的调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最常用的列表方法是append，它能够简单地将一个单项(对象引用)加至列表末端。与合并不同的是，append允许传入单一对象而不是列表。L.append(X)与L+[X]的结果类似，不同的是，前者会原地修改L，而后者会生成新的列表。
另一个比较常用的方法就是sort，它原地对列表进行排序。sort是使用Python标准的比较检验作为默认值(在这里指字符串比较)，而且以递增的顺序进行排序。另外，我们可以通过传入一个关键字参数来修改排序行为——这是指定按名称传递的函数调用中特殊的&amp;rdquo;name=value&amp;rdquo;语言。&lt;/p&gt;

&lt;p&gt;需要注意的是:要当心append和sort是原地修改列表对象的，方法的返回结果并没有返回列表(从技术上讲，两者的返回值都是None)。如果编写类似&lt;code&gt;L=L.append(X)&lt;/code&gt;的语句，将不会得到修改后的值(实际上，会失去整个列表的引用)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reverse:原地反转列表&lt;/li&gt;
  &lt;li&gt;extend:在末端插入多个元素&lt;/li&gt;
  &lt;li&gt;pop:删除最后一个元素，同时返回被删除的值&lt;/li&gt;
  &lt;li&gt;remove:通过值删除某个元素&lt;/li&gt;
  &lt;li&gt;insert:在偏移处插入某个元素&lt;/li&gt;
  &lt;li&gt;index:查找某元素的偏移&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-5&quot;&gt;字典&lt;/h1&gt;

&lt;p&gt;如果把列表看做是有序的对象集合，那么就可以把字典当成是无序的集合，它们主要的差别就在于:字典当中的元素师通过键来存取的，而不是通过偏移存取。
Python字典的主要属性如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过键而不是偏移来读取&lt;/li&gt;
  &lt;li&gt;任意对象的无序集合&lt;/li&gt;
  &lt;li&gt;可变长、异构、任意嵌套&lt;/li&gt;
  &lt;li&gt;属于可变映射类型&lt;/li&gt;
  &lt;li&gt;对象引用表(散列表)(字典中的存储的是对象的引用，而不是对象的拷贝)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-6&quot;&gt;实际应用中的字典&lt;/h1&gt;

&lt;h2 id=&quot;section-7&quot;&gt;原处修改字典&lt;/h2&gt;

&lt;p&gt;与列表相同，向字典中已存在的索引值赋值会改变与索引相关联的值。然而，与列表不同的是，每当对新字典键进行赋值(之前没有被赋值的键)，就会在字典内生成一个新的元素。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;其他字典的方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;keys:返回字典的键列表&lt;/li&gt;
  &lt;li&gt;values:返回字典的值列表&lt;/li&gt;
  &lt;li&gt;items:返回字典的(key,value)对元组&lt;/li&gt;
  &lt;li&gt;update:合并&lt;/li&gt;
  &lt;li&gt;pop:从字典中删除一个键并返回它的值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-9&quot;&gt;字典用法注意事项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;序列运算无效&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对新索引赋值会添加项&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;键不一定总是字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;创建字典的其他方法&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Method1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上四种形式都会建立相同的字典。&lt;/p&gt;

&lt;h2 id=&quot;python30&quot;&gt;Python3.0中的字典变化&lt;/h2&gt;

&lt;p&gt;字典的功能在Python3.0中已经有所变化了，具体来说，Python3.0中的字典:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持一种新的字典解析表达式，这是列表和集合解析的&amp;rdquo;近亲&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;对于D.key,D.values和D.items方法，返回可迭代的视图，而不是列表&lt;/li&gt;
  &lt;li&gt;由于前面一点，需要新的编码方式通过排序键来遍历&lt;/li&gt;
  &lt;li&gt;不再直接支持相对大小比较——取而代之的是手动比较&lt;/li&gt;
  &lt;li&gt;不再有D.has_key方法——相反，使用in成员关系测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;字典视图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Python3.0中，字典的keys、values和items都返回视图对象，而在Python2.6中，它们返回实际的结果列表。Python3.0中的字典视图并非创建后不能改变，它们可以动态地反映在视图对象创建之后对字典做出点修改:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，最后一行的结果是[&amp;lsquo;a&amp;rsquo;,&amp;rsquo;c&amp;rsquo;]。&lt;/p&gt;

&lt;p&gt;keys方法所返回的对象类似于集合，并且支持交集和并集等常见的操作；values视图不是这样，因为它们不是唯一的；但items结果是的，如果(key,value)对是唯一的并且可散列的话。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——5.字符串</title>
   <link href="http://username.github.com/Python/2013/01/29/Learning-Python5"/>
   <updated>2013-01-29T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/29/Learning-Python5</id>
   <content type="html">&lt;p&gt;Python字符串——一个有序的字符的集合。
Python的字符串被划分为不可变序列，意味着它们不可以在原处修改。
常见的字符串常量和表达式。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rsquo;&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;空字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rdquo;spam&amp;rsquo;s&amp;rdquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;双引号和单引号相同&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rsquo;s\np\ta\x00m&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;转义序列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;hellip;&amp;rdquo;&amp;rdquo;&amp;rdquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;三重引号字符串块&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=r&amp;rsquo;\temp\spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Raw字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=b&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0中的字节字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=u&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;仅在Python2.6中使用的Unicode字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s1+s2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;合并&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s * 3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s[i]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;索引&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s[i:j]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;分片&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;len(s)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;ldquo;a %s parrot&amp;rdquo; % kind&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串格式化表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;ldquo;a {0} parrot&amp;rdquo;.format(kind)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python2.6和Python3.0中的字符串格式化方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.find(&amp;lsquo;pa&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串方法调用:搜索&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.rstrip()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;移除空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.replace(&amp;lsquo;pa&amp;rsquo;,&amp;rsquo;xx&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.split(&amp;lsquo;,&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用展位符分隔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.isdigit()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内容测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.lower()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;短信息转换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.endswidth()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;结束测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo;.join(strlist)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;插入分隔符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.encode(&amp;lsquo;latin-1&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode编码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for x in S:print(x)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;迭代&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo; in X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[c * 2 for c in S]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;map(ord,S)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;section&quot;&gt;字符串常量&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;单双引号字符串是一样的&lt;/h2&gt;

&lt;p&gt;在Python中，单引号和双引号字符是可以互换的
此外，Python自动在任意的表达式中合并相邻的字符串常量，尽管可以简单地在它们之间增加+操作符来明确地表示这是一个合并操作。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;用转义序列代表特殊字节&lt;/h2&gt;

&lt;p&gt;反斜杠用来引入特殊的字节编码——转义序列。
转义序列让我们能够在字符串中嵌入不容易通过键盘输入的字节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;转义&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\newline&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;忽视(连续)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;反斜杠(保留)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;'&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;单引号(保留&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&quot;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;双引号(保留&amp;rdquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\a&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;响铃&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;倒退&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;换页&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;新行(换行)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\r&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\t&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;水平制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;垂直制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\N{id}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode数据库ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\uhhhh&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode16位的十六进制值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\UHHHHHHHH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode32位的十六进制值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\xhh&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十六进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\ooo&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;八进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Null(不是字符串结尾)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\other&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不转义(保留)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;raw&quot;&gt;raw字符串抑制转义&lt;/h2&gt;

&lt;p&gt;如果字母r(大写或小写)出现在字符串的第一引号的前面，它将会关闭转移机制。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;三重引号编写多行字符串块&lt;/h2&gt;

&lt;p&gt;Python还有一种三重引号的字符串常量格式，有时称作块字符串。这个形式以三重引号开始(单引号双引号都可以)，并紧跟任意行数的文本，并且以开始时同样的三重引号结尾。&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;实际应用中的字符串&lt;/h1&gt;

&lt;h2 id=&quot;section-5&quot;&gt;索引和分片&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引(S[i])获取特定偏移的元素:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个元素的偏移为0&lt;/li&gt;
  &lt;li&gt;负偏移索引意味着从最后或右边反向进行计数&lt;/li&gt;
  &lt;li&gt;S[0]获取了第一个元素&lt;/li&gt;
  &lt;li&gt;S[-2]获取了倒数第二个元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;分片(S[i:j])提取对应的部分作为一个序列:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上边界并不包含在内&lt;/li&gt;
  &lt;li&gt;如果没有给出的话，分片的边界默认为0和序列的长度&lt;/li&gt;
  &lt;li&gt;S[1:3]获取了从偏移为1的元素，直到但不包括偏移为3的元素&lt;/li&gt;
  &lt;li&gt;S[1:]获取了从偏移为1直到末尾(偏移为序列长度)之间的元素&lt;/li&gt;
  &lt;li&gt;S[:3]获取了从偏移为0直到但是不包括偏移为3之间的元素&lt;/li&gt;
  &lt;li&gt;S[:-1]获取了从偏移为0直到但不包括最后一个元素之间的元素&lt;/li&gt;
  &lt;li&gt;S[:]获取了从偏移0到末位之间的所有元素，这有效地实现了顶层S拷贝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分片表达式，还可以有第三个索引参数，用作步长，完整形式的分片变成了:X[I:J:K],这表示:&lt;strong&gt;索引X对象中的元素，从偏移为I直到偏移为J-1，每隔K元素索引一次&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;字符串转换工具&lt;/h2&gt;

&lt;p&gt;int():将字符串转换为数字
str():将数字转换为字符串表达形式
float():将字符串转换为浮点数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串代码转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ord():将单个字符转换为对应的ASCII码
chr():获取ASCII码并将其转化为对应的字符&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;字符串方法&lt;/h1&gt;

&lt;p&gt;除了表达式运算符之外，字符串还提供了一系列的方法去实现更复杂的文本处理任务。方法就是与特定的对象相关联在一起的函数。从技术角度来讲，它们附属于对象的属性，而这些属性不过是些可调用的函数罢了。&lt;/p&gt;

&lt;p&gt;字符串是不可变的，所以不能在远处直接对其进行修改。为了在已存在字符串中创建新的文本值，我们可以通过分片和合并这样的操作来建立新的字符串。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;字符串格式化表达式&lt;/h1&gt;

&lt;p&gt;如今的Python中的字符串格式化可以以两种形式实现:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串格式化表达式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是从Python诞生的时候就有的最初的技术；这是基于C语言的&amp;rdquo;printf&amp;rdquo;模型，并且在大多数现有的代码中使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串格式化方法调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是Python2.6和Python3.0新增加的技术，这是Python独有的方法，并且和字符串格式化表达式的功能有很大重叠。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;That is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bird!&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dead&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的结果就是:That is 1 dead bird!&lt;/p&gt;

&lt;p&gt;从技术上讲，字符串的格式化表达式往往是可选的——通常你可以使用多次的多字符串的合并和转换达到类似的目的。然后格式化允许我们将多个步骤合并为一个简单的操作，这一功能相当强大。&lt;/p&gt;

&lt;p&gt;需要注意的是:格式化总是会返回新的字符串作为结果，而不是对左侧的字符串进行修改。&lt;/p&gt;

&lt;p&gt;字符串格式化代码&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代码&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;意义　　　　　　　　　　　　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串(或任何对象)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;r&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s,但使用repr，而不是str&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十进制(整数)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;无号(整数)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;八进制数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十六进制数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x，但打印大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;e&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点指数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;E&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,但打印大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点十进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;F&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点十进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点e或f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;G&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点E或f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;常量%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上，在格式化字符串中，表达式左侧的转换目标支持多种转换操作，这些操作自由一套相当严谨的语法，转换目标的通用结构看上去是这样的:
&lt;code&gt;%[(name)][flags][width][.precision]typecode&lt;/code&gt;
有关格式化目标的语法在Python的标准手册中都有完整的介绍。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;基于字典的字符串格式化&lt;/h2&gt;

&lt;p&gt;字符串的格式化同时也允许左边的转换目标来引用右边字典中的键来提取对应的值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(n)d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(x)s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;spam&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上代码的结果是:&amp;rsquo;1 spam&amp;rsquo;&lt;/p&gt;

&lt;h1 id=&quot;section-10&quot;&gt;字符串格式化调用方法&lt;/h1&gt;

&lt;h2 id=&quot;section-11&quot;&gt;基础知识&lt;/h2&gt;

&lt;p&gt;简而言之，Python2.6和Python3.0(及其以后的版本)中的新的字符串对象的format方法使用主体字符串作为模板，并且接受任意多个表示将要根据模板替换的值的参数。在主体字符串中，花括号通过为止或关键字指出替换目标及将要插入的参数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0},{1} and {2}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的结果是&amp;rsquo;spam,ham and eggs&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;添加键、属性和偏移量&lt;/h2&gt;

&lt;p&gt;格式化字符串可以指定对象属性和字典键，方括号指定字典键，而点表示位置或关键字所引用的一项对象属性。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;My {1[spam] runs {0.platform}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码运行的结果是:&amp;rsquo;My laptop runs win32&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;添加具体格式化&lt;/h2&gt;

&lt;p&gt;格式化的语法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conversionflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;fieldname是指定参数的一个数字或关键字，后面跟着可选的&amp;rdquo;.name&amp;rdquo;或[index]成分引用&lt;/li&gt;
  &lt;li&gt;conversionflag可以是r,s后者a分别是在该值上对repr、str或ascii内置函数的一次调用&lt;/li&gt;
  &lt;li&gt;formatspec指定了如何表示该值，包括字段宽度、对齐方式、补零、小数点精度等细节，并且以一个可选的数据类型编码结束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多细节可以查看Python的库手册。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;为什么要新的格式化方法&lt;/h2&gt;

&lt;p&gt;格式化方法相对于原来的字符串格式化表达式有以下几个特点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拥有%表达式所没有的一些额外功能&lt;/li&gt;
  &lt;li&gt;可以更加明确地进行替代值引用&lt;/li&gt;
  &lt;li&gt;考虑到操作符会有一个更容易记忆的方法名&lt;/li&gt;
  &lt;li&gt;不支持用于单个和多个替代之大小写的不同语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-15&quot;&gt;通常意义下的类型分类&lt;/h1&gt;

&lt;h2 id=&quot;section-16&quot;&gt;同样分类的类型共享其操作集合&lt;/h2&gt;

&lt;p&gt;在Python中有三个主要类型(以及操作)的分类:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字(整数、浮点数、二进制、分数等)
支持加法和乘法&lt;/li&gt;
  &lt;li&gt;序列(字符串、列表、元组)
支持索引、分片和合并等&lt;/li&gt;
  &lt;li&gt;映射(字典)
支持通过键的索引等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;索引、分片以及其他的序列操作对于所有的序列来说都是同样有效的，对象的类型将会告诉Python去执行什么样的任务。&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;可变类型能够在原处修改&lt;/h2&gt;

&lt;p&gt;Python中的主要核心类型划分为如下两类:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不可变类型(数字、字符串、元组、不可变集合)
不可变的分类中没有哪个对象类型支持原处修改，尽管我们总是可以运行表达式来创建新的对象并将其结果分配给变量&lt;/li&gt;
  &lt;li&gt;可变类型(列表、字典、可变集合)
相反，可变的类型总是可以通过操作原处修改，而不用创建新的对象&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——4.动态类型简介</title>
   <link href="http://username.github.com/Python/2013/01/28/Learning-Python4"/>
   <updated>2013-01-28T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/28/Learning-Python4</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;缺少类型声明语句的情况&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;变量、对象和引用&lt;/h2&gt;
&lt;p&gt;在Python中，变量有如下的几个相关概念:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量创建
一个变量(也就是变量名)，就像a，当代吗第一次给它赋值时就创建了它。之后的赋值将会改变已创建的变量名的值。&lt;/li&gt;
  &lt;li&gt;变量类型
变量永远不会有任何的和它关联的类型信息或约束。类型的概念是存在于对象中而不是变量名中。变量原本就是通用的，它只是在一个特定的时间点，简单地引用了一个特定的对象而已。&lt;/li&gt;
  &lt;li&gt;变量使用
当变量出现在表达式中时，它会马上被当前引用的对象所代替，无论这个对象是什么类型。此外，所有的变量必须在其使用前明确地赋值，使用未赋值的变量会产生错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当执行到:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样的代码时，从概念上说，Python将会执行三个不同的步骤去完成这个请求。这些步骤反映了Python语言中所有赋值的操作:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个对象来代表值3&lt;/li&gt;
  &lt;li&gt;创建一个变量a，如果它还没有创建的话&lt;/li&gt;
  &lt;li&gt;将变量与新的对象3相连接&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从上面的三个步骤可以看出，变量和对象保存在内存中的不同部分，并通过连接相关联。变量总是连接到对象，并且绝不会连接到其他变量上，但是更大的对象可能连接到其他的对象。
在Python中从变量到对象的连接称作引用，也就是说，引用是一种关系，以内存中的指针的形式实现。一旦变量被使用，Python自动跟随这个变量到对象的连接。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类型属于对象，而不是变量名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用具体的术语来讲:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量是一个系统表的元素，拥有指向对象的连接的空间&lt;/li&gt;
  &lt;li&gt;对象是分配的一块内存，有足够的空间去表示它们所代表的值&lt;/li&gt;
  &lt;li&gt;引用是自动形成的从变量到对象的指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从技术上讲，一个对象是具有更复杂的结构的，每一个对象都有两个标准的头部信息:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个类型标识符去标识这个对象的类型&lt;/li&gt;
  &lt;li&gt;一个引用的计数器，用来决定是不是可以回收这个对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;对象的垃圾收集&lt;/h2&gt;

&lt;p&gt;在Python中，每当一个变量名被赋予一个新的对象，之前那个对象占用的空间就会被回收(如果它没有被其他的变量名或对象所引用的话)。这种自动回收对象空间的计数就做垃圾收集。
在Python内部，Python是这样实现这个功能的:它在每个对象中保持了一个计数器，计数器记录了当前指向该对象的引用的数目。一旦(并精确在同一时间)这个计数器被设置为0，这个对象的内存空间就会自动回收。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;共享引用&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的实际效果就是变量a和变量b都引用了相同的对象(也就是说，指向了相同的内存)。这在Python中叫做共享引用——多个变量名引用了同一个对象。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的最终结果就是，a指向数据为5的内存空间，b指向数据为3的内存空间。事实上，是没有办法修改对象3的值的，之前就提到过，整数是不可变的，因此没有办法在远处修改。在Python中，变量总是一个指向对象的指针，而不是可改变的内存区域的标签:给一个变量赋一个新的值，并不是替换了原始的对象，而是让这个变量去引用完全不同的一个对象。实际的效果就是对一个变量赋值，仅仅会影响那个被赋值的变量。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;共享引用和在原处修改&lt;/h2&gt;

&lt;p&gt;但是事实上有一些对象和操作确实会在原处改变对象(例如列表)。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的结果是，L1指向一个值为24的对象，L2仍是引用最初的列表。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的结果是，L1和L2同时引用了值为[24,3,4]的列表。
必须注意上两段代码的不同之处。&lt;/p&gt;

&lt;p&gt;如果不想发生以上的情况，那就需要Python拷贝对象，而不是创建引用。
有很多方法可以拷贝一个列表，最常用的方法就是从头到尾的分片。
但是，分片这种方法是不能应用在其他的可变的核心类型上(字典和集合，因为它们不是序列)，复制一个字典或集合应该使用X.copy()方法调用。在标准库中的copy模块有一个通用的复制任意对象类型的调用:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中，可变的对象包括了列表、字典以及一些通过class语句定义的对象。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;共享引用和相等&lt;/h2&gt;

&lt;p&gt;通常来说，考虑到效率的问题，Python会缓存并复用了小的整数和小的字符串，例如如下的代码:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;shrubbery&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的对象42也许并没有被马上回收，而是仍被存在一个系统表中，等待下一次你的代码生成另一个42来重复引用。尽管有这种机制，但是大部分对象都会在不再引用时马上回收。&lt;/p&gt;

&lt;p&gt;在Python中有两种&amp;rdquo;相等&amp;rdquo;:
==操作符:测试两个被引用的对象是否有相同的值
is操作符:检查对象的同一性，就是检查两个变量名是否是指向同一个对象&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——3.数字</title>
   <link href="http://username.github.com/Python/2013/01/27/Learning-Python3"/>
   <updated>2013-01-27T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/27/Learning-Python3</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;Python的数字类型&lt;/h1&gt;

&lt;p&gt;Python数字类型的完整工具包括:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整数和浮点数&lt;/li&gt;
  &lt;li&gt;复数&lt;/li&gt;
  &lt;li&gt;固定精度的十进制数&lt;/li&gt;
  &lt;li&gt;有理分数&lt;/li&gt;
  &lt;li&gt;集合&lt;/li&gt;
  &lt;li&gt;布尔类型&lt;/li&gt;
  &lt;li&gt;无穷的整数精度&lt;/li&gt;
  &lt;li&gt;各种数字内置函数和模块&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;数字常量&lt;/h2&gt;

&lt;p&gt;基本数字常量:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;数字&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;常量&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1234,-24,0,99999999999&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整数(无穷大小)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.23,1.,3.14e-10,4E210,4.0e+210&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0177,0x9ff,0b101010&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python2.6中的八进制、十六进制、二进制常量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0o177,0x9ff,0b101010&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0中的八进制、十六进制、二进制常量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3+4j,3.0+4.0j,3j&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;复数常量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;内置数学工具和扩展&lt;/h2&gt;

&lt;p&gt;除了上述表格中的内置数字常量之外，Python还提供了一系列处理数字对象的工具:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;表达式操作符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;+,-,*,/,&amp;raquo;,**,&amp;amp;等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内置数学函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pow,abs,round,int,hex,bin等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;公用模块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;random,math等&lt;/p&gt;

&lt;h2 id=&quot;python-1&quot;&gt;Python表达式操作符&lt;/h2&gt;

&lt;p&gt;Python表达式操作符及程序&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;操作符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yield x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成器函数发送协议&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lamdba args:expression&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成匿名函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x if y else z&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;三元选择表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x or y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑或(只有x为假，才会计算y)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x and y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑与(只有x为真,才会计算y)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;not x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑非&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x in y,x not in y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;成员关系(可迭代对象、集合)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x is y,x is not y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象实体测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&amp;lt;y,x&amp;lt;=y,x&amp;gt;y,x&amp;gt;=y,x==y,x!=y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;大小比较，集合子集和超集相等性操作符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x | y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位或,集合并集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x ^ y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位异或，集合对称差&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x &amp;amp; y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位与,集合交集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x &amp;laquo;&amp;nbsp;y,x&amp;nbsp;&amp;raquo; y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;左移或右移y位&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x + y,x -y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;加法/合并,减法,集合差集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x * y,x % y,x / y,x // y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;乘法/重复,余数/格式化,除法:整除法或floor除法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-x,+x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;一元减法，识别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;按位求补(取反)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x ** y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;幂运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x[i]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;索引(序列、映射及其他)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x[i:j:k]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;分片&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x(&amp;hellip;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用(函数、方法、类及其他可调用的)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x.attr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;属性引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(&amp;hellip;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组，表达式，生成器表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[&amp;hellip;]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表，列表解析&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;{&amp;hellip;}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典、集合、集合和字典解析&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;混合操作所遵循的操作优先级&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在上表中，表中的操作符越是靠后的优先级越高，因此在混合表达式中要更加小心&lt;/li&gt;
  &lt;li&gt;表中位于同一行的表达式在组合的时候通常从左到右组合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;括号分组的子表达式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果用括号将表达式各部分进行分组的话，就可以完全忽略优先级的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;混合类型的自动升级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在混合类型的表达式中，Python首先将被操作的对象转换成其中最复杂的操作对象的类型，然后再对相同类型的的操作对象进行数学运算。
Python是这样划分数字类型的复杂度的:整数比浮点数简单，浮点数比复数简单。
另外需要注意的是，这些混合类型转换仅仅在将数字类型混合到一个表达式中的时候才使用。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;在实际应用中的数字&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;比较:一般的和连续的&lt;/h2&gt;

&lt;p&gt;Python允许把多个比较连续起来执行范围测试，例如:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#相当于 X &amp;lt; Y and Y &amp;lt; Z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;floor&quot;&gt;除法:传统除法、Floor除法和真除法&lt;/h2&gt;

&lt;p&gt;X / Y:&lt;/p&gt;

&lt;p&gt;传统除法和真除法。在Python2.x中，这个操作对于整数会省去小数部分，对于浮点数会保持小数部分。在Python3.0中变成了真除法(无论任何类型都会保持小数部分)。&lt;/p&gt;

&lt;p&gt;X // Y:&lt;/p&gt;

&lt;p&gt;Floor除法。这个操作不考虑操作对象的类型，总会省略结果的小数部分，剩下最小的能整除的整数部分.针对整数返回一个整数，如果有任何一个操作数是浮点数，则返回一个浮点数。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;十六进制、八进制和二进制计数&lt;/h2&gt;

&lt;p&gt;Python提供了很多内置函数进行进制的转换:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;oct():将十进制数转换为八进制数&lt;/li&gt;
  &lt;li&gt;hex():将十进制数转换为十六进制数&lt;/li&gt;
  &lt;li&gt;bin():将十进制数转换为二进制数&lt;/li&gt;
  &lt;li&gt;int():将一个数字的字符串变换为一个整数，并且可以通过定义的第二个参数来确定按照哪个进制进行转换&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o37&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;#八进制数&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#十六进制&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#二进制数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;位操作&lt;/h2&gt;

&lt;p&gt;Python支持像C语言中那样的位操作。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;其他的内置数学工具&lt;/h2&gt;

&lt;p&gt;除了核心对象类型外，Python还支持用于数字处理的内置函数和内置模块。例如内置函数pow和abs，分别计算幂和绝对值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中有3中方法可以计算平方根:使用一个模块函数、一个表达式或一个内置函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#函数模块&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;	 &lt;span class=&quot;c&quot;&gt;#表达式&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#内置函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外需要注意的是random模块，可以用来产生一个0和1之间的随机数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Life of Brian&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Holy Grail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Meaning of Life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-7&quot;&gt;其他数字类型&lt;/h1&gt;

&lt;h2 id=&quot;section-8&quot;&gt;小数数字&lt;/h2&gt;

&lt;p&gt;Python2.4开始引进了一个新的核心数据对象:小数对象。它比其他数据类型要复杂一些，小数是通过一个导入的模块调用函数后创建的，而不是通过运行常量表达式创建的。从功能上来说，小数对象就像浮点数，只不过它们有固定的位数和小数点，因此小数是有固定的精度的浮点值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码中，第一和第二行的结果都是5.5511151231257827e-17，因为与硬件相关的浮点数运算在精度方面有内在的缺陷,不过使用小数对象时，就能改正，最后一行的结果是Decimal(&amp;lsquo;0.0&amp;rsquo;)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设置全局精度&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;decimal模块中的其他工具可以用来设置所有小数数值的精度、设置错误处理等。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decimal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上代码返回的结果是Decimal(&amp;lsquo;0.1429&amp;rsquo;)。
这对于处理货币应用程序非常有用。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;分数类型&lt;/h2&gt;

&lt;p&gt;Python3.0引入了一个新的数字类型——分数，它实现了一个有理数对象。它明确地保留一个分子和一个分母，从而避免了浮点数学的某些不精确性和局限性。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;frations&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-10&quot;&gt;集合&lt;/h2&gt;
&lt;p&gt;这是一些唯一的、不可变的对象的一个无序集合(collection),这些操作支持与数学集合理论相对应的操作。可以把集合看成一个没有键的字典。
可以使用如下的方式创建一个集合。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;abcde&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是要创建一个空的字典，必须使用内置函数set,因为{}代表的是一个空的字典。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不可变限制和冻结集合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很大程度上由于其实现，集合只能包含不可变的对象类型。因此，列表和字典不能嵌入到集合中去。但是，如果需要存储复合值的话，元组是可以嵌入的。
集合本身也是不可变的，所以不能直接嵌入到其他集合中，如果需要在另一个集合中存储一个集合，可以像调用set一样来调用frozenset，但是，它创建一个不可变的集合，该集合不可修改并且可以嵌套到其他集合中。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;布尔型&lt;/h2&gt;

&lt;p&gt;True&amp;mdash;&amp;mdash;&amp;mdash;1
False&amp;mdash;&amp;mdash;&amp;mdash;0&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;数字扩展&lt;/h1&gt;

&lt;p&gt;尽管Python的核心数字类型提供的功能对于大多数应用程序已经够用了，还是有大量的第三方开源扩展可以用来解决更加专门的需求。
比如有一个叫做NumPy(Numeric Python)的Python扩展提供了高级的数字编工具，例如矩阵数据类型、向量处理和高级的计算库。像Los Alamos和NASA这样的核心科学编程组织，使用带有NumPy的Python来实现此前用C++、FORTRAN、Matlab编写的任务。Python和NumPy的组合往往可以比作是一款免费的、更加灵活的的Matlab。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——2.介绍Python对象类型</title>
   <link href="http://username.github.com/Python/2013/01/26/Learning-Python2"/>
   <updated>2013-01-26T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/26/Learning-Python2</id>
   <content type="html">&lt;p&gt;Python程序可以分解成模块、语句、表达式以及对象:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程序又模块构成&lt;/li&gt;
  &lt;li&gt;模块包含语句&lt;/li&gt;
  &lt;li&gt;语句包含表达式&lt;/li&gt;
  &lt;li&gt;表达式建立并处理对象&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section&quot;&gt;为什么使用内置类型&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;内置对象使程序更容易编写&lt;/li&gt;
  &lt;li&gt;内置对象时扩展的组件&lt;/li&gt;
  &lt;li&gt;内置对象往往比定制的数据结构更有效率&lt;/li&gt;
  &lt;li&gt;内置对象是语言标准的一部分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python的核心数据类型&lt;/h2&gt;

&lt;p&gt;在Python程序中处理的每一样东西都是一种对象，内置对象如下表所示:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;对象类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;例子 常量/创建&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数字&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1234,3.1415,3+4j,Deciaml,Fraction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo;,&amp;rdquo;guido&amp;rsquo;s&amp;rdquo;,b&amp;rsquo;a\xolc&amp;rsquo;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[1,[2,&amp;rsquo;three&amp;rsquo;],4]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{&amp;lsquo;food&amp;rsquo;:&amp;rsquo;spam&amp;rsquo;,&amp;rsquo;taste&amp;rsquo;:&amp;rsquo;yum&amp;rsquo;}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(1,&amp;rsquo;spam&amp;rsquo;,4,&amp;rsquo;U&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;myfile = open(&amp;lsquo;egg&amp;rsquo;,&amp;rsquo;r&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;set(&amp;lsquo;abc&amp;rsquo;),{&amp;lsquo;a&amp;rsquo;,&amp;rsquo;b&amp;rsquo;,&amp;rsquo;c&amp;rsquo;}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;其他类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;类型、None、布尔型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编程单元类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数、模块、类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与实现相关的类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编译的代码堆栈跟踪&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;像函数、模块和类这样的编程单元在Python中也是对象，它们由def、class、import和lamdba这样的语句和表达式创建，并且可以在脚本间自由地传递，存储在其他对象中。&lt;/p&gt;

&lt;p&gt;Python中没有类型声明，运行的表达式的语法决定了创建和使用的对象的类型。一旦创建了一个对象，它就和操作集合绑定了，例如只能对字符串进行字符串相关的操作。&lt;/p&gt;

&lt;p&gt;Python是动态类型的(&lt;strong&gt;它自动跟踪你的类型而不是要求声明代码&lt;/strong&gt;)，但是他也是强类型语言。(&lt;strong&gt;你只能对一个对象进行适合该类型的有效操作&lt;/strong&gt;)&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;数字&lt;/h1&gt;

&lt;p&gt;Python中的数字支持一般的数学运算，包括加法(+),乘法(*),除法(/),整除(//),取模(%),乘方(**)。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;字符串&lt;/h1&gt;

&lt;p&gt;从严格意义上说，字符串是单个字符的字符串的序列，其他类型的序列还包括列表和元组。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;序列的操作&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为序列，字符串支持针对各个元素位置顺序的操作。在Python中，索引是从0开始的，但是我们也可以反向索引，从最后一个开始，-1代表最后一个元素，-2代表倒数第二个元素，以此类推。比较好的记忆方法是:负的索引号简单地与字符串长度相加，就得到了正向的索引号。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分片&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了简单的从位置进行索引，序列也支持一种分片(slice)操作，这是一种一步就能够提取整个分片(slice)的方法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;它们的一般形式为X[I:J],表示&amp;rdquo;取出在X中从偏移量为I，直到但不包括偏移量为J的内容&amp;rdquo;，结果就是返回一个新的对象。
在一个分片中，左边界默认为0，并且右边界默认为分片序列的长度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合并&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为一个序列，字符串也支持使用加号进行合并(将两个字符串合并成为一个新的字符串)。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;不可变性&lt;/h2&gt;

&lt;p&gt;字符串在Python具有不可变性，&lt;strong&gt;也就是说在创建后不能就地改变&lt;/strong&gt;，但是你总是可以通过建立一个新的字符串并以同一个变量名对其进行赋值，因为Python在运行过程中会清理旧对象。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中，每一个对象都可以分为不可变性或可变性，在核心类型中，数字、字符串和元组是不可变的，列表和字典是可变的。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;类型特定的方法&lt;/h2&gt;

&lt;p&gt;到目前为止讲到的操作都是Python中序列对象共有的，包括列表和元组。字符串也有一些自己特殊的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字符串的find方法是一个基本的子字符串查找的操作。(它将返回一个传入子字符串的偏移量，或者没有找到的情况下返回-1)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;replace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;replace方法将会对全局进行搜索和替换。&lt;/p&gt;

&lt;p&gt;这些字符串的方法都不会改变原来的字符串，只是会生成一个新的字符串对象作为返回对象。&lt;/p&gt;

&lt;p&gt;注意:尽管序列操作是通用的，但方法不通用(虽然某些类型共享某些方法名)。一条简明的法则是这样的:&lt;strong&gt;可作用于多种类型的通用型操作都是以内置函数或表达式的形式出现的[例如,len(X),X[0]]，但是类型特定的操作是以方法调用的形式出现的。[例如,aString.find(&amp;lsquo;x&amp;rsquo;)]&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;寻求帮助&lt;/h2&gt;

&lt;p&gt;想要查看对象详细的方法，可以调用内置的&lt;code&gt;dir&lt;/code&gt;函数，它将返回一个列表，其中包含了对象的所有属性。(对象属性包括方法)
&lt;code&gt;dir&lt;/code&gt;函数简单地给出了方法的名称，要查询它们是做什么的，你可以将其传递给&lt;code&gt;help&lt;/code&gt;函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;编写字符串的其他方法&lt;/h2&gt;

&lt;p&gt;在Python中，反斜线转义序列表示特殊的字符，Python允许字符串包括在单引号或双引号中。(它们代表着相同的东西)
Python也支持原始(raw)字符串常量，即去掉反斜线转义机制。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;模式匹配&lt;/h2&gt;

&lt;p&gt;Python的字符串对象能够支持基于模式的文本处理，详细的内容后面介绍。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;列表&lt;/h1&gt;

&lt;p&gt;Python的列表对象是这个语言提供的最通用的序列。列表是一个任意类型的对象的位置相关的有序集合，它没有固定的大小。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;序列操作&lt;/h2&gt;

&lt;p&gt;由于列表是序列的一种，列表支持之前提到的所有序列操作,包括索引、切片等操作。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;类型特定的操作&lt;/h2&gt;

&lt;p&gt;Python的列表与其他语言中的数组有些类似，但要强大得多。其中一个方面就是，列表没有固定类型的约束，一个列表中的元素可以是各种不同的类型，其次列表是没有固定大小的，它能够按照需要自己增加或减少列表大小。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;append:扩充列表的大小并在列表的尾部插入一项&lt;/li&gt;
  &lt;li&gt;pop:移除给定偏移量的一项，从而让列表减小&lt;/li&gt;
  &lt;li&gt;insert:在任意位置插入元素&lt;/li&gt;
  &lt;li&gt;remove:按照值移除元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要注意的是，大多数列表的方法都会就地改变列表对象，而不是创建一个新的列表。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;边界检查&lt;/h2&gt;

&lt;p&gt;尽管列表没有固定的大小，Python仍不允许引用不存在的元素，超出列表末尾之外的索引总是会导致错误。&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;嵌套&lt;/h2&gt;

&lt;p&gt;Python核心数据类型的一个优秀的特性就是它们支持任意的嵌套，能够以任意的组合对其进行嵌套，并可以多个层次进行嵌套。&lt;/p&gt;

&lt;h1 id=&quot;section-14&quot;&gt;字典&lt;/h1&gt;

&lt;p&gt;Python中的字典是完全不同的东西:它们不是序列，而是一种映射(mapping)。映射是一个其他对象的集合，但是它们是通过键而不是相对位置来存储的。实际上，映射并没有任何可靠的从左至右的顺序。它们简单地讲键映射到值。字典是Python核心对象集合中的唯一的一种映射类型，也具有可变性——可以就地改变，并可以随需求增大或减少，就像列表那样。&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;映射操作&lt;/h2&gt;

&lt;p&gt;作为常量编写时，字典编写在大括号中，并包含一系列的&amp;rdquo;键:值&amp;rdquo;对。通过键索引一个字典往往是Python中编写搜索的最快方法。
字典的索引操作使用的是和序列相同的语法，但是在方括号中的元素是键，而不是相对位置。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-16&quot;&gt;重访嵌套&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			 &lt;span class=&quot;s&quot;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mgr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			 &lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;40.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如上面代码所示，Python的核心数据类型是非常灵活的，可以轻松的建立复杂的信息结构。&lt;/p&gt;

&lt;h2 id=&quot;for&quot;&gt;键的排序:for循环&lt;/h2&gt;

&lt;p&gt;之前说过，字典中是没有顺序的，全部都是以键来进行索引的，但是，如果确实需要强调顺序的时候，可以这样做:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;=&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;sorted是内置函数，sorted调用返回结果并对各种对象类型进行排序。&lt;/p&gt;

&lt;h2 id=&quot;if&quot;&gt;不存在的键:if测试&lt;/h2&gt;

&lt;p&gt;尽管我们能够通过给新的键赋值来扩展字典，但是获取一个不存在的键仍然是一个错误.可以利用in和if进行判断:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;missing&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-17&quot;&gt;元组&lt;/h1&gt;

&lt;p&gt;元组基本上就像一个不可以改变的列表，就像列表一样，元组是序列，但是它具有不可变性，和字符串类似。从语法上讲，它们编写在圆括号中而不是方括号中，他们支持任意类型、任意嵌套以及常见的序列操作。&lt;/p&gt;

&lt;p&gt;元组还有两个专有的可调用方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index:返回元素的偏移值&lt;/li&gt;
  &lt;li&gt;count:返回元素在元组中出现的次数&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-18&quot;&gt;为什么要用元组&lt;/h2&gt;

&lt;p&gt;元组在实际应用并不如列表那么常用，但是它的关键在于不可变性。如果在程序中以列表的形式传递一个对象的集合，它可能在任何地方改变，如果使用元组的话，就不能。也就是说，元组提供了一种完整性约束，这对于我们这里所编写的更大型的程序来说是方便的。&lt;/p&gt;

&lt;h1 id=&quot;section-19&quot;&gt;文件&lt;/h1&gt;

&lt;p&gt;文件对象是Python代码对计算机上外部文件的主要接口。虽然文件时核心类型，但是它有些特殊:没有特定的常量语法来创建文件。要创建一个文件对象，需要调用内置的open函数以字符串的形式传递给它一个外部的文件名以及一个处理模式的字符串。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-20&quot;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Python中的核心对象有:数字、字符串、列表、字典、元组、文件和集合。&lt;/li&gt;
  &lt;li&gt;其中，数字、字符串和元组具有不可变性。&lt;/li&gt;
  &lt;li&gt;字符串、元组、列表是属于序列的，是有顺序的。&lt;/li&gt;
  &lt;li&gt;字典不属于序列，它是没有顺序的。&lt;/li&gt;
  &lt;li&gt;Python中的关键思想之一:&lt;strong&gt;不要把代码限制在特定的类型上，使代码自动适用于多种类型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——1.Python如何运行程序</title>
   <link href="http://username.github.com/Python/2013/01/25/Learning-Python1"/>
   <updated>2013-01-25T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/25/Learning-Python1</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;Python解释器简介&lt;/h1&gt;

&lt;p&gt;Python不仅是一门编程语言，也是一个名为解释器的软件包。解释器是一种让其他程序运行起来的程序。实际上，解释器是代码与机器的计算机硬件之间的软件逻辑层。在UNIX/Linux上，Python通常是安装在/usr目录下的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;程序执行&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;程序员的视角&lt;/h2&gt;

&lt;p&gt;Python程序的源代码通常是以.py来命名的，当你将代码保存为一个文本文件之后，你必须告诉Python解释器去执行这个文件。&lt;/p&gt;

&lt;h2 id=&quot;python-1&quot;&gt;Python的视角&lt;/h2&gt;

&lt;p&gt;当Python运行脚本时，在代码开始进行处理之前，Python还会执行一些步骤。确切地说，第一步是编译成所谓的&amp;rdquo;字节码&amp;rdquo;,之后将其转发到所谓的&amp;rdquo;虚拟机&amp;rdquo;中.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字节码编译&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;编译是一个简单的翻译步骤，而且字节码是源代码底层的、与平台无关的表现形式。概括地说，Python通过把每一条源语句分解为单一步骤来将这些源语句翻译成一组字节码指令，这些字节码可以提高执行速度。
编译好的字节码文件将会被Python自动保存为.pyc文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python虚拟机(PVM)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一旦程序编译成字节码，之后的字节码发送到通常称为Python虚拟机(Python Virtual Machine,PVM)上来执行，实际上它不是一个独立的程序，不需要安装。事实上，PVM就是迭代运行字节码指令的一个大循环，一个接一个地完成操作。PVM是Python的运行引擎，它时常表现为Python系统的一部分，并且它是实际运行脚本的组件。从技术上讲，它才是所谓&amp;rdquo;Python解释器&amp;rdquo;的最后一步。&lt;/p&gt;

&lt;h1 id=&quot;python-2&quot;&gt;Python实现的替代者&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;原始的标准的Python实现方式，它运行的速度最快、最完整而且也是最健全的。它可以脚本化C和C++组件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;JPython是一种Python语言的替代实现方式，其目的是为了与Java编程语言集成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Python的第三种实现方式是IronPython(比CPython和JPython都要新)，其设计目的是让Python程序可以与Windows平台上的.NET框架以及与之对应的Linux上开源的Mono编写的应用相集成&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
</feed>