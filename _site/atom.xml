<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Flyaway's Wiki</title>
 <link href="http://username.github.com/atom.xml" rel="self"/>
 <link href="http://username.github.com"/>
 <updated>2013-02-06T21:41:47+08:00</updated>
 <id>http://username.github.com</id>
 <author>
   <name>Flyaway</name>
   <email>flyaway1217@gmail.com</email>
 </author>

 
 <entry>
   <title>《Learning Python》学习笔记——13.文档</title>
   <link href="http://username.github.com/Python/2013/02/05/Learning-Python13"/>
   <updated>2013-02-05T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/05/Learning-Python13</id>
   <content type="html">&lt;h1 id=&quot;pyton&quot;&gt;Pyton文档资源&lt;/h1&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;形式&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;角色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;#注释&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件中的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dir函数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象中可用属性的列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文档字符串:&lt;code&gt;__doc__&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;附加在对象上的文件中的文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PyDoc:help函数&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象的交互帮助&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PyDoc:HTML报表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浏览器中的模块文档&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;标准手册&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;正式的语言和库的说明&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;网站资源&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;在线教程、例子等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;出版的书籍&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;商业参考书籍&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section&quot;&gt;#注释&lt;/h2&gt;
&lt;p&gt;井字号注释是代码编写的最基本方式。Python会忽略#之后所有文字(只要#不是位于字符串常量中)，所以你可以在这个字符之后插入一些对程序员有意义的文字和说明。不过，这类注释只能在源码中看到。&lt;/p&gt;

&lt;h2 id=&quot;dir&quot;&gt;dir函数&lt;/h2&gt;
&lt;p&gt;内置的dir函数是抓取对象内可用所有属性列表的简单方式，它能够调用任何有属性的对象。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;文档字符串&lt;/h2&gt;
&lt;p&gt;除了#注释外，Python也支持可自动附加在对象上的文档，而且在运行时还可保存查看。从语法上来说，这类注释是写成字符串，放在模块文件、函数以及类语句的顶端，就在任何可执行程序代码之前。Python会自动封装这个字符串，也就是成为所谓的文档字符串，使其成为相应对象的&lt;code&gt;__doc__&lt;/code&gt;属性。&lt;/p&gt;

&lt;p&gt;这个文档协议的重点在于，注释会保存在&lt;code&gt;__doc__&lt;/code&gt;属性中以供查看(文件导入之后)。
文档字符串的例子:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Module documentation&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;Words to Here&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;spam&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	function documentation&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	can we have your liver then?&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;	&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#square&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&amp;quot;class documentation&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__doc__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pydochelp&quot;&gt;PyDoc:help函数&lt;/h2&gt;
&lt;p&gt;文档字符串技术是实用的工具，Python现在配备了一个工具，使其更易于显示。标准PyDoc工具是Python程序代码，知道如何提取文档字符串并且自动提取使其结构化的信息，并将其格式化成各种类型的排列友好的报表。&lt;/p&gt;

&lt;p&gt;两种最主要的PyDoc接口是内置的help函数和PyDoc GUI/HTML接口。help函数会启用PyDoc从而产生简单的文字报表。&lt;/p&gt;

&lt;h2 id=&quot;pydochtml&quot;&gt;PyDoc:HTML报表&lt;/h2&gt;
&lt;p&gt;想要更宏观的显示的话，PyDoc也提供GUI接口，可以将其报表通过HTML网页格式来呈现，可通过任何浏览器来查看。在这种模式下，PyDoc可以在本地运行，也能在远程服务器上运行。报表中会包含自动创建的超链接，让你能够点击应用程序中相关组件的稳定。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;标准手册&lt;/h2&gt;
&lt;p&gt;为了获得语言以及工具集最新的完整说明，Python标准手册随时可以提供支持。Python手册以HTML和其他格式来实现，在Windows上是随着Python系统安装的。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;常见编写代码的陷阱&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;别忘了逗号&lt;/li&gt;
  &lt;li&gt;从第1行开始&lt;/li&gt;
  &lt;li&gt;空白行在交互模式提示符下很重要&lt;/li&gt;
  &lt;li&gt;缩进要一致&lt;/li&gt;
  &lt;li&gt;不要在Python中写C代码&lt;/li&gt;
  &lt;li&gt;使用简单的for循环，而不是while或range&lt;/li&gt;
  &lt;li&gt;要注意赋值语句中的可变对象&lt;/li&gt;
  &lt;li&gt;不要期待在原处修改对象的函数会返回结果&lt;/li&gt;
  &lt;li&gt;一定要使用括号调用函数&lt;/li&gt;
  &lt;li&gt;不要在导入和重载中使用扩展名或路径&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——12.迭代器和解析,第一部分</title>
   <link href="http://username.github.com/Python/2013/02/05/Learning-Python12"/>
   <updated>2013-02-05T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/05/Learning-Python12</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;迭代器:初探&lt;/h1&gt;
&lt;p&gt;上一章曾经提到过，其实for循环是可用于任何可迭代的对象上的。实际上，对Python中所有会从左至右扫描对象的迭代工具而言都是如此，这些迭代工具包括了for循环、列表解析、in成员关系测试以及map内置函数等。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;可迭代对象&amp;rdquo;的概念在Python中是相当新颖的，基本这就是序列观念的通用化:如果对象时实际保存的序列，或者可以再迭代工具环境中一次产生一个结果的对象,那就看做是可迭代的。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;文件迭代器&lt;/h2&gt;
&lt;p&gt;作为内置数据类型的文件也是可迭代的，它有一个名为&lt;code&gt;__next__&lt;/code&gt;的方法，每次调用时，就会返回文件中的下一行。当到达文件末尾时，&lt;code&gt;__next__&lt;/code&gt;会引发内置的StopIteration异常，而不是返回空字符串。&lt;/p&gt;

&lt;p&gt;这个接口就是Python中所谓的迭代协议:有&lt;code&gt;__next__&lt;/code&gt;方法的对象会前进到下一个结果，而在一系列结果的末尾时，则会引发StopIteration。任何这类对象都认为是可迭代的。任何这类对象也能以for循环或其他迭代工具遍历，因为所有迭代工具内部工作起来都是在每次迭代中调用&lt;code&gt;__next__&lt;/code&gt;，并且捕捉StopIteratin异常来确定何时离开。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;script.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就是文件迭代的一个例子，并且这种用法是最高效的文件读取方法，主要有三个优点:这是最简单的写法，运行快，并且从内存使用情况来说也是最好的。&lt;/p&gt;

&lt;p&gt;替代的写法是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;).readlines():&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这种调用方法会把文件一次性读到内存中，如果文件太大，那么内存会被消耗光的。&lt;/p&gt;

&lt;h2 id=&quot;iternext&quot;&gt;手动迭代:iter和next&lt;/h2&gt;
&lt;p&gt;为了支持手动迭代代码(用较少的录入)，Python3.0还提供了一个内置函数next，它会自动调用一个对象的&lt;code&gt;__next__&lt;/code&gt;方法。给定一个对象X，调用&lt;code&gt;next(X)&lt;/code&gt;等同于&lt;code&gt;X.__next__()&lt;/code&gt;，但前者简单很多。&lt;/p&gt;

&lt;p&gt;从技术角度来讲，迭代协议还有一点值得注意。当for循环开始时，会通过它传给iter内置函数，以便从可迭代对象中获得一个迭代器，返回的对象含有需要的next方法。调用iter的步骤对于文件来说不是必须的，因为文件对象就是自己的迭代器，但是对于其他的一些内置数据类型来说，就不一定了。&lt;/p&gt;

&lt;p&gt;列表以及很多其他的内置对象，不是自身的迭代器，因为它们支持多次打开迭代器。对这样的对象，我们必须调用iter来启动迭代:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#return false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#会报错&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__next__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;虽然Python迭代工具自动调用这些(&lt;code&gt;iter&lt;/code&gt;,&lt;code&gt;__next__&lt;/code&gt;)函数，我们也可以使用它们来手动地应用迭代协议。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;列表解析:初探&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;列表解析基础知识&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;列表解析写在一个方括号中，因为它们最终是构建一个新的列表的一种方式。它们以我们所组成的一个任意的表达式开始，该表达式使用我们所组成的一个循环变量(x+10)。这后面跟着我们现在应该看作是一个for循环头部的部分，它申明了循环变量，以及一个可迭代对象(for x in L)&lt;/p&gt;

&lt;p&gt;要运行该表达式，Python在解释器内部执行一个遍历L的迭代，按照顺序把x赋给每个元素，并且收集对各元素运行左边的表达式的结果。我们得到的结果列表就是列表解析所表达的内容——针对L中的每个x,包含了x+10的一个新列表。&lt;/p&gt;

&lt;p&gt;其实列表解析式并不是必须的，因为它能完成的工作都能够通过for循环完成，但是列表解析式比手动的for循环语句运行得更快(往往速度快一倍)，因为它们的迭代在解释器内部是以C语言的速度执行的，而不是以手动的Python代码执行的，特别是对于较大的数据集合，这是使用列表解析的一个主要的性能优点。&lt;/p&gt;

&lt;p&gt;当我们考虑在一个序列中的每个项上执行一个操作时，都可以考虑使用列表解析。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;扩展的列表解析语法&lt;/h2&gt;
&lt;p&gt;实际上，列表解析可以有更高级的应用。作为一个特别有用的扩展，表达式中嵌套的for循环可以有一个相关的if子句，来过滤那些测试不为真的结果项。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;script.py&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这条if子句检查从文件读取的每一行，看它的第一个字符是否是p；如果不是，从结果列表中省略改行。&lt;/p&gt;

&lt;p&gt;事实上，如果我们愿意的话，列表解析可以变得更加复杂——它们的完整语法允许任意数目的for子句，每个子句有一个可选的相关的if子句。&lt;/p&gt;

&lt;h1 id=&quot;python30&quot;&gt;Python3.0中的新的可迭代对象&lt;/h1&gt;
&lt;p&gt;Pyton3.0中的一个基本的改变是，它比Python2.x更强调迭代。除了与文件和字典这样的内置类型相关的迭代，字典方法keys、values和items都在Python3.0中返回可迭代对象。
返回一个可迭代对象而不是返回一个结果列表的好处在于节省了内存的空间。&lt;/p&gt;

&lt;h2 id=&quot;vs&quot;&gt;多个迭代器VS单个迭代器&lt;/h2&gt;
&lt;p&gt;多个迭代器:在它们的结果中能保持不同位置的多个迭代器
单个迭代器:只能保持一个迭代器，在遍历其结果之后，它们就用尽了。&lt;/p&gt;

&lt;p&gt;通常通过针对iter调用返回一个新的对象，来支持多个迭代器；单个迭代器一般意味着一个对象返回其自身。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;字典视图迭代器&lt;/h2&gt;
&lt;p&gt;在Python3.0中，字典的keys、values和items方法返回可迭代的视图对象，它们一次产生一个结果项，而不是在内存中一次产生全部结果列表。视图项保持和字典中的那些项相同的物理顺序，并且反映对底层的字典做出的修改。&lt;/p&gt;

&lt;p&gt;和所有迭代器一样，我们总可以通过把一个Python3.0字典视图传递到list内置函数中，从而强制构建一个真正的列表。然而，这通常不是必须的。&lt;/p&gt;

&lt;p&gt;此外，Python3.0字典仍然有自己的迭代器，它返回连续的键。因此，无需直接在此环境中调用keys:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——11.while和for循环</title>
   <link href="http://username.github.com/Python/2013/02/04/Learning-Python11"/>
   <updated>2013-02-04T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/04/Learning-Python11</id>
   <content type="html">&lt;h1 id=&quot;while&quot;&gt;while循环&lt;/h1&gt;

&lt;p&gt;while语句是Python语言中最通用的迭代结构，简而言之，只要顶端测试一直计算到真值，就会重复执行一个语句块。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一般格式&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;breakcontinuepasselse&quot;&gt;break,continue,pass和循环else&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;break&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;跳出最近所在的循环(跳过整个循环语句)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;continue&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;跳到最近所在循环的开头处(来到循环的首行)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;什么事也不做，只是空占位符语句。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;循环else块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;只有当前循环正常离开时才会执行(也就是没有碰到break语句)&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;一般循环格式&lt;/h2&gt;

&lt;p&gt;加入break和continue语句后，while的一般格式变为:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;pass&quot;&gt;pass&lt;/h2&gt;

&lt;p&gt;pass语句是无运算的占位符，当语法需要语句并且还没有任何实用的语句可写时，就可以使用它。&lt;/p&gt;

&lt;h2 id=&quot;else&quot;&gt;循环else&lt;/h2&gt;

&lt;p&gt;在while语句中加入else和C/C++中的语法不太一样，这里详细说明一下。else后面的代码只有当循环正常结束时才会执行，如果是用break跳出循环的，这部分代码就不会运行，具体看一个求质数的例子:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;has factor&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;is prime&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;再看一个对比的例子，没有使用else的情况:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Ni&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;True&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用else后的情况:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Ni&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;not found&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;for&quot;&gt;for循环&lt;/h1&gt;

&lt;p&gt;for循环在Python中是一个通用的序列迭代器:可以遍历任何有序的序列对象内元素。for语句可以用于字符串、列表、元组、其他内置可迭代对象。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;一般格式&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;此处的else的作用和while语句中的一样。另外需要注意的是，当Python运行for循环时，会逐个将序列对象中的元素赋值给目标，然后为每个元素执行循环体。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;编写循环的技巧&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;内置&lt;strong&gt;range&lt;/strong&gt;函数:返回一系列连续增加的整数，可作为for中的索引&lt;/li&gt;
  &lt;li&gt;内置&lt;strong&gt;zip&lt;/strong&gt;函数:返回并行元素的元组的列表，可用于在for中遍历数个数列&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whilerange&quot;&gt;循环计数器:while和range&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;range&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当range函数只有一个参数时，会返回从零算起的整数列表，但其中不包括该参数的值。如果传进两个参数，那第一个参数是上边界，第二个参数是下边界。如果传进三个参数时，第三个参数表示步进值。&lt;/p&gt;

&lt;p&gt;range提供了一种简单的方法，重复特定次数的动作:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Pythons&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;相应的C++代码则是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;zipmap&quot;&gt;并行遍历:zip和map&lt;/h2&gt;

&lt;p&gt;zip会取得一个或多个序列为参数，然后返回元组的列表，将这些序列中的并排的元素配成对。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的执行结果是:[(1,5),(2,6),(3,7),(4,8)]&lt;/p&gt;

&lt;p&gt;当参数的长度不同时，zip会以最短序列的长度为准来截断所得到的元组。&lt;/p&gt;

&lt;p&gt;使用zip构造字典:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;totast&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;enumerate&quot;&gt;产生偏移和元素:enumerate&lt;/h2&gt;

&lt;p&gt;enumerate函数一个比较新的内置函数，它能同时返回元素值和偏移值:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;appears at offset&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——10.if测试和语法规则</title>
   <link href="http://username.github.com/Python/2013/02/03/Learning-Python10"/>
   <updated>2013-02-03T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/03/Learning-Python10</id>
   <content type="html">&lt;h1 id=&quot;if&quot;&gt;if语句&lt;/h1&gt;

&lt;h2 id=&quot;section&quot;&gt;通用格式&lt;/h2&gt;

&lt;p&gt;if语句一般形式如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;statements3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外需要注意的是，Python中是没有&lt;code&gt;switch/case&lt;/code&gt;语句的&lt;/p&gt;

&lt;h1 id=&quot;python&quot;&gt;Python语法规则&lt;/h1&gt;

&lt;p&gt;Python的语法特性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;语句是逐个运行的。&lt;/li&gt;
  &lt;li&gt;块和语句的边界会自动检测&lt;/li&gt;
  &lt;li&gt;复合语句=首行+&amp;rdquo;:&amp;rdquo;+缩进语句&lt;/li&gt;
  &lt;li&gt;空白行、空格以及注释通常都会忽略&lt;/li&gt;
  &lt;li&gt;文档字符串(docstring)会忽略，但会保存并由工具显示&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;代码分隔符&lt;/h2&gt;

&lt;p&gt;Python会自动以行缩进检测块的边界，也就是程序代码左侧的空白空间。缩进至右侧相同距离的所有语句属于同一块的代码，换句话说，块内的语句会垂直对齐，就好像在一栏之内。更深层的嵌套块就是比所在块进一步向右缩进&lt;/p&gt;

&lt;p&gt;缩进的时候，可以使用空格也可以使用制表符，Python不在乎你怎么缩进，只在乎缩进是否一致。
不过，最好的是使用空格进行缩进，因为一个制表符在不同的编辑器中呈现的效果是不同的，其次也最好不要使用制表符和空格符混合使用&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;语句的分隔符&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;如果使用语法括号对，语句就可以横跨数行&lt;/li&gt;
  &lt;li&gt;如果语句以反斜杠结尾，就可横跨数行&lt;/li&gt;
  &lt;li&gt;字符串常量有特殊规则&lt;/li&gt;
  &lt;li&gt;其他规则&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-3&quot;&gt;真值测试&lt;/h1&gt;

&lt;p&gt;在Python中:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任何非零数字或非空对象都为真&lt;/li&gt;
  &lt;li&gt;数字零、空对象以及特殊对象None都被认作是假&lt;/li&gt;
  &lt;li&gt;比较和相等测试会递归地应用在数据结构中&lt;/li&gt;
  &lt;li&gt;比较和相等测试会返回True或False(1和0的特殊版本)&lt;/li&gt;
  &lt;li&gt;布尔and和or运算会返回真或假的操作对象&lt;/li&gt;
  &lt;li&gt;Python中的and、or运算都是短路运算&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——9.赋值、表达式和打印</title>
   <link href="http://username.github.com/Python/2013/02/02/Learning-Python9"/>
   <updated>2013-02-02T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/02/Learning-Python9</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;赋值语句&lt;/h1&gt;

&lt;p&gt;赋值语句的特性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;赋值语句建立对象的引用&lt;/li&gt;
  &lt;li&gt;变量名在首次赋值时会被创建&lt;/li&gt;
  &lt;li&gt;变量名在引用前必须先赋值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python赋值语句形式:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;运算&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam = &amp;lsquo;Spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基本形式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam,ham=&amp;rsquo;yum&amp;rsquo;,&amp;rsquo;YUM&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组赋值运算(位置性)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[spam,ham]=[&amp;lsquo;yum&amp;rsquo;,&amp;rsquo;YUM&amp;rsquo;]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表赋值运算(位置性)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a,b,c,d=&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列赋值运算，通用性&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;a,*b =&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展的序列解包(Python3.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spam=ham=&amp;rsquo;lunch&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;多目标赋值运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;spams += 42&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;增强赋值运算(相当于spams=spams+42)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中有几点需要说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第三行和第二行的赋值结果是一样的，spam绑定到&amp;rsquo;yum&amp;rsquo;,ham绑定到&amp;rsquo;YUM&amp;rsquo;,在Python中，这叫做分解赋值&lt;/li&gt;
  &lt;li&gt;第四行的赋值结果是:a赋值为&amp;rsquo;s&amp;rsquo;,b赋值为&amp;rsquo;p&amp;rsquo;,c赋值为&amp;rsquo;a&amp;rsquo;,d赋值为&amp;rsquo;m&amp;rsquo;&lt;/li&gt;
  &lt;li&gt;第五行，用右边的字符串的第一个字母来匹配a，用剩下的部分来匹配b:a赋值为&amp;rsquo;s&amp;rsquo;,b赋值为&amp;rsquo;pam&amp;rsquo;.这在Python称作扩展的解包。需要注意的是，带星号的变量总是返回的是一个列表，哪怕只有一个元素或没有元素&lt;/li&gt;
  &lt;li&gt;最后一行的用法和C/C++等其他语言中的语法和意义都是一样的，需要说明的是，在Python中，每个二元表达式运算符都有增强赋值语句&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;赋值语句执行时，Python会建立临时的元组，来存储右侧变量原始的值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据上面最后一点的说明，在Python中可以实现不用第三个变量就能交换两个变量的值:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;多目标赋值语句&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;多目标赋值以及共享引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用多目标赋值时，需要注意的是，这些变量都是指向同一个对象的。这对于不可变的类型来说，没什么问题，但是对于原处可变的类型来说，需要特别注意了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码执行后，a和b都是[42]&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;增强赋值语句&lt;/h2&gt;

&lt;p&gt;Python支持一下的增强语句:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;X+=Y&lt;/td&gt;
      &lt;td&gt;X&amp;amp;=Y&lt;/td&gt;
      &lt;td&gt;X-=Y&lt;/td&gt;
      &lt;td&gt;X|=Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X*=Y&lt;/td&gt;
      &lt;td&gt;X^=Y&lt;/td&gt;
      &lt;td&gt;X/=Y&lt;/td&gt;
      &lt;td&gt;X&amp;raquo;=Y&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X%=Y&lt;/td&gt;
      &lt;td&gt;X&amp;laquo;=Y&lt;/td&gt;
      &lt;td&gt;X**=Y&lt;/td&gt;
      &lt;td&gt;X//=Y&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;在Python中使用了优化技术，增强赋值语句会在底层实现时比较高效&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;另外需要注意的是，在使用增强赋值语句时，对于可变变量来说是原处修改的，需要特别注意！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;变量命名规则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;语法:(下划线或字母)+(任意数目的字母、数字或下划线)&lt;/li&gt;
  &lt;li&gt;区分大小写&lt;/li&gt;
  &lt;li&gt;禁止使用保留字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python3.0中的保留字:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;class&lt;/td&gt;
      &lt;td&gt;finally&lt;/td&gt;
      &lt;td&gt;is&lt;/td&gt;
      &lt;td&gt;return&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;continue&lt;/td&gt;
      &lt;td&gt;for&lt;/td&gt;
      &lt;td&gt;lamdba&lt;/td&gt;
      &lt;td&gt;try&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;def&lt;/td&gt;
      &lt;td&gt;from&lt;/td&gt;
      &lt;td&gt;nonlocal&lt;/td&gt;
      &lt;td&gt;while&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;and&lt;/td&gt;
      &lt;td&gt;del&lt;/td&gt;
      &lt;td&gt;global&lt;/td&gt;
      &lt;td&gt;not&lt;/td&gt;
      &lt;td&gt;with&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;as&lt;/td&gt;
      &lt;td&gt;elif&lt;/td&gt;
      &lt;td&gt;if&lt;/td&gt;
      &lt;td&gt;or&lt;/td&gt;
      &lt;td&gt;yield&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;assert&lt;/td&gt;
      &lt;td&gt;else&lt;/td&gt;
      &lt;td&gt;import&lt;/td&gt;
      &lt;td&gt;pass&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;break&lt;/td&gt;
      &lt;td&gt;except&lt;/td&gt;
      &lt;td&gt;in&lt;/td&gt;
      &lt;td&gt;raise&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;命名惯例&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以单一下划线开头的变量名(_X)不会被from module import *语句导入&lt;/li&gt;
  &lt;li&gt;前后有下划线的变量名(&lt;em&gt;X&lt;/em&gt;)是系统定义的变量名，对解释器有特殊意义&lt;/li&gt;
  &lt;li&gt;以两下划线开头、但结尾没有两个下划线的变量名(__X)是类的本地(&amp;ldquo;压缩&amp;rdquo;)变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-4&quot;&gt;打印操作&lt;/h1&gt;

&lt;p&gt;在Python中，print语句可以实现打印:只是对程序员友好的标准输出流的接口而已
标准输出流、标准输入流、错误流是脚本启动时所创建的3中数据连接中的一种。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Python3.X中，打印是一个内置函数，用关键字参数来表示特定模式&lt;/li&gt;
  &lt;li&gt;在Python2.X中，打印是语句，拥有自己的特定语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python30print&quot;&gt;Python3.0中的print函数&lt;/h2&gt;

&lt;p&gt;print函数不会返回任何值，从技术上讲，它将返回None。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;调用格式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从语法上讲，Python3.0中的print函数有如下的形式。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上述表达式中，方括号中的项是可选的，并且可能会在一个给定的调用中省略，并且=后面的值都给出了参数的默认值。这个内置的函数吧字符串sep所分割开的一个或多个对象的文本表示，后面跟着字符串and，都打印到流file中。&lt;/p&gt;

&lt;p&gt;这些参数是这样控制print操作的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sep是在每个对象的文本之间插入的一个字符串，如果没有传递的话，它默认地是一个单个空格；传递一个空字符串将会抑制分隔符&lt;/li&gt;
  &lt;li&gt;end是添加在打印文本末尾的一个字符串，如果没有传递的话，它默认的是一个\n换行字符。传递一个空字符将会避免在打印的文本的末尾移动到下一个输入行——下一个print将会保持添加到当前输出行的末尾。&lt;/li&gt;
  &lt;li&gt;file指定了文本将要发送到的文件、标准流或者其他类似文件的对象；如果没有传递的话，默认的是sys.stdout。带有一个类似文件的write(string)的方法的任何对象都可以传递，但真正的文件应该已经为了输出而打开。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;打印流重定向&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python3&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;log.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面的代码就简单的标准输出流重定向到了文本文件中，而且是以追加的模式。其实，甚至可以将sys.stdout重设为非文件对象，只要该对象有预期的协议(write方法)。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——8.Python语句简介</title>
   <link href="http://username.github.com/Python/2013/02/01/Learning-Python8"/>
   <updated>2013-02-01T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/02/01/Learning-Python8</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;重访Python程序结构&lt;/h1&gt;

&lt;p&gt;概念层次:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程序由模块构成&lt;/li&gt;
  &lt;li&gt;模块包含语句&lt;/li&gt;
  &lt;li&gt;语句包含表达式&lt;/li&gt;
  &lt;li&gt;表达式建立并处理对象&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;python-1&quot;&gt;Python的语句&lt;/h1&gt;

&lt;p&gt;Python语句&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;语句&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;角色&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;赋值&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建引用值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;执行函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;打印调用&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;打印对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;if/elif/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;选择动作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列迭代&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;while/else&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;一般循环&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;pass&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;空占位符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;break&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;循环推出&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;continue&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;循环继续&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;def&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数和方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;return&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数结果&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;yield&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成器函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;global&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;命名空间&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nonlocal&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;命名空间(Pyton3.0)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;import&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;模块访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;from&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;属性访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;class&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建对象&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;try/except/finally&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;捕捉异常&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;raise&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;触发异常&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;assert&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调试检查&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;with/as&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;环境管理器(2.6)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;del&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;删除引用&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;相关说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从技术上讲，print在Python3.0中不是一个保留字，也不是一条语句，而是一个内置函数调用，由于它几乎总是作为一条表达式语句运行，通常将其看做是一条语句类型。&lt;/li&gt;
  &lt;li&gt;yield实际上是一个表达式，而不是一条语句，也是一个保留字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意事项:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Python2.6中，nonlocal不可用&lt;/li&gt;
  &lt;li&gt;在Python2.6中,print是一条语句，而不是一个内置函数调用&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——7.元组、文件及其他</title>
   <link href="http://username.github.com/Python/2013/01/31/Learning-Python7"/>
   <updated>2013-01-31T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/31/Learning-Python7</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;元组&lt;/h1&gt;

&lt;p&gt;元组由简单的对象构成。元组与列表非常类似，只不过元组不能再原处修改(它们是不可变的)，通常是写成圆括号(而不是方括号)中一系列项。它的属性有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任意对象的有序集合&lt;/li&gt;
  &lt;li&gt;通过偏移存取&lt;/li&gt;
  &lt;li&gt;属于不可变序列类型&lt;/li&gt;
  &lt;li&gt;固定长度、异构、任意嵌套&lt;/li&gt;
  &lt;li&gt;对象引用的数组&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;实际应用中的元组&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;元组的特殊语法:逗号和圆括号&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为圆括号也可以把表达式括起来，如果圆括号里的单一对象时元组对象而不是一个简单的表达式，需要对Python进行特别说明。如果确实想得到一个元组，只要在这一单个元素之后、关闭圆括号之前加上一个逗号就可以了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，第一行的x是一个整数，第二行的y则是一个包含了一个元素40的元组。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;转换、方法以及不可变性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;元组的操作和字符串及列表是一致的，值得注意的区别在于&amp;rdquo;+&amp;rdquo;、&amp;rdquo;*&amp;ldquo;以及分片操作应用于元组时将返回新元组，并且元组不提供字符串、列表和字典中的方法。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;为什么有了列表还要元组&lt;/h2&gt;

&lt;p&gt;元组的不可变性提供了某种完整性，这样你可以确保元组在程序中不会被另一个引用修改，而列表就没有这样的保证了。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;文件&lt;/h1&gt;

&lt;p&gt;内置open函数后创建一个Python文件对象，可以作为计算机上的一个文件链接。在调用open之后，你可以通过调用返回的文件对象的方法来读写相关外部文件。&lt;/p&gt;

&lt;p&gt;常见文件运算&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(r&amp;rsquo;C:\spam&amp;rsquo;,&amp;rsquo;w&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建输出文件(&amp;lsquo;w&amp;rsquo;指写入)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(&amp;lsquo;data&amp;rsquo;,&amp;rsquo;r&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;创建只读文件(&amp;lsquo;r&amp;rsquo;值只读)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output=open(&amp;lsquo;data&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与上一行相同(&amp;lsquo;r&amp;rsquo;是默认值)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=intput.read()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把整个文件读进单一字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=intput.read(N)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取之后的N个字节(一或多个)到一个字符串中&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aString=input.readline()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取下一行(包括行末标识符)到一个字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;aList=input.readlines()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;读取整个文件到字符串列表&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.write(aString)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;写入字节字符串到文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.writelines(alist)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把列表内所有字符串写入文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.close()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;手动关闭(当文件收集完成时会替你关闭文件)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;output.flush()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;把输出缓冲区刷到硬盘中，但不关闭文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;anyFile.seek(N)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;修改文件位置到偏移量N处，以便进行下一个操作&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for line in open(&amp;lsquo;data&amp;rsquo;):use line&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件迭代器一行一行地读取&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;open(&amp;lsquo;f.txt&amp;rsquo;,encoding=&amp;rsquo;latin-1&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0 Unicode文本文件(str字符串)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;open(&amp;lsquo;f.bin&amp;rsquo;,&amp;rsquo;rb&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0 二进制byte文件(bytes字符串)　　　&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-4&quot;&gt;打开文件&lt;/h2&gt;

&lt;p&gt;为了打开一个文件，程序会调用内置open函数，首先是外部文件名，接着是处理模式。模式使用字符串&amp;rsquo;r&amp;rsquo;代表以只读方式打开文件(默认值)，&amp;rsquo;w&amp;rsquo;代表以写的方式打开文件，&amp;rsquo;a&amp;rsquo;代表追加模式。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;使用文件&lt;/h2&gt;

&lt;p&gt;一旦存在一个文件对象，就可以调用其方法来读写相关的外部文件。不管在任何情况下，Python程序中的文本文件都采用字符串的形式，读取文件时会返回字符串形式的文本。&lt;/p&gt;

&lt;p&gt;上面表格中的方法是子常用的读写方法，如下是一些基础用法的提示:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文件迭代器是最好的读取行的工具&lt;/li&gt;
  &lt;li&gt;内容是字符串，不是对象
当你把数据写入文件时，Python不会自动把对象转换为字符串，你必须传递一个已经格式化的字符串。&lt;/li&gt;
  &lt;li&gt;close是通常选项&lt;/li&gt;
  &lt;li&gt;文件是缓冲的并且是可查找的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;实际应用中的文件&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;用pickle存储Python的原生对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pickle模块是能够让我们直接在文件中存储几乎任何Python对象的高级工具，也并不要求我们把字符串转换来转换去，它就像是超集通用的数据格式化和解析工具。&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;重访类型分类&lt;/h1&gt;

&lt;p&gt;关于对象类型，有以下的一些药店需要记住:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对象根据分类共享操作；&lt;/li&gt;
  &lt;li&gt;只有可变对象(列表、字典和集合)可以原处修改，我们不能原处修改数字、字符串或元组&lt;/li&gt;
  &lt;li&gt;数字类型包括了:整数、浮点数、复数、小数和分数&lt;/li&gt;
  &lt;li&gt;集合类似于一个无值的字典的键，但是，它们不能映射为值，并且没有顺序；因此，集合不是一个映射类型或者一个序列类型，frozenset是集合的一个不可变的版本&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;对象类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;分类&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;是否可变&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数字&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数值&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对应&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;扩展&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Sets&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;frozenset&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;否&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;bytearray(3.0)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;序列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;是&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;vs-&quot;&gt;引用 VS 拷贝&lt;/h1&gt;

&lt;p&gt;引用的一大优点是:你可以在程序范围内任何地方传递大型对象而不必途中产生拷贝。&lt;/p&gt;

&lt;p&gt;如果确实需要拷贝，有如下的方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;没有限制条件的分片表达式(L[:])能够复制序列&lt;/li&gt;
  &lt;li&gt;字典copy方法(X.copy())能够复制字典&lt;/li&gt;
  &lt;li&gt;有些内置函数(例如:list)能够生成拷贝(list(L))&lt;/li&gt;
  &lt;li&gt;copy标准库模块能够生成完整拷贝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于拷贝还需要注意的是:无条件值的分片以及字典copy方法只能做顶层复制。也就是说，不能够复制嵌套的数据结构。如果需要一个深层嵌套的数据结构的完整的、完全独立的拷贝，那么就要使用标准的copy模块，包括&lt;code&gt;import copy&lt;/code&gt;语句，并进行这样的拷贝:&lt;code&gt;x = copy.deepcopy(Y)&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;比较、相等性和真值&lt;/h1&gt;

&lt;p&gt;所有的Python对象也可以支持比较操作，测试相等性、相对大小等.Python的比较总是检查复合对象的所有部分，直到可以得出结果为止。事实上，当嵌套对象存在时，Python能够自动遍历数据结构，并从左到右递归地应用比较，要多深就走多深。过程中首次发现的差值将决定比较的结果。
有两种方式可以测试相等性:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&amp;rdquo;==&amp;rdquo;操作符测试值的相等性。Python运行相等测试&lt;/li&gt;
  &lt;li&gt;&amp;ldquo;is&amp;rdquo;表达式测试对象的一致性。Python测试二者是否是同一个对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般来说，Python中不同的类型的比较方法如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字通过相对大小进行比较&lt;/li&gt;
  &lt;li&gt;字符串按照字典顺序，一个字符接一个字符地对比进行比较(&amp;ldquo;abc&amp;rdquo;&amp;lt;&amp;rdquo;ac&amp;rdquo;)&lt;/li&gt;
  &lt;li&gt;列表和元组从左到右对每部分进行比较&lt;/li&gt;
  &lt;li&gt;字典通过排序之后的(键、值)列表进行比较。&lt;/li&gt;
  &lt;li&gt;数字混合类型比较在Python3.0中是错误的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python中真和假的含义&lt;/h2&gt;

&lt;p&gt;在Python中，整数0代表假，整数1代表真。&lt;/p&gt;

&lt;p&gt;除此之外，Python也把任意的空数据结构视为假，把任何非空数据结构视为真。真和假的概念是Python中每个对象的固有属性:每个对象不是真就是假:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字如果非零，则为真 &lt;/li&gt;
  &lt;li&gt;其他对象如果非空，则为真&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;None对象&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Python还有一个特殊的对象:None，总被认为是假，一般都是起到一个空的占位作用&lt;/p&gt;

&lt;h2 id=&quot;type&quot;&gt;Type对象&lt;/h2&gt;

&lt;p&gt;事实上，即使是类型本身在Python中也是对象类型&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——6.列表与字典</title>
   <link href="http://username.github.com/Python/2013/01/30/Learning-Python6"/>
   <updated>2013-01-30T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/30/Learning-Python6</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;列表&lt;/h1&gt;

&lt;p&gt;列表是Python中最具灵活性的有序集合对象类型。与字符串不同的是，列表可以包含任何类型的对象:数字、字符串甚至其他列表。列表是可变对象，它支持原地修改的操作。&lt;/p&gt;

&lt;p&gt;Python的列表是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;任意对象的有序集合&lt;/li&gt;
  &lt;li&gt;通过偏移读取&lt;/li&gt;
  &lt;li&gt;可变长度、异构以及任意嵌套&lt;/li&gt;
  &lt;li&gt;属于可变序列的分类&lt;/li&gt;
  &lt;li&gt;对象引用数组(列表中的存储的是对象的引用，而不是对象的拷贝)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;实际应用中的列表&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;基本列表操作&lt;/h2&gt;

&lt;p&gt;由于列表是序列，它支持很多与字符串相同的操作。列表对&amp;rdquo;+&amp;rdquo;和&amp;rdquo;*&amp;ldquo;操作的响应与字符串很相似，两个操作的意思也是合并和重复，只不过是一个新的列表，而不是一个字符串。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;索引、分片和矩阵&lt;/h2&gt;

&lt;p&gt;对于列表而言，索引和分片操作与字符串中的操作基本相同。然而对列表进行索引的结果就是你指定的偏移处的对象(不管是什么类型)，而对列表分片时往往返回一个新的列表。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码定义了一个3*3的二维矩阵。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;原处修改列表&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引与分片的赋值&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当使用列表的时候，可以将它赋值给一个特定项(偏移)或整个片段(分片)来改变它的内容，索引和分片的赋值都是原地修改，它们对列表进行直接修改，而不是生成一个新的列表作为结果.Python中的索引赋值与C及大多数其他语言极为相似——Python用一个新值取代指定偏移的对象引用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;列表方法的调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最常用的列表方法是append，它能够简单地将一个单项(对象引用)加至列表末端。与合并不同的是，append允许传入单一对象而不是列表。L.append(X)与L+[X]的结果类似，不同的是，前者会原地修改L，而后者会生成新的列表。
另一个比较常用的方法就是sort，它原地对列表进行排序。sort是使用Python标准的比较检验作为默认值(在这里指字符串比较)，而且以递增的顺序进行排序。另外，我们可以通过传入一个关键字参数来修改排序行为——这是指定按名称传递的函数调用中特殊的&amp;rdquo;name=value&amp;rdquo;语言。&lt;/p&gt;

&lt;p&gt;需要注意的是:要当心append和sort是原地修改列表对象的，方法的返回结果并没有返回列表(从技术上讲，两者的返回值都是None)。如果编写类似&lt;code&gt;L=L.append(X)&lt;/code&gt;的语句，将不会得到修改后的值(实际上，会失去整个列表的引用)。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;reverse:原地反转列表&lt;/li&gt;
  &lt;li&gt;extend:在末端插入多个元素&lt;/li&gt;
  &lt;li&gt;pop:删除最后一个元素，同时返回被删除的值&lt;/li&gt;
  &lt;li&gt;remove:通过值删除某个元素&lt;/li&gt;
  &lt;li&gt;insert:在偏移处插入某个元素&lt;/li&gt;
  &lt;li&gt;index:查找某元素的偏移&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-5&quot;&gt;字典&lt;/h1&gt;

&lt;p&gt;如果把列表看做是有序的对象集合，那么就可以把字典当成是无序的集合，它们主要的差别就在于:字典当中的元素师通过键来存取的，而不是通过偏移存取。
Python字典的主要属性如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;通过键而不是偏移来读取&lt;/li&gt;
  &lt;li&gt;任意对象的无序集合&lt;/li&gt;
  &lt;li&gt;可变长、异构、任意嵌套&lt;/li&gt;
  &lt;li&gt;属于可变映射类型&lt;/li&gt;
  &lt;li&gt;对象引用表(散列表)(字典中的存储的是对象的引用，而不是对象的拷贝)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-6&quot;&gt;实际应用中的字典&lt;/h1&gt;

&lt;h2 id=&quot;section-7&quot;&gt;原处修改字典&lt;/h2&gt;

&lt;p&gt;与列表相同，向字典中已存在的索引值赋值会改变与索引相关联的值。然而，与列表不同的是，每当对新字典键进行赋值(之前没有被赋值的键)，就会在字典内生成一个新的元素。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;其他字典的方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;keys:返回字典的键列表&lt;/li&gt;
  &lt;li&gt;values:返回字典的值列表&lt;/li&gt;
  &lt;li&gt;items:返回字典的(key,value)对元组&lt;/li&gt;
  &lt;li&gt;update:合并&lt;/li&gt;
  &lt;li&gt;pop:从字典中删除一个键并返回它的值&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-9&quot;&gt;字典用法注意事项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;序列运算无效&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;对新索引赋值会添加项&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;键不一定总是字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;创建字典的其他方法&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#Method1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#Method4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上四种形式都会建立相同的字典。&lt;/p&gt;

&lt;h2 id=&quot;python30&quot;&gt;Python3.0中的字典变化&lt;/h2&gt;

&lt;p&gt;字典的功能在Python3.0中已经有所变化了，具体来说，Python3.0中的字典:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;支持一种新的字典解析表达式，这是列表和集合解析的&amp;rdquo;近亲&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;对于D.key,D.values和D.items方法，返回可迭代的视图，而不是列表&lt;/li&gt;
  &lt;li&gt;由于前面一点，需要新的编码方式通过排序键来遍历&lt;/li&gt;
  &lt;li&gt;不再直接支持相对大小比较——取而代之的是手动比较&lt;/li&gt;
  &lt;li&gt;不再有D.has_key方法——相反，使用in成员关系测试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;字典视图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在Python3.0中，字典的keys、values和items都返回视图对象，而在Python2.6中，它们返回实际的结果列表。Python3.0中的字典视图并非创建后不能改变，它们可以动态地反映在视图对象创建之后对字典做出点修改:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码中，最后一行的结果是[&amp;lsquo;a&amp;rsquo;,&amp;rsquo;c&amp;rsquo;]。&lt;/p&gt;

&lt;p&gt;keys方法所返回的对象类似于集合，并且支持交集和并集等常见的操作；values视图不是这样，因为它们不是唯一的；但items结果是的，如果(key,value)对是唯一的并且可散列的话。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——5.字符串</title>
   <link href="http://username.github.com/Python/2013/01/29/Learning-Python5"/>
   <updated>2013-01-29T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/29/Learning-Python5</id>
   <content type="html">&lt;p&gt;Python字符串——一个有序的字符的集合。
Python的字符串被划分为不可变序列，意味着它们不可以在原处修改。
常见的字符串常量和表达式。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;操作&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;解释&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rsquo;&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;空字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rdquo;spam&amp;rsquo;s&amp;rdquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;双引号和单引号相同&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rsquo;s\np\ta\x00m&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;转义序列&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=&amp;rdquo;&amp;rdquo;&amp;rdquo;&amp;hellip;&amp;rdquo;&amp;rdquo;&amp;rdquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;三重引号字符串块&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=r&amp;rsquo;\temp\spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Raw字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=b&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0中的字节字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s=u&amp;rsquo;spam&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;仅在Python2.6中使用的Unicode字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s1+s2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;合并&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s * 3&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;重复&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s[i]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;索引&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s[i:j]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;分片&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;len(s)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;长度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;ldquo;a %s parrot&amp;rdquo; % kind&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串格式化表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;ldquo;a {0} parrot&amp;rdquo;.format(kind)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python2.6和Python3.0中的字符串格式化方法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.find(&amp;lsquo;pa&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串方法调用:搜索&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.rstrip()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;移除空格&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.replace(&amp;lsquo;pa&amp;rsquo;,&amp;rsquo;xx&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;替换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.split(&amp;lsquo;,&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;用展位符分隔&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.isdigit()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;内容测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.lower()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;短信息转换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.endswidth()&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;结束测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo;.join(strlist)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;插入分隔符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s.encode(&amp;lsquo;latin-1&amp;rsquo;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode编码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;for x in S:print(x)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;迭代&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo; in X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[c * 2 for c in S]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;map(ord,S)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;section&quot;&gt;字符串常量&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;单双引号字符串是一样的&lt;/h2&gt;

&lt;p&gt;在Python中，单引号和双引号字符是可以互换的
此外，Python自动在任意的表达式中合并相邻的字符串常量，尽管可以简单地在它们之间增加+操作符来明确地表示这是一个合并操作。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;用转义序列代表特殊字节&lt;/h2&gt;

&lt;p&gt;反斜杠用来引入特殊的字节编码——转义序列。
转义序列让我们能够在字符串中嵌入不容易通过键盘输入的字节。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;转义&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\newline&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;忽视(连续)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;反斜杠(保留)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;'&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;单引号(保留&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&quot;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;双引号(保留&amp;rdquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\a&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;响铃&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\b&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;倒退&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;换页&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;新行(换行)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\r&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;返回&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\t&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;水平制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\v&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;垂直制表符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\N{id}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode数据库ID&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\uhhhh&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode16位的十六进制值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\UHHHHHHHH&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Unicode32位的十六进制值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\xhh&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十六进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\ooo&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;八进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\0&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Null(不是字符串结尾)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\other&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不转义(保留)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;raw&quot;&gt;raw字符串抑制转义&lt;/h2&gt;

&lt;p&gt;如果字母r(大写或小写)出现在字符串的第一引号的前面，它将会关闭转移机制。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;三重引号编写多行字符串块&lt;/h2&gt;

&lt;p&gt;Python还有一种三重引号的字符串常量格式，有时称作块字符串。这个形式以三重引号开始(单引号双引号都可以)，并紧跟任意行数的文本，并且以开始时同样的三重引号结尾。&lt;/p&gt;

&lt;h1 id=&quot;section-4&quot;&gt;实际应用中的字符串&lt;/h1&gt;

&lt;h2 id=&quot;section-5&quot;&gt;索引和分片&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引(S[i])获取特定偏移的元素:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;第一个元素的偏移为0&lt;/li&gt;
  &lt;li&gt;负偏移索引意味着从最后或右边反向进行计数&lt;/li&gt;
  &lt;li&gt;S[0]获取了第一个元素&lt;/li&gt;
  &lt;li&gt;S[-2]获取了倒数第二个元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;分片(S[i:j])提取对应的部分作为一个序列:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;上边界并不包含在内&lt;/li&gt;
  &lt;li&gt;如果没有给出的话，分片的边界默认为0和序列的长度&lt;/li&gt;
  &lt;li&gt;S[1:3]获取了从偏移为1的元素，直到但不包括偏移为3的元素&lt;/li&gt;
  &lt;li&gt;S[1:]获取了从偏移为1直到末尾(偏移为序列长度)之间的元素&lt;/li&gt;
  &lt;li&gt;S[:3]获取了从偏移为0直到但是不包括偏移为3之间的元素&lt;/li&gt;
  &lt;li&gt;S[:-1]获取了从偏移为0直到但不包括最后一个元素之间的元素&lt;/li&gt;
  &lt;li&gt;S[:]获取了从偏移0到末位之间的所有元素，这有效地实现了顶层S拷贝&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;分片表达式，还可以有第三个索引参数，用作步长，完整形式的分片变成了:X[I:J:K],这表示:&lt;strong&gt;索引X对象中的元素，从偏移为I直到偏移为J-1，每隔K元素索引一次&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;字符串转换工具&lt;/h2&gt;

&lt;p&gt;int():将字符串转换为数字
str():将数字转换为字符串表达形式
float():将字符串转换为浮点数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串代码转换&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ord():将单个字符转换为对应的ASCII码
chr():获取ASCII码并将其转化为对应的字符&lt;/p&gt;

&lt;h1 id=&quot;section-7&quot;&gt;字符串方法&lt;/h1&gt;

&lt;p&gt;除了表达式运算符之外，字符串还提供了一系列的方法去实现更复杂的文本处理任务。方法就是与特定的对象相关联在一起的函数。从技术角度来讲，它们附属于对象的属性，而这些属性不过是些可调用的函数罢了。&lt;/p&gt;

&lt;p&gt;字符串是不可变的，所以不能在远处直接对其进行修改。为了在已存在字符串中创建新的文本值，我们可以通过分片和合并这样的操作来建立新的字符串。&lt;/p&gt;

&lt;h1 id=&quot;section-8&quot;&gt;字符串格式化表达式&lt;/h1&gt;

&lt;p&gt;如今的Python中的字符串格式化可以以两种形式实现:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串格式化表达式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是从Python诞生的时候就有的最初的技术；这是基于C语言的&amp;rdquo;printf&amp;rdquo;模型，并且在大多数现有的代码中使用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字符串格式化方法调用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这是Python2.6和Python3.0新增加的技术，这是Python独有的方法，并且和字符串格式化表达式的功能有很大重叠。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;That is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; bird!&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dead&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的结果就是:That is 1 dead bird!&lt;/p&gt;

&lt;p&gt;从技术上讲，字符串的格式化表达式往往是可选的——通常你可以使用多次的多字符串的合并和转换达到类似的目的。然后格式化允许我们将多个步骤合并为一个简单的操作，这一功能相当强大。&lt;/p&gt;

&lt;p&gt;需要注意的是:格式化总是会返回新的字符串作为结果，而不是对左侧的字符串进行修改。&lt;/p&gt;

&lt;p&gt;字符串格式化代码&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代码&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;意义　　　　　　　　　　　　&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;s&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串(或任何对象)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;r&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;s,但使用repr，而不是str&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;c&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;d&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十进制(整数)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;i&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;u&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;无号(整数)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;o&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;八进制数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;十六进制数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;X&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;x，但打印大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;e&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点指数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;E&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;e,但打印大写&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;f&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点十进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;F&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点十进制&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;g&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点e或f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;G&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点E或f&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;%&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;常量%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;事实上，在格式化字符串中，表达式左侧的转换目标支持多种转换操作，这些操作自由一套相当严谨的语法，转换目标的通用结构看上去是这样的:
&lt;code&gt;%[(name)][flags][width][.precision]typecode&lt;/code&gt;
有关格式化目标的语法在Python的标准手册中都有完整的介绍。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;基于字典的字符串格式化&lt;/h2&gt;

&lt;p&gt;字符串的格式化同时也允许左边的转换目标来引用右边字典中的键来提取对应的值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(n)d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%(x)s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;spam&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上代码的结果是:&amp;rsquo;1 spam&amp;rsquo;&lt;/p&gt;

&lt;h1 id=&quot;section-10&quot;&gt;字符串格式化调用方法&lt;/h1&gt;

&lt;h2 id=&quot;section-11&quot;&gt;基础知识&lt;/h2&gt;

&lt;p&gt;简而言之，Python2.6和Python3.0(及其以后的版本)中的新的字符串对象的format方法使用主体字符串作为模板，并且接受任意多个表示将要根据模板替换的值的参数。在主体字符串中，花括号通过为止或关键字指出替换目标及将要插入的参数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;{0},{1} and {2}&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;ham&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;eggs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码的结果是&amp;rsquo;spam,ham and eggs&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;添加键、属性和偏移量&lt;/h2&gt;

&lt;p&gt;格式化字符串可以指定对象属性和字典键，方括号指定字典键，而点表示位置或关键字所引用的一项对象属性。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;#39;My {1[spam] runs {0.platform}&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;spam&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;laptop&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上述代码运行的结果是:&amp;rsquo;My laptop runs win32&amp;rsquo;&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;添加具体格式化&lt;/h2&gt;

&lt;p&gt;格式化的语法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fieldname&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conversionflag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatspec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;fieldname是指定参数的一个数字或关键字，后面跟着可选的&amp;rdquo;.name&amp;rdquo;或[index]成分引用&lt;/li&gt;
  &lt;li&gt;conversionflag可以是r,s后者a分别是在该值上对repr、str或ascii内置函数的一次调用&lt;/li&gt;
  &lt;li&gt;formatspec指定了如何表示该值，包括字段宽度、对齐方式、补零、小数点精度等细节，并且以一个可选的数据类型编码结束&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更多细节可以查看Python的库手册。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;为什么要新的格式化方法&lt;/h2&gt;

&lt;p&gt;格式化方法相对于原来的字符串格式化表达式有以下几个特点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拥有%表达式所没有的一些额外功能&lt;/li&gt;
  &lt;li&gt;可以更加明确地进行替代值引用&lt;/li&gt;
  &lt;li&gt;考虑到操作符会有一个更容易记忆的方法名&lt;/li&gt;
  &lt;li&gt;不支持用于单个和多个替代之大小写的不同语法&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-15&quot;&gt;通常意义下的类型分类&lt;/h1&gt;

&lt;h2 id=&quot;section-16&quot;&gt;同样分类的类型共享其操作集合&lt;/h2&gt;

&lt;p&gt;在Python中有三个主要类型(以及操作)的分类:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数字(整数、浮点数、二进制、分数等)
支持加法和乘法&lt;/li&gt;
  &lt;li&gt;序列(字符串、列表、元组)
支持索引、分片和合并等&lt;/li&gt;
  &lt;li&gt;映射(字典)
支持通过键的索引等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;索引、分片以及其他的序列操作对于所有的序列来说都是同样有效的，对象的类型将会告诉Python去执行什么样的任务。&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;可变类型能够在原处修改&lt;/h2&gt;

&lt;p&gt;Python中的主要核心类型划分为如下两类:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不可变类型(数字、字符串、元组、不可变集合)
不可变的分类中没有哪个对象类型支持原处修改，尽管我们总是可以运行表达式来创建新的对象并将其结果分配给变量&lt;/li&gt;
  &lt;li&gt;可变类型(列表、字典、可变集合)
相反，可变的类型总是可以通过操作原处修改，而不用创建新的对象&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——4.动态类型简介</title>
   <link href="http://username.github.com/Python/2013/01/28/Learning-Python4"/>
   <updated>2013-01-28T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/28/Learning-Python4</id>
   <content type="html">&lt;h1 id=&quot;section&quot;&gt;缺少类型声明语句的情况&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;变量、对象和引用&lt;/h2&gt;
&lt;p&gt;在Python中，变量有如下的几个相关概念:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量创建
一个变量(也就是变量名)，就像a，当代吗第一次给它赋值时就创建了它。之后的赋值将会改变已创建的变量名的值。&lt;/li&gt;
  &lt;li&gt;变量类型
变量永远不会有任何的和它关联的类型信息或约束。类型的概念是存在于对象中而不是变量名中。变量原本就是通用的，它只是在一个特定的时间点，简单地引用了一个特定的对象而已。&lt;/li&gt;
  &lt;li&gt;变量使用
当变量出现在表达式中时，它会马上被当前引用的对象所代替，无论这个对象是什么类型。此外，所有的变量必须在其使用前明确地赋值，使用未赋值的变量会产生错误。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当执行到:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样的代码时，从概念上说，Python将会执行三个不同的步骤去完成这个请求。这些步骤反映了Python语言中所有赋值的操作:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建一个对象来代表值3&lt;/li&gt;
  &lt;li&gt;创建一个变量a，如果它还没有创建的话&lt;/li&gt;
  &lt;li&gt;将变量与新的对象3相连接&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从上面的三个步骤可以看出，变量和对象保存在内存中的不同部分，并通过连接相关联。变量总是连接到对象，并且绝不会连接到其他变量上，但是更大的对象可能连接到其他的对象。
在Python中从变量到对象的连接称作引用，也就是说，引用是一种关系，以内存中的指针的形式实现。一旦变量被使用，Python自动跟随这个变量到对象的连接。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类型属于对象，而不是变量名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用具体的术语来讲:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量是一个系统表的元素，拥有指向对象的连接的空间&lt;/li&gt;
  &lt;li&gt;对象是分配的一块内存，有足够的空间去表示它们所代表的值&lt;/li&gt;
  &lt;li&gt;引用是自动形成的从变量到对象的指针&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从技术上讲，一个对象是具有更复杂的结构的，每一个对象都有两个标准的头部信息:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个类型标识符去标识这个对象的类型&lt;/li&gt;
  &lt;li&gt;一个引用的计数器，用来决定是不是可以回收这个对象&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;对象的垃圾收集&lt;/h2&gt;

&lt;p&gt;在Python中，每当一个变量名被赋予一个新的对象，之前那个对象占用的空间就会被回收(如果它没有被其他的变量名或对象所引用的话)。这种自动回收对象空间的计数就做垃圾收集。
在Python内部，Python是这样实现这个功能的:它在每个对象中保持了一个计数器，计数器记录了当前指向该对象的引用的数目。一旦(并精确在同一时间)这个计数器被设置为0，这个对象的内存空间就会自动回收。&lt;/p&gt;

&lt;h1 id=&quot;section-3&quot;&gt;共享引用&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的实际效果就是变量a和变量b都引用了相同的对象(也就是说，指向了相同的内存)。这在Python中叫做共享引用——多个变量名引用了同一个对象。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的最终结果就是，a指向数据为5的内存空间，b指向数据为3的内存空间。事实上，是没有办法修改对象3的值的，之前就提到过，整数是不可变的，因此没有办法在远处修改。在Python中，变量总是一个指向对象的指针，而不是可改变的内存区域的标签:给一个变量赋一个新的值，并不是替换了原始的对象，而是让这个变量去引用完全不同的一个对象。实际的效果就是对一个变量赋值，仅仅会影响那个被赋值的变量。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;共享引用和在原处修改&lt;/h2&gt;

&lt;p&gt;但是事实上有一些对象和操作确实会在原处改变对象(例如列表)。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的结果是，L1指向一个值为24的对象，L2仍是引用最初的列表。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;L1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;上面代码的结果是，L1和L2同时引用了值为[24,3,4]的列表。
必须注意上两段代码的不同之处。&lt;/p&gt;

&lt;p&gt;如果不想发生以上的情况，那就需要Python拷贝对象，而不是创建引用。
有很多方法可以拷贝一个列表，最常用的方法就是从头到尾的分片。
但是，分片这种方法是不能应用在其他的可变的核心类型上(字典和集合，因为它们不是序列)，复制一个字典或集合应该使用X.copy()方法调用。在标准库中的copy模块有一个通用的复制任意对象类型的调用:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;copy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deepcopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中，可变的对象包括了列表、字典以及一些通过class语句定义的对象。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;共享引用和相等&lt;/h2&gt;

&lt;p&gt;通常来说，考虑到效率的问题，Python会缓存并复用了小的整数和小的字符串，例如如下的代码:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;shrubbery&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里的对象42也许并没有被马上回收，而是仍被存在一个系统表中，等待下一次你的代码生成另一个42来重复引用。尽管有这种机制，但是大部分对象都会在不再引用时马上回收。&lt;/p&gt;

&lt;p&gt;在Python中有两种&amp;rdquo;相等&amp;rdquo;:
==操作符:测试两个被引用的对象是否有相同的值
is操作符:检查对象的同一性，就是检查两个变量名是否是指向同一个对象&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——3.数字</title>
   <link href="http://username.github.com/Python/2013/01/27/Learning-Python3"/>
   <updated>2013-01-27T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/27/Learning-Python3</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;Python的数字类型&lt;/h1&gt;

&lt;p&gt;Python数字类型的完整工具包括:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整数和浮点数&lt;/li&gt;
  &lt;li&gt;复数&lt;/li&gt;
  &lt;li&gt;固定精度的十进制数&lt;/li&gt;
  &lt;li&gt;有理分数&lt;/li&gt;
  &lt;li&gt;集合&lt;/li&gt;
  &lt;li&gt;布尔类型&lt;/li&gt;
  &lt;li&gt;无穷的整数精度&lt;/li&gt;
  &lt;li&gt;各种数字内置函数和模块&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;数字常量&lt;/h2&gt;

&lt;p&gt;基本数字常量:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;数字&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;常量&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1234,-24,0,99999999999&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;整数(无穷大小)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.23,1.,3.14e-10,4E210,4.0e+210&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;浮点数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0177,0x9ff,0b101010&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python2.6中的八进制、十六进制、二进制常量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0o177,0x9ff,0b101010&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Python3.0中的八进制、十六进制、二进制常量&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3+4j,3.0+4.0j,3j&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;复数常量&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;内置数学工具和扩展&lt;/h2&gt;

&lt;p&gt;除了上述表格中的内置数字常量之外，Python还提供了一系列处理数字对象的工具:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;表达式操作符&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;+,-,*,/,&amp;raquo;,**,&amp;amp;等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;内置数学函数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;pow,abs,round,int,hex,bin等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;公用模块&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;random,math等&lt;/p&gt;

&lt;h2 id=&quot;python-1&quot;&gt;Python表达式操作符&lt;/h2&gt;

&lt;p&gt;Python表达式操作符及程序&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;操作符&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;yield x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成器函数发送协议&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lamdba args:expression&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;生成匿名函数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x if y else z&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;三元选择表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x or y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑或(只有x为假，才会计算y)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x and y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑与(只有x为真,才会计算y)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;not x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;逻辑非&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x in y,x not in y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;成员关系(可迭代对象、集合)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x is y,x is not y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;对象实体测试&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&amp;lt;y,x&amp;lt;=y,x&amp;gt;y,x&amp;gt;=y,x==y,x!=y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;大小比较，集合子集和超集相等性操作符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x | y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位或,集合并集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x ^ y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位异或，集合对称差&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x &amp;amp; y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;位与,集合交集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x &amp;laquo;&amp;nbsp;y,x&amp;nbsp;&amp;raquo; y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;左移或右移y位&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x + y,x -y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;加法/合并,减法,集合差集&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x * y,x % y,x / y,x // y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;乘法/重复,余数/格式化,除法:整除法或floor除法&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-x,+x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;一元减法，识别&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~x&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;按位求补(取反)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x ** y&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;幂运算&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x[i]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;索引(序列、映射及其他)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x[i:j:k]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;分片&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x(&amp;hellip;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用(函数、方法、类及其他可调用的)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x.attr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;属性引用&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;(&amp;hellip;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组，表达式，生成器表达式&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[&amp;hellip;]&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表，列表解析&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;{&amp;hellip;}&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典、集合、集合和字典解析&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;混合操作所遵循的操作优先级&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在上表中，表中的操作符越是靠后的优先级越高，因此在混合表达式中要更加小心&lt;/li&gt;
  &lt;li&gt;表中位于同一行的表达式在组合的时候通常从左到右组合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;括号分组的子表达式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果用括号将表达式各部分进行分组的话，就可以完全忽略优先级的事情。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;混合类型的自动升级&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在混合类型的表达式中，Python首先将被操作的对象转换成其中最复杂的操作对象的类型，然后再对相同类型的的操作对象进行数学运算。
Python是这样划分数字类型的复杂度的:整数比浮点数简单，浮点数比复数简单。
另外需要注意的是，这些混合类型转换仅仅在将数字类型混合到一个表达式中的时候才使用。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;在实际应用中的数字&lt;/h1&gt;

&lt;h2 id=&quot;section-3&quot;&gt;比较:一般的和连续的&lt;/h2&gt;

&lt;p&gt;Python允许把多个比较连续起来执行范围测试，例如:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Z&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#相当于 X &amp;lt; Y and Y &amp;lt; Z&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;floor&quot;&gt;除法:传统除法、Floor除法和真除法&lt;/h2&gt;

&lt;p&gt;X / Y:&lt;/p&gt;

&lt;p&gt;传统除法和真除法。在Python2.x中，这个操作对于整数会省去小数部分，对于浮点数会保持小数部分。在Python3.0中变成了真除法(无论任何类型都会保持小数部分)。&lt;/p&gt;

&lt;p&gt;X // Y:&lt;/p&gt;

&lt;p&gt;Floor除法。这个操作不考虑操作对象的类型，总会省略结果的小数部分，剩下最小的能整除的整数部分.针对整数返回一个整数，如果有任何一个操作数是浮点数，则返回一个浮点数。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;十六进制、八进制和二进制计数&lt;/h2&gt;

&lt;p&gt;Python提供了很多内置函数进行进制的转换:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;oct():将十进制数转换为八进制数&lt;/li&gt;
  &lt;li&gt;hex():将十进制数转换为十六进制数&lt;/li&gt;
  &lt;li&gt;bin():将十进制数转换为二进制数&lt;/li&gt;
  &lt;li&gt;int():将一个数字的字符串变换为一个整数，并且可以通过定义的第二个参数来确定按照哪个进制进行转换&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o37&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;#八进制数&lt;/span&gt;
&lt;span class=&quot;mh&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF&lt;/span&gt;            &lt;span class=&quot;c&quot;&gt;#十六进制&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b11111111&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;#二进制数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;位操作&lt;/h2&gt;

&lt;p&gt;Python支持像C语言中那样的位操作。&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;其他的内置数学工具&lt;/h2&gt;

&lt;p&gt;除了核心对象类型外，Python还支持用于数字处理的内置函数和内置模块。例如内置函数pow和abs，分别计算幂和绝对值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中有3中方法可以计算平方根:使用一个模块函数、一个表达式或一个内置函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#函数模块&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;	 &lt;span class=&quot;c&quot;&gt;#表达式&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;144&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;#内置函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外需要注意的是random模块，可以用来产生一个0和1之间的随机数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;choice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Life of Brian&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Holy Grail&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Meaning of Life&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-7&quot;&gt;其他数字类型&lt;/h1&gt;

&lt;h2 id=&quot;section-8&quot;&gt;小数数字&lt;/h2&gt;

&lt;p&gt;Python2.4开始引进了一个新的核心数据对象:小数对象。它比其他数据类型要复杂一些，小数是通过一个导入的模块调用函数后创建的，而不是通过运行常量表达式创建的。从功能上来说，小数对象就像浮点数，只不过它们有固定的位数和小数点，因此小数是有固定的精度的浮点值。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;0.3&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在上面的代码中，第一和第二行的结果都是5.5511151231257827e-17，因为与硬件相关的浮点数运算在精度方面有内在的缺陷,不过使用小数对象时，就能改正，最后一行的结果是Decimal(&amp;lsquo;0.0&amp;rsquo;)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;设置全局精度&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;decimal模块中的其他工具可以用来设置所有小数数值的精度、设置错误处理等。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;decimal&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getcontext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decimal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Decimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;以上代码返回的结果是Decimal(&amp;lsquo;0.1429&amp;rsquo;)。
这对于处理货币应用程序非常有用。&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;分数类型&lt;/h2&gt;

&lt;p&gt;Python3.0引入了一个新的数字类型——分数，它实现了一个有理数对象。它明确地保留一个分子和一个分母，从而避免了浮点数学的某些不精确性和局限性。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;frations&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-10&quot;&gt;集合&lt;/h2&gt;
&lt;p&gt;这是一些唯一的、不可变的对象的一个无序集合(collection),这些操作支持与数学集合理论相对应的操作。可以把集合看成一个没有键的字典。
可以使用如下的方式创建一个集合。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;abcde&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但是要创建一个空的字典，必须使用内置函数set,因为{}代表的是一个空的字典。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;不可变限制和冻结集合&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;很大程度上由于其实现，集合只能包含不可变的对象类型。因此，列表和字典不能嵌入到集合中去。但是，如果需要存储复合值的话，元组是可以嵌入的。
集合本身也是不可变的，所以不能直接嵌入到其他集合中，如果需要在另一个集合中存储一个集合，可以像调用set一样来调用frozenset，但是，它创建一个不可变的集合，该集合不可修改并且可以嵌套到其他集合中。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;布尔型&lt;/h2&gt;

&lt;p&gt;True&amp;mdash;&amp;mdash;&amp;mdash;1
False&amp;mdash;&amp;mdash;&amp;mdash;0&lt;/p&gt;

&lt;h1 id=&quot;section-12&quot;&gt;数字扩展&lt;/h1&gt;

&lt;p&gt;尽管Python的核心数字类型提供的功能对于大多数应用程序已经够用了，还是有大量的第三方开源扩展可以用来解决更加专门的需求。
比如有一个叫做NumPy(Numeric Python)的Python扩展提供了高级的数字编工具，例如矩阵数据类型、向量处理和高级的计算库。像Los Alamos和NASA这样的核心科学编程组织，使用带有NumPy的Python来实现此前用C++、FORTRAN、Matlab编写的任务。Python和NumPy的组合往往可以比作是一款免费的、更加灵活的的Matlab。&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——2.介绍Python对象类型</title>
   <link href="http://username.github.com/Python/2013/01/26/Learning-Python2"/>
   <updated>2013-01-26T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/26/Learning-Python2</id>
   <content type="html">&lt;p&gt;Python程序可以分解成模块、语句、表达式以及对象:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;程序又模块构成&lt;/li&gt;
  &lt;li&gt;模块包含语句&lt;/li&gt;
  &lt;li&gt;语句包含表达式&lt;/li&gt;
  &lt;li&gt;表达式建立并处理对象&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section&quot;&gt;为什么使用内置类型&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;内置对象使程序更容易编写&lt;/li&gt;
  &lt;li&gt;内置对象时扩展的组件&lt;/li&gt;
  &lt;li&gt;内置对象往往比定制的数据结构更有效率&lt;/li&gt;
  &lt;li&gt;内置对象是语言标准的一部分&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;python&quot;&gt;Python的核心数据类型&lt;/h2&gt;

&lt;p&gt;在Python程序中处理的每一样东西都是一种对象，内置对象如下表所示:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;对象类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;例子 常量/创建&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;数字&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1234,3.1415,3+4j,Deciaml,Fraction&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字符串&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;lsquo;spam&amp;rsquo;,&amp;rdquo;guido&amp;rsquo;s&amp;rdquo;,b&amp;rsquo;a\xolc&amp;rsquo;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;列表&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;[1,[2,&amp;rsquo;three&amp;rsquo;],4]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;字典&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;{&amp;lsquo;food&amp;rsquo;:&amp;rsquo;spam&amp;rsquo;,&amp;rsquo;taste&amp;rsquo;:&amp;rsquo;yum&amp;rsquo;}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;元组&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(1,&amp;rsquo;spam&amp;rsquo;,4,&amp;rsquo;U&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;文件&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;myfile = open(&amp;lsquo;egg&amp;rsquo;,&amp;rsquo;r&amp;rsquo;)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;集合&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;set(&amp;lsquo;abc&amp;rsquo;),{&amp;lsquo;a&amp;rsquo;,&amp;rsquo;b&amp;rsquo;,&amp;rsquo;c&amp;rsquo;}&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;其他类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;类型、None、布尔型&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编程单元类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;函数、模块、类&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与实现相关的类型&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;编译的代码堆栈跟踪&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;像函数、模块和类这样的编程单元在Python中也是对象，它们由def、class、import和lamdba这样的语句和表达式创建，并且可以在脚本间自由地传递，存储在其他对象中。&lt;/p&gt;

&lt;p&gt;Python中没有类型声明，运行的表达式的语法决定了创建和使用的对象的类型。一旦创建了一个对象，它就和操作集合绑定了，例如只能对字符串进行字符串相关的操作。&lt;/p&gt;

&lt;p&gt;Python是动态类型的(&lt;strong&gt;它自动跟踪你的类型而不是要求声明代码&lt;/strong&gt;)，但是他也是强类型语言。(&lt;strong&gt;你只能对一个对象进行适合该类型的有效操作&lt;/strong&gt;)&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;数字&lt;/h1&gt;

&lt;p&gt;Python中的数字支持一般的数学运算，包括加法(+),乘法(*),除法(/),整除(//),取模(%),乘方(**)。&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;字符串&lt;/h1&gt;

&lt;p&gt;从严格意义上说，字符串是单个字符的字符串的序列，其他类型的序列还包括列表和元组。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;序列的操作&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;索引&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为序列，字符串支持针对各个元素位置顺序的操作。在Python中，索引是从0开始的，但是我们也可以反向索引，从最后一个开始，-1代表最后一个元素，-2代表倒数第二个元素，以此类推。比较好的记忆方法是:负的索引号简单地与字符串长度相加，就得到了正向的索引号。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分片&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;除了简单的从位置进行索引，序列也支持一种分片(slice)操作，这是一种一步就能够提取整个分片(slice)的方法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;它们的一般形式为X[I:J],表示&amp;rdquo;取出在X中从偏移量为I，直到但不包括偏移量为J的内容&amp;rdquo;，结果就是返回一个新的对象。
在一个分片中，左边界默认为0，并且右边界默认为分片序列的长度。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;合并&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为一个序列，字符串也支持使用加号进行合并(将两个字符串合并成为一个新的字符串)。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;不可变性&lt;/h2&gt;

&lt;p&gt;字符串在Python具有不可变性，&lt;strong&gt;也就是说在创建后不能就地改变&lt;/strong&gt;，但是你总是可以通过建立一个新的字符串并以同一个变量名对其进行赋值，因为Python在运行过程中会清理旧对象。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在Python中，每一个对象都可以分为不可变性或可变性，在核心类型中，数字、字符串和元组是不可变的，列表和字典是可变的。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;类型特定的方法&lt;/h2&gt;

&lt;p&gt;到目前为止讲到的操作都是Python中序列对象共有的，包括列表和元组。字符串也有一些自己特殊的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;find&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;字符串的find方法是一个基本的子字符串查找的操作。(它将返回一个传入子字符串的偏移量，或者没有找到的情况下返回-1)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;replace&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;replace方法将会对全局进行搜索和替换。&lt;/p&gt;

&lt;p&gt;这些字符串的方法都不会改变原来的字符串，只是会生成一个新的字符串对象作为返回对象。&lt;/p&gt;

&lt;p&gt;注意:尽管序列操作是通用的，但方法不通用(虽然某些类型共享某些方法名)。一条简明的法则是这样的:&lt;strong&gt;可作用于多种类型的通用型操作都是以内置函数或表达式的形式出现的[例如,len(X),X[0]]，但是类型特定的操作是以方法调用的形式出现的。[例如,aString.find(&amp;lsquo;x&amp;rsquo;)]&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;寻求帮助&lt;/h2&gt;

&lt;p&gt;想要查看对象详细的方法，可以调用内置的&lt;code&gt;dir&lt;/code&gt;函数，它将返回一个列表，其中包含了对象的所有属性。(对象属性包括方法)
&lt;code&gt;dir&lt;/code&gt;函数简单地给出了方法的名称，要查询它们是做什么的，你可以将其传递给&lt;code&gt;help&lt;/code&gt;函数。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Spam&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-7&quot;&gt;编写字符串的其他方法&lt;/h2&gt;

&lt;p&gt;在Python中，反斜线转义序列表示特殊的字符，Python允许字符串包括在单引号或双引号中。(它们代表着相同的东西)
Python也支持原始(raw)字符串常量，即去掉反斜线转义机制。&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;模式匹配&lt;/h2&gt;

&lt;p&gt;Python的字符串对象能够支持基于模式的文本处理，详细的内容后面介绍。&lt;/p&gt;

&lt;h1 id=&quot;section-9&quot;&gt;列表&lt;/h1&gt;

&lt;p&gt;Python的列表对象是这个语言提供的最通用的序列。列表是一个任意类型的对象的位置相关的有序集合，它没有固定的大小。&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;序列操作&lt;/h2&gt;

&lt;p&gt;由于列表是序列的一种，列表支持之前提到的所有序列操作,包括索引、切片等操作。&lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;类型特定的操作&lt;/h2&gt;

&lt;p&gt;Python的列表与其他语言中的数组有些类似，但要强大得多。其中一个方面就是，列表没有固定类型的约束，一个列表中的元素可以是各种不同的类型，其次列表是没有固定大小的，它能够按照需要自己增加或减少列表大小。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;append:扩充列表的大小并在列表的尾部插入一项&lt;/li&gt;
  &lt;li&gt;pop:移除给定偏移量的一项，从而让列表减小&lt;/li&gt;
  &lt;li&gt;insert:在任意位置插入元素&lt;/li&gt;
  &lt;li&gt;remove:按照值移除元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要注意的是，大多数列表的方法都会就地改变列表对象，而不是创建一个新的列表。&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;边界检查&lt;/h2&gt;

&lt;p&gt;尽管列表没有固定的大小，Python仍不允许引用不存在的元素，超出列表末尾之外的索引总是会导致错误。&lt;/p&gt;

&lt;h2 id=&quot;section-13&quot;&gt;嵌套&lt;/h2&gt;

&lt;p&gt;Python核心数据类型的一个优秀的特性就是它们支持任意的嵌套，能够以任意的组合对其进行嵌套，并可以多个层次进行嵌套。&lt;/p&gt;

&lt;h1 id=&quot;section-14&quot;&gt;字典&lt;/h1&gt;

&lt;p&gt;Python中的字典是完全不同的东西:它们不是序列，而是一种映射(mapping)。映射是一个其他对象的集合，但是它们是通过键而不是相对位置来存储的。实际上，映射并没有任何可靠的从左至右的顺序。它们简单地讲键映射到值。字典是Python核心对象集合中的唯一的一种映射类型，也具有可变性——可以就地改变，并可以随需求增大或减少，就像列表那样。&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;映射操作&lt;/h2&gt;

&lt;p&gt;作为常量编写时，字典编写在大括号中，并包含一系列的&amp;rdquo;键:值&amp;rdquo;对。通过键索引一个字典往往是Python中编写搜索的最快方法。
字典的索引操作使用的是和序列相同的语法，但是在方括号中的元素是键，而不是相对位置。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-16&quot;&gt;重访嵌套&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;first&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Bob&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
			 &lt;span class=&quot;s&quot;&gt;&amp;#39;job&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;dev&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;mgr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
			 &lt;span class=&quot;s&quot;&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;40.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如上面代码所示，Python的核心数据类型是非常灵活的，可以轻松的建立复杂的信息结构。&lt;/p&gt;

&lt;h2 id=&quot;for&quot;&gt;键的排序:for循环&lt;/h2&gt;

&lt;p&gt;之前说过，字典中是没有顺序的，全部都是以键来进行索引的，但是，如果确实需要强调顺序的时候，可以这样做:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;=&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;sorted是内置函数，sorted调用返回结果并对各种对象类型进行排序。&lt;/p&gt;

&lt;h2 id=&quot;if&quot;&gt;不存在的键:if测试&lt;/h2&gt;

&lt;p&gt;尽管我们能够通过给新的键赋值来扩展字典，但是获取一个不存在的键仍然是一个错误.可以利用in和if进行判断:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;f&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;missing&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-17&quot;&gt;元组&lt;/h1&gt;

&lt;p&gt;元组基本上就像一个不可以改变的列表，就像列表一样，元组是序列，但是它具有不可变性，和字符串类似。从语法上讲，它们编写在圆括号中而不是方括号中，他们支持任意类型、任意嵌套以及常见的序列操作。&lt;/p&gt;

&lt;p&gt;元组还有两个专有的可调用方法:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index:返回元素的偏移值&lt;/li&gt;
  &lt;li&gt;count:返回元素在元组中出现的次数&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-18&quot;&gt;为什么要用元组&lt;/h2&gt;

&lt;p&gt;元组在实际应用并不如列表那么常用，但是它的关键在于不可变性。如果在程序中以列表的形式传递一个对象的集合，它可能在任何地方改变，如果使用元组的话，就不能。也就是说，元组提供了一种完整性约束，这对于我们这里所编写的更大型的程序来说是方便的。&lt;/p&gt;

&lt;h1 id=&quot;section-19&quot;&gt;文件&lt;/h1&gt;

&lt;p&gt;文件对象是Python代码对计算机上外部文件的主要接口。虽然文件时核心类型，但是它有些特殊:没有特定的常量语法来创建文件。要创建一个文件对象，需要调用内置的open函数以字符串的形式传递给它一个外部的文件名以及一个处理模式的字符串。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;data.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Hello&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;World&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-20&quot;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Python中的核心对象有:数字、字符串、列表、字典、元组、文件和集合。&lt;/li&gt;
  &lt;li&gt;其中，数字、字符串和元组具有不可变性。&lt;/li&gt;
  &lt;li&gt;字符串、元组、列表是属于序列的，是有顺序的。&lt;/li&gt;
  &lt;li&gt;字典不属于序列，它是没有顺序的。&lt;/li&gt;
  &lt;li&gt;Python中的关键思想之一:&lt;strong&gt;不要把代码限制在特定的类型上，使代码自动适用于多种类型&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>《Learning Python》学习笔记——1.Python如何运行程序</title>
   <link href="http://username.github.com/Python/2013/01/25/Learning-Python1"/>
   <updated>2013-01-25T00:00:00+08:00</updated>
   <id>http://username.github.com/Python/2013/01/25/Learning-Python1</id>
   <content type="html">&lt;h1 id=&quot;python&quot;&gt;Python解释器简介&lt;/h1&gt;

&lt;p&gt;Python不仅是一门编程语言，也是一个名为解释器的软件包。解释器是一种让其他程序运行起来的程序。实际上，解释器是代码与机器的计算机硬件之间的软件逻辑层。在UNIX/Linux上，Python通常是安装在/usr目录下的。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;程序执行&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;程序员的视角&lt;/h2&gt;

&lt;p&gt;Python程序的源代码通常是以.py来命名的，当你将代码保存为一个文本文件之后，你必须告诉Python解释器去执行这个文件。&lt;/p&gt;

&lt;h2 id=&quot;python-1&quot;&gt;Python的视角&lt;/h2&gt;

&lt;p&gt;当Python运行脚本时，在代码开始进行处理之前，Python还会执行一些步骤。确切地说，第一步是编译成所谓的&amp;rdquo;字节码&amp;rdquo;,之后将其转发到所谓的&amp;rdquo;虚拟机&amp;rdquo;中.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;字节码编译&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;编译是一个简单的翻译步骤，而且字节码是源代码底层的、与平台无关的表现形式。概括地说，Python通过把每一条源语句分解为单一步骤来将这些源语句翻译成一组字节码指令，这些字节码可以提高执行速度。
编译好的字节码文件将会被Python自动保存为.pyc文件。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Python虚拟机(PVM)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一旦程序编译成字节码，之后的字节码发送到通常称为Python虚拟机(Python Virtual Machine,PVM)上来执行，实际上它不是一个独立的程序，不需要安装。事实上，PVM就是迭代运行字节码指令的一个大循环，一个接一个地完成操作。PVM是Python的运行引擎，它时常表现为Python系统的一部分，并且它是实际运行脚本的组件。从技术上讲，它才是所谓&amp;rdquo;Python解释器&amp;rdquo;的最后一步。&lt;/p&gt;

&lt;h1 id=&quot;python-2&quot;&gt;Python实现的替代者&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;原始的标准的Python实现方式，它运行的速度最快、最完整而且也是最健全的。它可以脚本化C和C++组件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;JPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;JPython是一种Python语言的替代实现方式，其目的是为了与Java编程语言集成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;IronPython&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Python的第三种实现方式是IronPython(比CPython和JPython都要新)，其设计目的是让Python程序可以与Windows平台上的.NET框架以及与之对应的Linux上开源的Mono编写的应用相集成&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Linux学习——基础篇</title>
   <link href="http://username.github.com/Linux/2012/12/16/Linux-Base"/>
   <updated>2012-12-16T00:00:00+08:00</updated>
   <id>http://username.github.com/Linux/2012/12/16/Linux-Base</id>
   <content type="html">&lt;h1 id=&quot;linux&quot;&gt;Linux是什么&lt;/h1&gt;

&lt;h2 id=&quot;linux-1&quot;&gt;Linux内核版本&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:通常来说我们所说的应该Linux应该是指OS中的内核，而不是指整个OS。Linux就是一个OS最底层的内核及其提供的内核工具。&lt;/p&gt;

&lt;p&gt;版本号的格式:主版本.次版本.释出版本-修改版本。&lt;/p&gt;

&lt;p&gt;举例:2.6.18-92.e15&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主、次版本号为奇数:开发中的版本号。如2.5.xx，这种内核通常是内核开发工程师所使用的，主要用来添加和测试新功能。&lt;/li&gt;
  &lt;li&gt;主、次版本号为偶数:稳定的版本号。如2.6.xx，这种内核是开发成熟的，一般用于PC或企业版本中，重点是为用户提供稳定的版本。&lt;/li&gt;
  &lt;li&gt;释出版本: 释出版本是指，在主、次版本架构不变的情况下，新增功能累积到一定的程度后所新释出的内核版本。&lt;/li&gt;
  &lt;li&gt;修改版本: 由于Linux是使用GPL授权的，所以每个人都能修改器内核版本，你可以对某个版本的内核进行修改，而修改后的版本就是修改版本了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-distributoins&quot;&gt;Linux Distributoins&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux Distributions = Kernel + Softwares + Tools + Documents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Linux Distribution的中文翻译:可完全安装套件&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;主机规划与磁盘分区&lt;/h1&gt;

&lt;h2 id=&quot;linux-2&quot;&gt;Linux与硬件的搭配&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;强调：各个组件或设备在Linux下面都是一个文件。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;linux-3&quot;&gt;各硬件设备在Linux中的文件名&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;几乎所有的硬件设备文件都在/dev目录内&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;设备&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;设备在Linux内的文件名&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IDE硬盘&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/hd[a-d]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SCSI/SATA/USB硬盘&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/sd[a-p]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;U盘&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/sd[a-p]与SATA相同&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;软驱&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/fd[0-1]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;打印机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;25针:/dev/lp[0-2]\USB:/dev/usb/lp[0-15]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;鼠标&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;USB:/dev/usb/mouse[0-15]\PS2:/dev/psaux&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;当前CD ROM/DVD ROM&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/cdrom&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;当前鼠标&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/dev/mouse&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;磁带机&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IDE:/dev/ht0\SCSI:/dev/st0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;磁盘分区&lt;/h2&gt;

&lt;h3 id=&quot;section-2&quot;&gt;磁盘连接的方式与设备文件名的关系&lt;/h3&gt;

&lt;p&gt;对于老式计算机来说，一般有两个IDE接口，而一个IDE扁平电缆可以连接两个设备，所以一共可以连接4个IDE设备。这两个IDE接口通常称为IDE1(primary)和IDE2(secondary)，而同一根电缆上的两个接口被区分为Master(主设备)与Slave(从设备)。&lt;/p&gt;

&lt;p&gt;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|
| IDE1(Priary)         |    /dev/hda     |     /dev/hdb   |
| IDE2(Secondary)      |    /dev/hdc     |     /dev/hdd   |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&lt;/p&gt;

&lt;p&gt;与IDE不同，SATA/USB/SCSI等磁盘接口都是用SCSI模块来驱动的，但是并没有特定的设备顺序，它们的命名方式是根据&lt;strong&gt;Linux内核检测到磁盘的顺序&lt;/strong&gt;\另外，USB只有开机完成后才被系统识别。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;磁盘的组成复习&lt;/h3&gt;

&lt;p&gt;每个扇区为512bytes&lt;/p&gt;

&lt;p&gt;磁盘的第一个扇区十分重要，其中记录了两个关于磁盘的重要的信息:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;主引导分区(Master Boot Record,MBR)&lt;/strong&gt;:可以安装引导加载程序的地方，有446bytes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;分区表&lt;/strong&gt;:记录整块硬盘分区的状态,有64bytes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-4&quot;&gt;磁盘分区表&lt;/h3&gt;

&lt;p&gt;柱面是文件系统的最小单位，也是分区的最小单位。&lt;/p&gt;

&lt;p&gt;在分区表的64bytes中，总共可以分为4组记录区，每组记录区中记录了该区段的起始与结束的柱面号。这个4组记录区被称为主(Primary)或扩展(Extended)分区，其中，扩展(Extened)分区不能超过1个，也就是说，主分区可以有多个(不超过4个),而不止1个。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;分区命名&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;分区的命名方式是在设备文件名后加上数字，其中1-4是保留给Primary或Extended使用的。&lt;/p&gt;

&lt;p&gt;例子:&lt;br /&gt;
/dev/hda1
/dev/hda2&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;扩展分区&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;磁盘的第一个扇区中的64Bytes只能记录4个分区信息，因此我们可以利用额外的扇区来记录更多的分区信息。扩展分区就是用来做这项工作的。扩展分区的目的是使用额外的扇区来记录信息，&lt;strong&gt;扩展分区本身并不能内拿来格式化。&lt;/strong&gt;由扩展分区继续分出来的分区称为逻辑分区(logical parition),同时需要注意的是，由于逻辑分区是由扩展分区继续分出来的，所以&lt;strong&gt;逻辑分区可以使用的柱面范围就是扩展分区所设定的范围。&lt;/strong&gt;由1-4这四个号码是保留给Primary和Extended所使用的，所以&lt;strong&gt;逻辑分区的设备名称是从5开始的，这很重要！&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;其实所谓的&amp;rdquo;分区&amp;rdquo;只是针对第一个扇区中的64bytes的分区表进行设置而已。&lt;/li&gt;
  &lt;li&gt;硬盘默认的分区表仅能写入四组分区信息&lt;/li&gt;
  &lt;li&gt;这四组分区信息我们称为主或扩展分区&lt;/li&gt;
  &lt;li&gt;分区的最小单位是柱面&lt;/li&gt;
  &lt;li&gt;主分区和扩展分区最多可以由四个(硬盘的限制)&lt;/li&gt;
  &lt;li&gt;扩展分区最多只能由一个(OS的限制)&lt;/li&gt;
  &lt;li&gt;逻辑分区是由扩展分区持续切割出来分区&lt;/li&gt;
  &lt;li&gt;能够被格式化后作为数据访问的分区为主分区与逻辑分区。扩展分区无法格式化&lt;/li&gt;
  &lt;li&gt;逻辑分区的数量依OS而不同，在Linux中，IDE硬盘最多有59个逻辑分区(5-63号)，SATA硬盘则有11个逻辑分区(5-15号)&lt;/li&gt;
  &lt;li&gt;分区其实就是以柱面为单位的“连续”磁盘空间。&lt;/li&gt;
  &lt;li&gt;考虑到磁盘的连续性，一般建议将扩展分区的柱面号码分配在最后面的柱面内。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;开机流程与主引导分区&lt;/h3&gt;

&lt;p&gt;整个开机流程应该是这样的&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;BIOS:开机主动执行的韧体，会认识第一个可开机的设备。(韧体就是写入到硬件上的一个软件程序)&lt;/li&gt;
  &lt;li&gt;MBR: 第一个可开机设备的第一个扇区内的主引导分区块，内包含了引导加载程序。&lt;/li&gt;
  &lt;li&gt;引导加载程序(Boot loader):一支可读取内核文件来执行的软件。&lt;/li&gt;
  &lt;li&gt;内核文件: 开始操作系统的功能。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Boot loader是安装在MBR上的一套软件，由于MBD只有446Bytes，所以这个引导加载程序是非常小而完美的。引导加载程序的主要任务如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提供菜单:用户可以选择不同的开机选项，这也是多重引导的重要功能&lt;/li&gt;
  &lt;li&gt;载入内核文件: 直接指向可开机的程序区段来开始OS&lt;/li&gt;
  &lt;li&gt;转交其他Loader: 将引导加载功能转交给其他loader负责。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意:引导加载程序除了可以安装在MBR之外，还可以安装在每个分区的引导扇区&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;每个分区都拥有自己的启动扇区&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;实际可开机的内核文件是放置到各分区内的&lt;/li&gt;
  &lt;li&gt;Loader只会认识自己的系统分区内的可开机内核文件，以及其他loader。&lt;/li&gt;
  &lt;li&gt;Loader可直接指向或间接地将管理权转交给另一个管理程序。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;man-page&quot;&gt;首次登陆与在线求助man page&lt;/h1&gt;

&lt;h2 id=&quot;section-6&quot;&gt;在命令行模式下执行命令&lt;/h2&gt;

&lt;h3 id=&quot;section-7&quot;&gt;开始执行命令&lt;/h3&gt;

&lt;p&gt;命令行模式登陆后取得的程序被称为shell，这个程序负责最外层跟用户的通信工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一个被输入的数据绝对是命令或者是可执行文件&lt;/strong&gt;，无论命令中有几个空格，shell都视为一格。&lt;/p&gt;

&lt;p&gt;另外需要注意的是，在Linux中，大小写是敏感的。&lt;/p&gt;

&lt;h2 id=&quot;linuxman-page&quot;&gt;Linux系统的在线求助系统man page&lt;/h2&gt;

&lt;p&gt;man是manual的简写。&lt;/p&gt;

&lt;p&gt;man中的数字说明表&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;用户在shell环境中可以操作的命令或可执行文件。&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;系统内核可调用的函数与工具等。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;一些常用的函数与函数库，大部分为C的函数库。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;设备文件的说明，通常在/dev下的文件&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;配置文件或者是某些文件的格式&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;游戏&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;惯例与协议等，例如Linux文件系统、网络协议、ASCII code等说明&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;系统管理员可用的管理命令。&lt;/strong&gt;　　　　　　　　　　　　　　&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;跟kernel有关的文件&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-8&quot;&gt;正确的关机方法&lt;/h2&gt;

&lt;p&gt;要关机时需要注意下面几件事情&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;查看系统的使用状态。
    &lt;ul&gt;
      &lt;li&gt;who:查看还有谁登陆在系统上&lt;/li&gt;
      &lt;li&gt;netstat -a:查看网络的联机状态&lt;/li&gt;
      &lt;li&gt;ps -aux:查看后台执行的程序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;通知在线用户关机的时刻&lt;/li&gt;
  &lt;li&gt;正确的关机命令使用
    &lt;ul&gt;
      &lt;li&gt;sync:将数据同步写入到硬盘中&lt;/li&gt;
      &lt;li&gt;shutdown:惯用的关机命令&lt;/li&gt;
      &lt;li&gt;reboot,halt,poweroff:重启、关机&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;shutdown -h now&lt;/code&gt;:立刻关机&lt;/p&gt;

&lt;h1 id=&quot;linux-4&quot;&gt;Linux的文件权限与目录配置&lt;/h1&gt;

&lt;h2 id=&quot;section-9&quot;&gt;用户与用户组&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Linux用户身份与用户组记录的文件&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户账号信息:/etc/passwd&lt;/li&gt;
  &lt;li&gt;个人密码:/etc/shadow&lt;/li&gt;
  &lt;li&gt;所有组名记录:/etc/group&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-5&quot;&gt;Linux文件权限概念&lt;/h2&gt;

&lt;h3 id=&quot;linux-6&quot;&gt;Linux文件属性&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;drwx&amp;mdash;&amp;mdash;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4096&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Sep 5 0:37&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;.gconf&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;对这七列信息的详细说明:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;第一列代表这个文件的类型与权限(一共有10个字符)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;第一个字符代表这个文件是&amp;rdquo;目录、文件或链接文件&amp;rdquo;&lt;/p&gt;

        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr&gt;
              &lt;th style=&quot;text-align: center&quot;&gt;字符&lt;/th&gt;
              &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
              &lt;th&gt;&amp;nbsp;&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;[d]&lt;/td&gt;
              &lt;td style=&quot;text-align: left&quot;&gt;目录&lt;/td&gt;
              &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;[-]&lt;/td&gt;
              &lt;td style=&quot;text-align: left&quot;&gt;文件&lt;/td&gt;
              &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;[&lt;/td&gt;
              &lt;td style=&quot;text-align: left&quot;&gt;]&lt;/td&gt;
              &lt;td&gt;连接文件&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;[b]&lt;/td&gt;
              &lt;td style=&quot;text-align: left&quot;&gt;设备文件里面的可供存储的接口设备&lt;/td&gt;
              &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
              &lt;td style=&quot;text-align: center&quot;&gt;[c]&lt;/td&gt;
              &lt;td style=&quot;text-align: left&quot;&gt;设备文件里面的串行端口设备&lt;/td&gt;
              &lt;td&gt;&amp;nbsp;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;接下来的字符，以3个为一组，均是&amp;rdquo;rwx&amp;rdquo;的3个参数的组合。&lt;/p&gt;

        &lt;pre&gt;&lt;code&gt;[r]:可读[read] [w]:可写[write] [x]:可执行[execute]

**注意:这3个权限的位置不会改变，如果没有权限，就会出现减号[-]而已**
 		
第一组为&quot;文件所有者的权限&quot; 第二组为&quot;同用户组的权限&quot; 第三组为&quot;其他非本用户组的权限&quot;
&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第二列表示有多少文件名连接到此节点&lt;/p&gt;

    &lt;p&gt;每个文件都会将它的权限与属性记录到文件系统的i-node中，不过我们使用的目录树却是使用文件名来记录，因此每个文件名就会连接到一个i-node。这个属性记录的就是有多少不同的文件名连接到同一个i-node号码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第三列表示这个文件(或目录)的&amp;rdquo;所有者账号&amp;rdquo;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第四列表示这个文件的所属用户组&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第五列为这个文件的大小，默认单位是B&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第六列为这个文件的创建日期或是最近的修改日期&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;第七列为该文件名&lt;/p&gt;

    &lt;p&gt;特殊情况:如果文件名之前多了个&amp;rdquo;.&amp;rdquo;,那么这个文件为&amp;rdquo;隐藏文件&amp;rdquo;。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-10&quot;&gt;如何改变文件属性与权限&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;chgrp:改变文件所属用户组&lt;/li&gt;
  &lt;li&gt;chown:改变文件所有者&lt;/li&gt;
  &lt;li&gt;chmod:改变文件的权限&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;chmod&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可以使用数字来表示各个权限:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;r:4&lt;/li&gt;
  &lt;li&gt;w:2&lt;/li&gt;
  &lt;li&gt;x:1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rwx = 4+2+1=7
r-x = 4+0+1=5&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;目录与文件的权限意义&lt;/h3&gt;

&lt;p&gt;文件权限对于一般文件和目录是不同的:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件的权限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文件是实际含有数据的地方，包括一般文本文件、数据库内容文件、二进制可执行文件等。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;r:可读取此文件的实际内容，如读取文本文件的文字内容等。&lt;/li&gt;
  &lt;li&gt;w:可以编辑、新增或者是修改该文件的内容(&lt;strong&gt;但不含删除该文件&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;x:该文件具有可以被系统执行的权限。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们的文件是否能被执行则是由是否具有&amp;rdquo;x&amp;rdquo;这个权限来决定，而跟文件名是没有绝对的关系。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录的权限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;文件是存放实际数据的所在，目录主要的内容是记录文件名列表，文件名与目录有强烈的关联。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;r:表示具有读取目录结构列表的权限&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;w:可写入的权限，对目录来说这是很强大的。因为它表示你具有更改目录结构列表的权限，也就是下面这些权限:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  - 新建的文件与目录 
  - 删除已经存在的文件与目录(不论该文件的权限如何)
  - 将已存在的文件或目录进行重命名
  - 转义该目录内的文件、目录位置
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;x:表示用户能否进入该目录成为工作目录的用途&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linux-7&quot;&gt;Linux文件种类与扩展名&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;一个Linux文件能不能被执行，与它的第一列的10个属性有关，与文件名根本一点关系都没有。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-8&quot;&gt;Linux目录配置&lt;/h2&gt;

&lt;h3 id=&quot;linuxfhs&quot;&gt;Linux目录配置标准:FHS&lt;/h3&gt;

&lt;p&gt;FHS:Filesystem Hierarchy Standard&lt;/p&gt;

&lt;p&gt;FHS依据文件系统使用的频繁与否与是否允许用户随意改动，而将目录定义成为四种交互作用的形态：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;可分享的(shareable)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;不可分享的(unshareable)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;不变的(static)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/usr(软件放置处)\/opt(第三方软件)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/etc(配置文件)\/boot(开机与内核文件)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;可变动的(variable)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/var/mail(用户邮件信箱)\/var/spool/news(新闻组)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/var/rub(程序相关)\/var/lock(程序相关)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;可分享的&lt;/strong&gt;:可以分享给其他系统挂在使用的目录
&lt;strong&gt;不可分享的&lt;/strong&gt;:自己机器上运行的设备文件或者是与程序有关的socket文件等
&lt;strong&gt;不变的&lt;/strong&gt;:一些不会经常变动的数据，例如函数库、文件说明文件、系统管理员所管理的主机服务配置文件等。
&lt;strong&gt;可变动的&lt;/strong&gt;:经常改变的数据，例如登陆文件、新闻组等。&lt;/p&gt;

&lt;p&gt;FHS所定义的三个目录:
- /(root,根目录):与开机系统有关
- /usr(UNIX software resource):与软件安装/执行有关
- /var(variable):与系统运作过程有关&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;根目录(/)的意义与内容&lt;/strong&gt;
FHS标准建议:根目录(/)所在分区越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区内，保持根目录越小越好。如此不但性能较好，根目录所在的文件系统也较不容易发生问题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:开机过程中仅有根目录会被挂载，其他分区则是在完成之后才会进行挂载行为。所以有些目录不可与根目录分开，下面五个目录是不可与根目录分开的:
- /etc: 配置文件
- /bin: 重要执行文件
- /dev: 所需要的设备文件
- /lib: 执行文件所需的函数库与内核所需的模块
- /sbin: 重要的系统执行文件
&lt;strong&gt;这个五个目录千万不可与根目录分开放在不同的分区&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/usr的意义与内容&lt;/strong&gt;
FHS建议所有软件开发者应该将他们的数据合理地分别放置到这个目录下的子目录，而不要自行新建该软件自己独立的目录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/var的意义与内容&lt;/strong&gt;
/var目录主要针对常态性变动的文件，包括缓存(cache)、登录文件(log file)以及某些软件所产生的文件。&lt;/p&gt;

&lt;h1 id=&quot;linux-9&quot;&gt;Linux文件与目录管理&lt;/h1&gt;

&lt;h2 id=&quot;section-12&quot;&gt;目录与路径&lt;/h2&gt;

&lt;h3 id=&quot;section-13&quot;&gt;相对路径与绝对路径&lt;/h3&gt;

&lt;p&gt;绝对路径:路径的写法一定由根目录/写起。&lt;br /&gt;
相对路径:路径的写法不是由/写起。&lt;/p&gt;

&lt;h3 id=&quot;section-14&quot;&gt;目录的相关操作&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;特殊的目录&lt;/strong&gt;
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
|     符号    |                 意义                 |
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|
|      .      |  代表此层目录                        |
|      ..     |  代表上一层目录                      |
|      -      |  代表前一个工作目录                  |
|      ~      |  代表“目前用户身份”所在的主文件夹  |
|  ~account   |  代表account这个用户的主文件夹       |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;

&lt;p&gt;常用的处理目录的命令:
- cd:切换目录
- pwd:显示当前目录
- mkdir:新建一个新的目录
- rmdir:删除一个空的目录&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;详细的命令解释与说明，可以参看《鸟哥基础篇》P163~165&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;path&quot;&gt;关于执行文件路径的变量:$PATH&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;结论&lt;/strong&gt;
- 不同身份用户默认的PATH不同，默认能够随意执行的命令也不同
- PATH是可以被修改的
- 本目录(.)最好不要被放置到PATH中&lt;/p&gt;

&lt;h2 id=&quot;section-15&quot;&gt;文件与目录管理&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;cp&lt;/strong&gt;:复制文件或目录
-p:连同文件的属性一起复制过去，而非使用默认属性(备份常用)
-u:若destination比source旧才更新destination&lt;/p&gt;

&lt;h2 id=&quot;section-16&quot;&gt;文件内容查阅&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cat:由第一行开始显示文件内容&lt;/li&gt;
  &lt;li&gt;tac:从最后一行开始显示，可以看出tac是cat的倒写形式&lt;/li&gt;
  &lt;li&gt;nl:显示的时候，顺便输出行号&lt;/li&gt;
  &lt;li&gt;more:一页一页地显示文件内容&lt;/li&gt;
  &lt;li&gt;less:与more类似，但是比more更好的是，它可以往前翻页&lt;/li&gt;
  &lt;li&gt;head:只看头几行&lt;/li&gt;
  &lt;li&gt;tail:只看结尾几行&lt;/li&gt;
  &lt;li&gt;od:以二进制的方式读取文件内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;touch&quot;&gt;修改文件时间或创建新文件:touch&lt;/h3&gt;

&lt;p&gt;文件的三个时间属性:
- modification time(mtime):当该文件的&amp;rdquo;内容数据&amp;rdquo;更改时，就会更新这个时间。内容数据指的是文件的内容，而不是文件的属性或权限。
- status time(ctime):当该文件的&amp;rdquo;状态&amp;rdquo;改变时，就会更新这个时间，举例来说，像是权限与属性被更改了，都会更新这个时间。
- access time(atime):当&amp;rdquo;该文件的内容被取用&amp;rdquo;时，就会更新这个读取时间。举例来说，我们使用cat读取文件，就会更新这个文件的atime。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;在默认情况下，ls显示出来的是该文件的mtime，也就是这个文件的内容上次被更改的时间&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;touch最经常被使用的情况:
- 创建一个空的文件
- 将某个文件日期修改为目前日期(mtime和atime)&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;文件与目录的默认权限与隐藏权限&lt;/h2&gt;

&lt;h3 id=&quot;umask&quot;&gt;文件默认权限:umask&lt;/h3&gt;

&lt;p&gt;unmask指定:&amp;rdquo;目前用户在新建文件或目录时候的权限默认值&amp;rdquo;，unmask的分数指的是&amp;rdquo;该默认值需要减掉的权限&amp;rdquo;&lt;/p&gt;

&lt;p&gt;默认情况下:
文件的默认权限:-rw-rw-rw-
目录的默认权限:drwdrwdrw&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:umask的分数是指该默认值需要减掉的权限&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;举例:
新建文件时:(-rw-rw-rw-)-(&amp;mdash;&amp;ndash;w&amp;ndash;w&amp;ndash;)==&amp;gt;-rw-r&amp;ndash;r&amp;ndash;
新建目录时:(drwdrwdrw)-(d&amp;mdash;-w&amp;ndash;w&amp;ndash;)==&amp;gt;drwxr-xr-x&lt;/p&gt;

&lt;h3 id=&quot;chattrlsattr&quot;&gt;文件隐藏属性chattr,lsattr&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;chattr:设置文件的隐藏属性&lt;/li&gt;
  &lt;li&gt;lsattr:显示文件的隐藏属性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的属性说明请参见《鸟哥的基础篇》P183&lt;/p&gt;

&lt;p&gt;比较重要的是:
a:当设置a之后，这个文件就只能增加数据，而不能删除也不能修改数据，只有root才能设置这个属性
i:i可以让一个文件&amp;rdquo;不能删除&amp;rdquo;、改名、设置连接也无法写入或添加数据。只有root才能设置这个属性&lt;/p&gt;

&lt;h3 id=&quot;suidsgidsbit&quot;&gt;文件特殊权限:SUID,SGID,SBIT&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;SetUID(SUID)&lt;/strong&gt;
- SUID权限仅对二进制程序有效
- 执行者对于该程序具有x的可执行权限
- 本权限仅在执行该程序过程中有效
- 执行者将具有该程序所有者的权限&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Set GID(SGID)&lt;/strong&gt;
- SGID对二进制程序有用
- 程序执行者对于该程序来说，需具备x的权限
- 执行者在执行的过程中将会获得该程序用户组的支持&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sicky Bit(SBIT)&lt;/strong&gt;
- 当用户对于此目录具有w,x权限，即具有写入的权限时 
- 当用户在该目录下创建文件或目录时，仅有自己与root才有权力删除该文件&lt;/p&gt;

&lt;h3 id=&quot;file&quot;&gt;查看文件类型:file&lt;/h3&gt;

&lt;p&gt;可以通过file命令来查某个文件的基本数据&lt;/p&gt;

&lt;h2 id=&quot;section-18&quot;&gt;命令与文件的查询&lt;/h2&gt;

&lt;h3 id=&quot;section-19&quot;&gt;脚本文件名的查询&lt;/h3&gt;

&lt;p&gt;which:寻找&amp;rdquo;执行文件&amp;rdquo;
which是根据PATH所规范的路径去查询&amp;rdquo;执行文件&amp;rdquo;的文件名&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;文件名的查找&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;whereis:寻找特定文件(利用数据库查找,速度快)&lt;/li&gt;
  &lt;li&gt;locate:依据/var/lib/mlocate内的数据库记载,找出用户输入的关键字文件名&lt;/li&gt;
  &lt;li&gt;updatedb:根据/etc/updatedb.conf的设置去查找系统硬盘内的文件名，并更新/var/lib/mlocate内的数据库文件&lt;/li&gt;
  &lt;li&gt;find:直接查找硬盘上的文件(速度慢)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;linux-10&quot;&gt;Linux磁盘与文件系统管理&lt;/h1&gt;

&lt;h2 id=&quot;ext2&quot;&gt;认识EXT2文件系统&lt;/h2&gt;

&lt;h3 id=&quot;section-21&quot;&gt;文件系统特性&lt;/h3&gt;

&lt;p&gt;目前我们在格式化时已经不再说成针对分区来格式化了，通常我们可以称呼&lt;strong&gt;一个可被挂载的数据为一个文件系统而不是一个分区&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ext2文件系统:
- super block:记录此文件系统的整体信息，包括inode/block的总量、使用量、剩余量，以及文件系统的格式与相关信息等
- inode:记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码
- block:实际记录文件的内容，若文件太大时，会占用多个block&lt;/p&gt;

&lt;h3 id=&quot;linuxext2inode&quot;&gt;Linux的Ext2文件系统(inode)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;文件系统一开始就将inode与block规划好了，除非重新格式化(或者利用resize2fs等命令更改文件系统大小),否则indoe与block固定后就不再变动。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果文件系统高达数百GB时，那么将所有的inode与block放置在一起将是很不明智的决定，因为inode与block的数量太大时，不容易管理。因此Ext2文件系统在格式化的时候基本上是区分为多个块组的，每个块组都有独立的inode/block/superblock系统。&lt;/p&gt;

&lt;p&gt;在整体规划中，&lt;strong&gt;文件系统最前面有一个启动删除(boot sector)，这个启动扇区可以安装引导装载程序&lt;/strong&gt;，这个设计可以用来制作出多重引导环境。&lt;/p&gt;

&lt;p&gt;每一个块组(block group)都有以下六部分组成:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;data block(数据块)&lt;/strong&gt;
     data block是用来放置文件内容的地方，在Ext2文件系统中所支持的block大小有1KB,2KB及4KB三种。每个block都有编号,方便inode的记录。由于block大小而产生的Ext2文件系统限制如表所示:&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Blcok大小&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1KB&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2KB&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4KB&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;最大单一文件限制&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16GB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;256GB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2TB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;最大文件系统总容量&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2TB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;8TB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;16TB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;	注意事项:
		- 原则上，block的大小与数量在格式化完后就不能再改变了(除非重新格式化)
		- 每个block内最多只能够放置一个文件的数据
		- 如果文件大于block的大小，则一个文件会占用多个block数量
		- 若文件小于block，则该block的剩余空间就不能再被使用了(导致空间浪费)
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;inodetable(indoe表格)&lt;/strong&gt;
     inode记录的文件数据至少有下面这些:
         - 该文件的访问模式(read/write/excute)
         - 该文件的所有者与组(owner/group)
         - 该文件的大小
         - 该文件创建或状态改变的时间(ctime)
         - 最近一次的读取时间(atime)
         - 最近修改的时间(mtime)
         - 定义文件特性的标志(flag),如SetUID等。
         - 该文件真正内容的指向(pointer)&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; inode的数量与大小也是在格式化时就已经固定了。
	
 每个inode大小均固定为128bytes
 每个文件仅会占用一个inode而已,因此，文件系统能够创建的文件数量与inode的数量有关
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Superblock&lt;/strong&gt;
     Superblock是记录整个文件系统相关信息的地方，没有Superblock，就没有这个文件系统了。它记录的信息主要有:
         - block与inode的总量
         - 未使用与已使用的inode/block数量
         - block与inode的大小(block为1K,2K,4K   inode为128bytes)
         - 文件系统的挂载时间、最近一次写入数据的时间、最近一次检验磁盘(fsck)的时间等文件系统的相关信息
         - 一个validbit数值，若此文件系统已被挂载，则validbit为0，若未被挂载，则validbit为1&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; 此外，需要特别注意的是，整个文件系统应该只有一个Superblock,但是后续的block group不一定含有superblock，若含有，则这个superblock应该是第一个block group内superblock的备份。
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;File system Descritption(文件系统描述说明)&lt;/strong&gt;
     这个区段可以描述每个block group的开始于结束的block号码，以及说明每个区段(superblock,bitmap,inodemap,data block)分别介于哪一个block号码之间。这部分也能够用dumpe2fs来查看的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;block bitmap(块对照表)&lt;/strong&gt;
     记录使用与未使用的block号码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;inode bitmap(inode对照表)&lt;/strong&gt;
     记录使用与未使用的inode号码&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-22&quot;&gt;与目录树的关系&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当我们在Linux下的Ext2文件系统新建一个目录时，Ext2会分配一个inode与至少一块block给该目录。此时，
inode:记录该目录的相关权限与属性
block:记录这个目录下的文件名与该文件所占用的inode号码数据(&lt;strong&gt;目录并不会只占用一个block,当该目录下文件太多时，系统会多分配一个block&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;目录树与读取&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;正因为Ext2中文件名是记录在目录的block中的，所以新增/删除/重命名文件名与目录的w权限有关，要读取某个文件，必然会经过其父目录的indoe与block&lt;/p&gt;

&lt;p&gt;由于目录树是由根目录开始读起，因此系统通过挂载信息可以找到挂载点的inode号码(通常一个文件系统的最顶层inode号码会由2号开始)，此时就能够得到根目录的inode内容，并依据inode读取根目录的block内的文件名数据，再一层层地往下读到正确的文件名。&lt;/p&gt;

&lt;h3 id=&quot;ext2ext3&quot;&gt;Ext2/Ext3文件的访问与日志文件系统的功能&lt;/h3&gt;

&lt;p&gt;当我们新增一个文件时，此时文件系统的行为是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先确定用户对于欲添加文件的目录是否具有w与x的权限，若有的话才能添加&lt;/li&gt;
  &lt;li&gt;根据inode bitmap找到没有使用的inode号码，并将新文件的权限/属性写入&lt;/li&gt;
  &lt;li&gt;根据block bitmap找到没有使用中的block号码，并将实际的数据写入block中，且更新inode的block指向数据&lt;/li&gt;
  &lt;li&gt;将刚才写入的inode与block数据同步更新inode bitmap与block bitmap,并更新superblock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常来说，我们将inode table与data block称为数据存放区域，而superblock、block bitmap与inode bitmap等区段就被称为metadata(中间数据)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日志文件系统&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在文件系统中规划出一个块，该块专门记录写入或修订文件时的步骤，那就可以简化一致性检查的步骤了，也就是说:
1. 预备:当系统要写入一个文件时，会先在日志记录块中记录某个文件准备要写入的信息。
2. 实际写入:开始写入文件的权限与数据;开始更新mata data的数据
3. 结束:完成数据与meta data的更新之后，在日志记录块中完成该文件的记录&lt;/p&gt;

&lt;h3 id=&quot;linux-11&quot;&gt;Linux文件系统的操作&lt;/h3&gt;

&lt;p&gt;Linux系统上的文件系统与内存有非常大的关系:
- 系统会将常用的文件数据放置到主存储器的缓冲区，以加速文件系统的读/写
- Linux的物理内存最后都会被用光，这是正常的情况，可加速系统性能
- 你可以手动使用sync来强迫内存中设置为Dirty的文件会写到磁盘中
- 若正常关机时，关机命令会主动调用sync来将内存的数据回写入磁盘内
- 但若不正常关机(如断点、死机或其他不明原因),由于数据尚未回写到磁盘内，因此重新启动后可能会花很多时间在进行磁盘检查，甚至可能导致文件系统的损毁(非磁盘损坏)&lt;/p&gt;

&lt;h3 id=&quot;mount-point&quot;&gt;挂载点(mount point)的意义&lt;/h3&gt;

&lt;p&gt;将文件系统与目录树结合的操作我们称为&lt;strong&gt;挂载&lt;/strong&gt;
&lt;strong&gt;挂载一定是目录，该目录为进入该文件系统的入口&lt;/strong&gt;
文件系统只有被挂载到目录树中才能被使用&lt;/p&gt;

&lt;h2 id=&quot;section-23&quot;&gt;文件系统的简单操作&lt;/h2&gt;

&lt;h3 id=&quot;dfdu&quot;&gt;磁盘与目录的容量:df,du&lt;/h3&gt;

&lt;p&gt;df:列出文件系统的整体磁盘使用量
du:评估文件系统的磁盘使用量&lt;/p&gt;

&lt;p&gt;df命令主要读取的数据几乎都是针对整个文件系统，因此读取的范围主要是在Super block内信息，所以命令显示结果的速度非常迅速
du命令其实会直接到文件系统内去查找所有的文件数据，所以会显示得比较慢&lt;/p&gt;

&lt;h3 id=&quot;in&quot;&gt;连接文件:In&lt;/h3&gt;

&lt;p&gt;Linux中的连接文件有两种:一种是类似Windows的快捷方式功能的文件，另一种则是通过文件系统的inode连接来产生新文件名，而不是产生新文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;hard link(硬连接或实际连接)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;提出问题:有没有可能多个文件名对应到同一个inode号码呢？
hard link只是在某个目录下新建一条文件名连接到某个inode号码的关联记录而已(类似于指针，指向同一个inode号码/内存地址)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hard link仅能够在单一文件系统中进行，不能跨文件系统&lt;/li&gt;
  &lt;li&gt;hard link不能连接到目录&lt;/li&gt;
  &lt;li&gt;hard link不会占用inode和block&lt;/li&gt;
  &lt;li&gt;每一个目录的&lt;code&gt;.&lt;/code&gt;与&lt;code&gt;..&lt;/code&gt;均是hard link实现的，所以当新建一个目录时，它的连接数至少是2(一个是目录名,一个是自己的&lt;code&gt;.&lt;/code&gt;),同时它的父目录的连接数会加1(新目录的&lt;code&gt;..&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令: &lt;code&gt;ln  /etc/crontab /root/crontab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;symbolic link(符号连接，也即快捷方式)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本上，symbolic link就是在创建一个独立的文件，而这个文件会让数据的读取指向它连接的那个文件名。
symbolic link是可以和Windows中的快捷方式画上等号，由symbolic link创建的文件作为一个独立的新文件，所以会占用掉inode与block&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;symbolic link是可以连接目录的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;命令:&lt;code&gt;ln -s /etc/crontab crontab2&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ln命令默认是创建hard link，加上&lt;code&gt;-s&lt;/code&gt;时，是创建symbolic link&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-24&quot;&gt;磁盘的分区、格式化、检验与挂载&lt;/h2&gt;

&lt;p&gt;为系统新增一个硬盘时，有以下动作需要完成&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对磁盘分区，以新建可用的分区&lt;/li&gt;
  &lt;li&gt;对该分区进行格式化(format),以创建系统可用的文件系统&lt;/li&gt;
  &lt;li&gt;对刚才新建好的文件系统进行检验&lt;/li&gt;
  &lt;li&gt;在Linux系统上，需要创建挂载点(也即是目录)，并将它挂在上来&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;fdisk&quot;&gt;磁盘分区:fdisk&lt;/h3&gt;

&lt;p&gt;fdisk只有root才能执行&lt;/p&gt;

&lt;h3 id=&quot;section-25&quot;&gt;磁盘挂载与卸载&lt;/h3&gt;

&lt;p&gt;进行挂载之前，最好要确定几件事情:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单一文件系统不应该被重复挂载在不同的挂载点(目录)中&lt;/li&gt;
  &lt;li&gt;单一目录不应该重复挂载多个文件系统&lt;/li&gt;
  &lt;li&gt;作为挂载点的目录理论上应该是空目录才行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你要用来挂载的目录里面并不是空的，那么挂载的文件系统之后，原目录下的东西就会暂时消失，被隐藏掉了，但不是被覆盖，新分区卸载之后，原来数据会再次显示出来。&lt;/p&gt;

&lt;p&gt;mount:挂载
umount:卸载&lt;/p&gt;

&lt;h2 id=&quot;section-26&quot;&gt;设置开机挂载&lt;/h2&gt;

&lt;h3 id=&quot;etcfstabetcmtab&quot;&gt;开机挂载/etc/fstab及/etc/mtab&lt;/h3&gt;

&lt;p&gt;系统挂载的限制:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根目录/是必须挂载的，而且一定要先于其他mount point被挂载进来&lt;/li&gt;
  &lt;li&gt;其他挂载点必须为已新建的目录，可任意指定，但一定要遵守必须的系统目录架构原则&lt;/li&gt;
  &lt;li&gt;所有挂载点在同一时间之内，只能挂载一次&lt;/li&gt;
  &lt;li&gt;所有分区在同一时间之内，只能挂载一次&lt;/li&gt;
  &lt;li&gt;如若进行挂载，你必须现将工作目录移到挂载点之外&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/etc/fstab中的内容:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Devic&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Mount point&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;filesystem&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;parameters&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;dump&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;fsck&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LABEL=/1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ext3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;defaults&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LABEL=/home&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/home&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ext3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;defaults&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;LABEL=/boot&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/boot&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ext3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;defaults&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这六个字段非常重要&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一列&lt;/strong&gt;:磁盘设备文件名或设备的Label
&lt;strong&gt;第二列&lt;/strong&gt;:挂载点
&lt;strong&gt;第三列&lt;/strong&gt;:磁盘分区的文件系统
&lt;strong&gt;第四列&lt;/strong&gt;:文件系统参数
&lt;strong&gt;第五列&lt;/strong&gt;:能否被dump备份命令作用。0代表不要被dump备份，1代表要每天进行dump操作，2代表其他不定日期的dump备份操作
&lt;strong&gt;第六列&lt;/strong&gt;:是否以fsck检验扇区。0代表不要检验，1表示最早检验，2也是代表要检验，不过1会比较早被检验。通常根目录是1，其他是2就可以了。&lt;/p&gt;

&lt;h2 id=&quot;section-27&quot;&gt;内存交换空间&lt;/h2&gt;

&lt;p&gt;一共有三种方式来创建swap:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;装系统时就设置好&lt;/li&gt;
  &lt;li&gt;设置一个swap分区&lt;/li&gt;
  &lt;li&gt;创建一个虚拟内存的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;swap&quot;&gt;使用物理分区构建swap&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;分区&lt;/strong&gt;:先使用fdisk在你的磁盘中分出一个分区给系统作为swap。由于Linux的fdisk默认会将分区的ID设置为Linux的文件系统，所以你可能还得要设置一下system ID就是了。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;格式化&lt;/strong&gt;:利用新建swap格式的&amp;rdquo;mkswap 设备文件名&amp;rdquo;就能够格式化分区成为swap格式&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;:最后将该swap设备启动，方法为&amp;rdquo;swapon 设备文件名&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;查看&lt;/strong&gt;:最终通过free命令来查看内存的使用情况&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;swap-1&quot;&gt;使用文件构建swap&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;使用dd命令新增一个大容量的文件&lt;/li&gt;
  &lt;li&gt;使用mkswap将这个文件格式化为swap的文件格式&lt;/li&gt;
  &lt;li&gt;使用swapon来启动这个swap&lt;/li&gt;
  &lt;li&gt;使用swapoff关掉swap file&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-28&quot;&gt;文件与文件系统的压缩与打包&lt;/h1&gt;

&lt;h2 id=&quot;linux-12&quot;&gt;Linux系统常见的压缩命令&lt;/h2&gt;

&lt;p&gt;常见的压缩文件扩展名:
*.z					compress程序压缩的文件
*.gz				gzip程序压缩的文件(&lt;strong&gt;常用&lt;/strong&gt;)
*.bz2				bzip2程序压缩的文件(&lt;strong&gt;常用&lt;/strong&gt;)
*.tar				tar程序打包的数据，并没有压缩过
*.tar.gz		tar程序打包的文件，其中经过gzip的压缩
*.tar.bz2		tar程序打包的文件，其中经过bzip2的压缩&lt;/p&gt;

&lt;h3 id=&quot;gzipzcat&quot;&gt;gzip,zcat&lt;/h3&gt;

&lt;p&gt;目前gzip可以解开compress、zip与gzip等软件所压缩的文件。
gzip所新建的文件的后缀名是.gz
另外值得一说的是，使用gzip压缩的文件能在Windows系统中被winRAR解压缩
&lt;strong&gt;注意:默认情况下使用gzip压缩之后，源文件就不存在了&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;bzip2bzcat&quot;&gt;bzip2,bzcat&lt;/h3&gt;

&lt;p&gt;gzip是用来替代compress的，而bzip2是用来替代gzip的，它比gzip还要好用。
用法和gzip几乎一样&lt;/p&gt;

&lt;h2 id=&quot;tar&quot;&gt;打包命令:tar&lt;/h2&gt;

&lt;p&gt;gzip和bzip2只能压缩单个文件，不能压缩多个文件，此时为了能把多个文件压缩到一起，要使用tar命令。
tar命令可以将多个目录或文件打包成一个大文件，同时还可以通过gzip/bzip2的支持，将该文件同时进行压缩。&lt;/p&gt;

&lt;p&gt;最简单的使用tar就只要记忆下面的方式即可:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;压缩:&lt;code&gt;tar -jcv -f filename.tar.bz2&lt;/code&gt;+要被压缩的文件或目录名称&lt;/li&gt;
  &lt;li&gt;查询:&lt;code&gt;tar -jtv -f filename.tar.bz2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;解压缩:&lt;code&gt;tar -jxv -f filename.tar.bz2 -C&lt;/code&gt;+欲解压缩的目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意，命令中的&lt;code&gt;-f filename&lt;/code&gt;必须紧紧连在一起，-f的位置不能和其他参数交换&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-29&quot;&gt;光盘写入工具&lt;/h2&gt;

&lt;p&gt;在命令行中实现刻录行为，通常的做法是这样的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;先将所需要备份的数据构建成为一个镜像文件(iso)，利用mkisofs命令来处理&lt;/li&gt;
  &lt;li&gt;将该镜像文件刻录至光盘或DVD当中，利用cdrecord命令来处理&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;vim&quot;&gt;vim程序编辑器&lt;/h1&gt;

&lt;p&gt;这部分内容之前已经学过了，这里不再重复了。&lt;/p&gt;

&lt;h1 id=&quot;bash&quot;&gt;认识与学习bash&lt;/h1&gt;

&lt;h2 id=&quot;bashshell&quot;&gt;认识bash这个shell&lt;/h2&gt;

&lt;h3 id=&quot;shell&quot;&gt;硬件、内核shell&lt;/h3&gt;

&lt;p&gt;我们必须通过&amp;rdquo;Shell&amp;rdquo;将我们输入的命令与内核通信，好让内核可以控制硬件来正确无误地工作
其实Shell的功能只是提供用户操作系统一个接口。&lt;/p&gt;

&lt;p&gt;每个用户都可以设置自己的所有使用的shell版本，这个信息是存储在&lt;code&gt;/etc/passwd&lt;/code&gt;中的，系统默认采用是的bash，但是是可以修改的。&lt;/p&gt;

&lt;p&gt;系统合法的shell均写在&lt;code&gt;/etc/shells&lt;/code&gt;中&lt;/p&gt;

&lt;h3 id=&quot;bash-shell&quot;&gt;bash shell的功能&lt;/h3&gt;

&lt;p&gt;bash中的命令历史是存储在用户主文件夹的.bash_history中，不过需要注意的是，~./bash_history中记录的是前一次登陆以前所执行过的命令，而至于这一次登陆所执行的命令都被暂存在临时内存中，当你成功注销系统后，该命令记忆才会记录到.bash_history当中&lt;/p&gt;

&lt;p&gt;通过type命令我们可以知道每个命令是否为bash的内置命令&lt;/p&gt;

&lt;p&gt;在bash中可以通过&amp;rdquo;[Enter]&amp;rdquo;来对[Enter]进行转义&lt;/p&gt;

&lt;h2 id=&quot;shell-1&quot;&gt;Shell的变量功能&lt;/h2&gt;

&lt;h3 id=&quot;echounset&quot;&gt;变量的显示与设置:echo,unset&lt;/h3&gt;

&lt;p&gt;变量的显示:echo   echo ${}&lt;/p&gt;

&lt;p&gt;变量的修噶:直接用&amp;rdquo;=&amp;rdquo;连接变量与它的内容			myname=flyway&lt;/p&gt;

&lt;p&gt;变量设置的规则:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;变量与变量内容以一个等号&amp;rdquo;=&amp;rdquo;来连接&lt;/li&gt;
  &lt;li&gt;等号两边不能直接接空格&lt;/li&gt;
  &lt;li&gt;变量名称只能是英文字母与数字，但是开头字符不能是数字&lt;/li&gt;
  &lt;li&gt;变量内容若有空格符可使用双引号或单引号将变量内容结合起来
     &lt;code&gt;var=&quot;lang is $LANG&quot;&lt;/code&gt;     那么&lt;code&gt;echo $var&lt;/code&gt;可得&amp;rdquo;lang is en_US&amp;rdquo;
     &lt;code&gt;ar='lang is $LANG'&lt;/code&gt;      那么&lt;code&gt;echo $var&lt;/code&gt;可得&amp;rdquo;lang is $LANG&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;可用转义字符&amp;rdquo;&quot;将特殊符号编程一般字符&lt;/li&gt;
  &lt;li&gt;在一串命令中，还需要通过其他命令提供的信息，可以使用反单引号&amp;rdquo;&lt;code&gt;命令&lt;/code&gt;&amp;ldquo;或&amp;rdquo;$(命令)&amp;rdquo;。
     &lt;code&gt;version=$(unname -r)&lt;/code&gt;	再	&lt;code&gt;echo $version&lt;/code&gt;	可得 &amp;ldquo;2.6.18-128.el5&amp;rdquo;&lt;/li&gt;
  &lt;li&gt;若该变量为了增加变量内容时，则可用$(变量)或&amp;rdquo;$变量名称&amp;rdquo;累加内容&lt;code&gt;echo $var&lt;/code&gt;
     &lt;code&gt;PATH=&quot;$PATH&quot;:/home/bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;若该变量需要其他其他子进程执行，则需要以export来是变量变成环境变量:
     &lt;code&gt;export PATH&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;通常大写字符为系统默认变量，自行设置变量可以使用小写字符，方便判断&lt;/li&gt;
  &lt;li&gt;取消变量的方法为使用&amp;rdquo;unset 变量名称&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-30&quot;&gt;环境变量的功能&lt;/h3&gt;

&lt;p&gt;系统中的变量一般可以分为三种:系统环境变量、与bash接口有关的变量和用户自定义变量&lt;/p&gt;

&lt;p&gt;env可以用来查看环境变量与常见环境变量说明&lt;/p&gt;

&lt;p&gt;环境变量的分析:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HOME:代表用户的主文件夹&lt;/li&gt;
  &lt;li&gt;SHELL:它说明了当前这个环境使用的shell是哪个程序。Linux默认使用/bin/bash的&lt;/li&gt;
  &lt;li&gt;HISTSIZE:我们曾今执行过的命令可以被系统记录下来，而记录的&amp;rdquo;条数&amp;rdquo;则是由这个值来设置的。&lt;/li&gt;
  &lt;li&gt;MAIL:使用mail命令在收信时系统会去读取的邮件信箱文件(mailbox)&lt;/li&gt;
  &lt;li&gt;PATH:执行文件查找的路径，目录与目录之间用冒号&amp;rdquo;:&amp;rdquo;隔开，由于文件的查找是依序由PATH的变量内的目录来查询，所以目录顺序也是重要的。&lt;/li&gt;
  &lt;li&gt;LANG:语系数据，这很重要。中文编码通常是zh_CN.gb2312或者是zh_CN.UTF-8&lt;/li&gt;
  &lt;li&gt;RANDOM:&amp;rdquo;随机数&amp;rdquo;的变量，随机数生成器，生成介于0~32767之间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以用set查看所有的变量,包含环境变量、与bash接口有关的变量和自定义变量
其中比较重要的有以下几个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;PS1(提示符的设置)
      这个东西就是我们的&amp;rdquo;命令提示符&amp;rdquo;,当我们每次按下[Enter]按键去执行某个命令后，最后要再次出现提示符时，就会主动去读取这个变量值。变量值中符号的意义:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;\d&lt;/code&gt;:可显示出&amp;rdquo;星期月日&amp;rdquo;的日期格式，如&amp;rdquo;Mon Feb 2&amp;rdquo;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\H&lt;/code&gt;:完整的主机名&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\h&lt;/code&gt;:仅取主机名的在第一个小数点之前的名字&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\t&lt;/code&gt;:显示时间,为24小时格式的&amp;rdquo;HH:MM:SS&amp;rdquo;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\T&lt;/code&gt;:显示时间,为12小时格式的&amp;rdquo;HH:MM:SS&amp;rdquo;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\A&lt;/code&gt;:显示时间,为24小时格式的&amp;rdquo;HH:MM&amp;rdquo;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\@&lt;/code&gt;:显示时间,为12小时格式的&amp;rdquo;am/pm&amp;rdquo;样式&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\u&lt;/code&gt;:目前用户的账号名称&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\w&lt;/code&gt;:BASH的版本信息&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\W&lt;/code&gt;:完整的工作目录名称，由根目录写起的目录名称。但主文件夹会以~替代&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\#&lt;/code&gt;:利用basename函数取得工作目录名称，所以仅会列出最后一个目录名&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;\$&lt;/code&gt;:提示符，如果是root时，提示符为#，否则就是$&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;$(关于shell的PID)
  &lt;code&gt;$&lt;/code&gt;本身也是变量，这个代表的是目前这个Shell的线程代号，即所谓的PID。&lt;/li&gt;
  &lt;li&gt;？(关于上个执行命令的回传码)
  在bash里这个变量很重要，这个变量是上一个执行的命令所回传的值。当我们执行某个命令时，这些命令会回传一个执行后的代码。一般来说，如果成功执行该命令，则会回传一个0值。&lt;/li&gt;
  &lt;li&gt;OSTYPE,HOSTTYPE,MACHTYPE(主机硬件与内核的等级)
      32位CPU:i386、i586、i586、
      64位CPU:x86_64&lt;/li&gt;
  &lt;li&gt;export:自定义变量转换成环境变量
      &lt;strong&gt;子进程仅会继承父进程的环境变量，子进程不会继承父进程的自定义变脸&lt;/strong&gt;
      可以通过export命令来将一个自定义变量转变为环境变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;locale&quot;&gt;影响显示结果的语系变量(locale)&lt;/h3&gt;

&lt;p&gt;locale:表示用户的语言环境,不仅仅是指编码方式。locale包含很多习惯定义，一共有十二类:
- LC_CTYPE:字符(文字)辨识的编码
- LC_NUMERIC:数字系统显示的信息
- LC_TIME:时间系统的显示数据
- LC_COLLATE:字符串的比较和排序习惯
- LC_MONETARY:货币格式的显示
- LC_MESSAGES:信息提示，主要是菜单、错误信息等
- LC_NAME:姓名书写方式
- LC_ADDRESS:地址书写方式
- LC_TELEPHONE:电话号码的书写方式
- LC_MEASUREMENT:度量衡表达方式
- LC_PAPER:默认纸张尺寸的大小
- LC_IDENTIFICATION:对locale自身包含信息的概述&lt;/p&gt;

&lt;p&gt;系统所支持的locale文件放置在&lt;code&gt;/usr/share/i18n/locales&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;可以通过locale列出当前系统所支持的语系,当前所使用的语系文件都放置在&lt;code&gt;/usr/lib/locale/&lt;/code&gt;目录中&lt;/p&gt;

&lt;p&gt;整体系统默认的语系定义在&lt;code&gt;/etc/sysconfig/i18n&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;可以修改当前系统的locale，修改其十二个类别，然后重新生成当前系统所使用的语系文件，覆盖&lt;code&gt;/usr/lib/locale/&lt;/code&gt;中的语系文件&lt;/p&gt;

&lt;h3 id=&quot;section-31&quot;&gt;变量的有效范围&lt;/h3&gt;

&lt;p&gt;基本上可以这么理解:&lt;/p&gt;

&lt;p&gt;环境变量=全局变量
自定义变量=局部变量&lt;/p&gt;

&lt;h3 id=&quot;readarraydeclare&quot;&gt;变量键盘读取、数组与声明:read,array,declare&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;read&lt;/strong&gt;&lt;br /&gt;
read [-pt] variable
读取来自键盘输入的变量
-p:后面可以接提示符
-t:后面可以接等待的秒数，不会一直等待用户&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;declare/tepeset&lt;/strong&gt;&lt;br /&gt;
declare [-aixr] variable
声明变量的类型
-a:将变量定义成为数组
-i:将变量定义成为整数数字
-x:用法与export相同，将后面的变量编程环境变量
-r:将变量设置成readonly类型，该变量不可被更改内容，也不能重设&lt;/p&gt;

&lt;p&gt;在默认情况下，bash对于变量有几个基本的定义:
- 变量类型默认为&amp;rdquo;字符串&amp;rdquo;
- bash环境中的数值运算，默认最多仅能到达整数类型&lt;/p&gt;

&lt;h3 id=&quot;ulimit&quot;&gt;与文件系统及程序的限制关系:ulimit&lt;/h3&gt;

&lt;p&gt;我们的bash是可以限制用户的某些系统资源的，包括可以打开的文件数量、可以使用的CPU时间、可以使用的内存总量等。
可以使用ulimit进行设置。&lt;/p&gt;

&lt;h3 id=&quot;section-32&quot;&gt;变量内容的删除、替代与替换&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;删除与替换&lt;/strong&gt;
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
|  变量设置方式                |                 说明                                           |
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|
|  ${变量#关键字}              |  若变量内容从头开始的数据符合&amp;rdquo;关键字&amp;rdquo;，则将符合的最短数据删除  |
|  ${变量##关键字}             |  若变量内容从头开始的数据符合&amp;rdquo;关键字&amp;rdquo;，则将符合的最长数据删除  |
|  ${变量%关键字}              |  若变量内容从尾向前的数据符合&amp;rdquo;关键字&amp;rdquo;，则将符合的最短数据删除  |
|  ${变量%%关键字}             |  若变量内容从尾向前的数据符合&amp;rdquo;关键字&amp;rdquo;，则将符合的最长数据删除  |
|  ${变量/旧字符串/新字符串}   |  若变量内容符合&amp;rdquo;旧字符串&amp;rdquo;，则第一个旧字符串会被新字符串替换    |
|  ${变量//旧字符串/新字符串}  |  若变量内容符合&amp;rdquo;旧字符串&amp;rdquo;，则全部的旧字符串会被新字符串替换    |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;替代&lt;/strong&gt;
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
|  变量设置方式      |  str没有设置         |  str为空字符串       |  str已设置非空字符串  |
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
|  var=${str-expr}   |  var=expr            |  var=                |  var=$str             |
|  var=${str:-expr}  |  var=expr            |  var=expr            |  var=$str             |
|  var=${str+expr}   |  var=                |  var=expr            |  var=expr             |
|  var=${str:+expr}  |  var=                |  var=                |  var=expr             |
|  var=${str=expr}   |  var=expr\str=expr  |  str不变\var=       |  str不变\var=$str    |
|  var=${str:=expr}  |  var=expr\str=expr  |  var=expr\str=expr  |  str不变\var=$str    |
|  var=${str?expr}   |  expr输出至stderr    |  var=                |  var=str              |
|  var=${str:?expr}  |  expr输出至stderr    |  expr输出至stderr    |  var=str              |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;

&lt;h2 id=&quot;section-33&quot;&gt;命令别名与历史命令&lt;/h2&gt;

&lt;h3 id=&quot;aliasunslias&quot;&gt;命令别名设置:alias,unslias&lt;/h3&gt;

&lt;p&gt;alias 别名=&amp;rdquo;命令 参数&amp;rdquo;&lt;/p&gt;

&lt;p&gt;别名可以替代现有命令，也可以创造新命令。用于简便地输入长命令。例如
- alias shutdown=&amp;rdquo;shutdown -h now&amp;rdquo;
- alias rm=&amp;rdquo;rm -i&amp;rdquo;
- alias ll=&amp;rdquo;ls -al&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&quot;history&quot;&gt;history&lt;/h3&gt;
&lt;p&gt;可以通过history命令列出之前所有的历史命令&lt;/p&gt;

&lt;h2 id=&quot;bash-shell-1&quot;&gt;Bash Shell的操作环境&lt;/h2&gt;

&lt;h3 id=&quot;section-34&quot;&gt;路径与命令查找顺序&lt;/h3&gt;

&lt;p&gt;同一个命令被执行的顺序:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以相对/绝对路径执行命令，例如&lt;code&gt;/bin/ls&lt;/code&gt;或&lt;code&gt;./ls&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;由alias找到该命令来执行&lt;/li&gt;
  &lt;li&gt;由bash内置的命令来执行&lt;/li&gt;
  &lt;li&gt;通过$PATH这个变量的顺序找到第一个命令来执行&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;bashetcissueetcmotd&quot;&gt;bash的登录与欢迎信息:&lt;code&gt;/etc/issue&lt;/code&gt;,&lt;code&gt;/etc/motd&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;登录界面的字符串是写在&lt;code&gt;/etc/issue&lt;/code&gt;中的，这个文件内容可以使用反斜杠作为变量调用:
|&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
|:&amp;mdash;-:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|
|  \d  |  本地端时间的日期  													 |
|  \l  |  显示第几个终端机接口                         |
|  \m  |  显示硬件的等级(i386/i486/i586/i686&amp;hellip;)       |
|  \n  |  显示主机的网络名称                           | 
|  \o  |  显示domain name                              |
|  \r  |  操作系统的版本(相当于uname -r)               | 
|  \t  |  显示本地端时间的时间                         | 
|  \s  |  操作系统的名称                               |
|  \v  |  操作系统的版本                               |
|&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
当使用telnet远程连接主机的时候，主机的登陆界面就会显示&lt;code&gt;/issue.net&lt;/code&gt;而不是&lt;code&gt;/etc/issue&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果想要让用户登陆后取得一些信息，例如你想要让大家都知道的信息，那么可以将信息写入到&lt;code&gt;/etc/motd&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;bash-1&quot;&gt;bash的环境配置文件&lt;/h3&gt;

&lt;p&gt;bash在启动时直接读取一些配置文件，以规划好bash的操作环境
之前谈到的命令别名、自定义变量在你注销bash之后就会失效，所以如果想要保留你的设置，就得要将这些设置写入配置文件才行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;login与non-login shell&lt;/strong&gt;
login shell:取得bash时需要完整的登录流程
non-login shell:取得bash接口的方法不需要重复登录的举动，例如在X Window登陆后再以X的图形界面启动终端机&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;login shell&lt;/strong&gt;
一般来说，login shell其实只会读取两个配置文件:
1. &lt;code&gt;/etc/profile&lt;/code&gt;:这是系统整体的设置，最好不要修改这个文件
2. &lt;code&gt;~/.bash_profile&lt;/code&gt;或&lt;code&gt;~/.bash_login&lt;/code&gt;或&lt;code&gt;~/.profile&lt;/code&gt;:属于用户个人设置，你要改自己的数据，就写入这里&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/profile&lt;/code&gt;&lt;/strong&gt;
这是每个用户登陆取得bash时一定会读取的配置文件
这个文件设置的变量主要有:
PATH:会依据UID决定PATH变量要不要含有sbin系统命令目录
MAIL:依据账号设置好用户的mailbox到&lt;code&gt;/var/spool/mail/账号名&lt;/code&gt;
USER:根据用户的账号设置此变量内容
HOSTNAME:依据主机的hostname命令决定此变量内容
HISTSIZE:历史命令记录条数。
&lt;code&gt;/etc/profile&lt;/code&gt;还会去调用外部的设置数据&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt;(login shell才会读)&lt;/strong&gt;
bash在读完了整体环境配置的&lt;code&gt;/etc/profile&lt;/code&gt;并借此调用其他配置文件后，接下来则是会读取用户的个人配置文件。在login shell的bash环境中，所读取的个人偏好配置文件其实主要有三个，依序分别是:
1. ~/.bash_profile
2. ~/.bash_login
3. ~/.profile
其实bash的login shell只会读取上面三个文件的其中一个，而读取的顺序则是依照上面的顺序&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;source:读入环境配置文件的命令&lt;/strong&gt;
可以通过&lt;code&gt;source 配置文件名&lt;/code&gt;的方式来将配置文件读入到bash中，而不需要重新登录&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~/.bashrc(non-lgoin shell会读)&lt;/strong&gt;
当以non-login shell登陆时，bash还会主动调用&lt;code&gt;/etc/bashrc&lt;/code&gt;文件，这个文件帮我们定义了下面的数据:
- 依据不同的UID规定umask的值
- 依据不同的UID规定提示符(就是PS1变量)
- 调用/etc/profile.d/*.sh的设置&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;其他相关的配置文件&lt;/strong&gt;
- &lt;code&gt;/etc/man.config&lt;/code&gt;:这个文件的内容规定了使用man的时候man page的路径到哪里去寻找
- &lt;code&gt;~/.bash_histroy&lt;/code&gt;:历史命令记录的地方
- &lt;code&gt;~/.bash_logout&lt;/code&gt;:记录了当我注销bash后系统再帮我做完师门操作后才离开&lt;/p&gt;

&lt;h3 id=&quot;sttyset&quot;&gt;终端机的环境设置:stty,set&lt;/h3&gt;

&lt;p&gt;我们可以利用&lt;code&gt;stty -a&lt;/code&gt;来列出目前环境中所有的按键列表,注意，如果出现&lt;code&gt;^&lt;/code&gt;，则表示[Ctrl]那个按键的意思
几个重要的代表意义是:
- eof:End of File的意思，代表结束输入
- erase:向后删除字符
- intr:送出一个interrupt(中断)的信号给目前正在运行的程序
- kill:删除目前命令行上的所有文字
- quit:送出一个quit信号给目前正在运行的进程
- start:在某个进程停止后，重新启动它的输出
- stop:停止目前屏幕的输出
- susp:送出一个terminal stop的信号格正在运行的进程&lt;/p&gt;

&lt;h3 id=&quot;section-35&quot;&gt;通配符与特殊符号&lt;/h3&gt;
&lt;p&gt;|&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
| 符号  |           意义                                   |
|:&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|
|  *    |  代表0个到无穷多个任意字符                       |
|  ？   |  代表一定有一个任意字符                          |
|  []   |  同样代表一定有一个在中括号内的字符(非任意字符)  |
|  [-]  |  代表在编码顺序内的所有字符                      |
|  [^]  |  逆向选择                                        |
|&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;

&lt;p&gt;bash中的特殊符号,理论上你的&amp;rdquo;文件名&amp;rdquo;尽量不要使用到上述的字符&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;符号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;内容&lt;/th&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;#&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;批注符号,这个最常被使用在script中，视为说明，其后的数据均不执行&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;\&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;转义符号,将&amp;rdquo;特殊字符或通配符&amp;rdquo;还原成一般字符&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;管道(pipe)，分隔两个管道命令的界定&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;连续命令执行分隔符，连续性命令的界定(注意，与管道命令并不相同)&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;~&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户主文件夹&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;使用变量前导符，即是变量之前需要加的变量替代值&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;amp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;作业控制(job control),将命令变成背景下工作&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;!&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;逻辑运算意义上的&amp;rdquo;非&amp;rdquo;(not)的意思&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;目录符号，路径分隔的符号&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt;,&amp;raquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据流重定向，输出导向，分别是&amp;rdquo;替换&amp;rdquo;与&amp;rdquo;累加&amp;rdquo;&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;,&amp;laquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;数据流重定向，输入导向&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;rsquo;&amp;rsquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;单引号，不具有变量置换的功能&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;rdquo;&amp;rdquo;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;具有变量置换的功能&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;``&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;两个&amp;rdquo;`&amp;ldquo;中间为可以先执行的命令，也可以使用$()&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;()&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在中间为子shell的起始与结束&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;{}&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;在中间为命令块的组合&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-36&quot;&gt;数据流重定向&lt;/h2&gt;

&lt;h3 id=&quot;section-37&quot;&gt;什么是数据流重定向&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;standard output&lt;/strong&gt;:命令所回传的正确的信息
&lt;strong&gt;standard error output&lt;/strong&gt;:命令执行失败后，所回传的错误信息&lt;/p&gt;

&lt;p&gt;数据流重定向可以将standard output与standard error output分别传送到其他的文件或设备去&lt;/p&gt;

&lt;p&gt;重定向的特殊字符:
1. 标准输入(stdin):代码为0，使用&amp;lt;或&amp;laquo;
2. 标准输出(stdout):代码为1，使用&amp;gt;或&amp;raquo;
3. 标准错误输出(stderr):代码为2，使用2&amp;gt;或2&amp;raquo;&lt;/p&gt;

&lt;p&gt;重定向文件的创建方式:
1. 该文件若不存在，系统会自动将它创建
2. 当这个文件存在时，若使用的是&amp;gt;或2&amp;gt;，则系统会将这个文件清空，然后再将数据写入
3. 若使用的是&amp;raquo;或2&amp;raquo;，则系统会在这个文件的最下方追加进去&lt;/p&gt;

&lt;p&gt;例子:
ll / &amp;gt; ~/rootfile&lt;/p&gt;

&lt;p&gt;总结:
- 1&amp;gt;:以覆盖的方式将正确的数据输出到指定的文件或设备上
- 1&amp;raquo;:以累加的方式将正确的数据输出到指定的文件或设备上
- 2&amp;gt;:以覆盖的方式将错误信息的数据输出到指定的文件或设备上
- 2&amp;raquo;:以累加的方式将错误信息的数据输出到指定的文件或设备上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;黑洞&lt;/strong&gt;
可以将需要忽略的信息输出导向到&lt;code&gt;/dev/null&lt;/code&gt;中，这个&lt;code&gt;/dev/null&lt;/code&gt;可以吃掉任何导向这个设备的信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;写入到同一个文件&lt;/strong&gt;
如果要将正确的返回数据和错误信息的数据写入到同一个文件中，但又没有使用特殊的语法，此时两条数据可能会交叉写入该文件内，造成次序的混乱&lt;/p&gt;

&lt;p&gt;find /home -name .bashrc &amp;gt; list 2&amp;gt; list    #错误
find /home -name .bashrc &amp;gt; list 2&amp;gt;&amp;amp;1       #正确
find /home -name .bashrc &amp;amp;&amp;gt; list           #正确&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重定向的使用情况&lt;/strong&gt;
- 屏幕输出信息很重要，而且我们需要将它保存下来的时候
- 后台执行中的程序，不希望它干扰屏幕正常的输出结果时
- 一些系统的例行命令的执行结果，希望它可以存下来时
- 一些执行命令的可能已知错误信息时，想用&lt;code&gt;2&amp;gt; /dev/null&lt;/code&gt;将它丢掉时
- 错误信息与正确信息需要分别输出时&lt;/p&gt;

&lt;h3 id=&quot;section-38&quot;&gt;命令执行的判断依据:;,&amp;amp;&amp;amp;,||&lt;/h3&gt;

&lt;p&gt;不考虑命令相关性的连续命令执行可以使用分号来分隔命令&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$?命令回传码与&amp;amp;&amp;amp;或||&lt;/strong&gt;
若前一个命令执行的结果为正确，在Linux下面会回传一个$?=0的值，那么我们可以通过这个变量来判断命令是否被正确执行。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;命令执行情况&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cmd1 &amp;amp;&amp;amp; cmd2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;若cmd1执行完毕且正确执行($?=0),则开始执行cmd2\若cmd1执行完毕且为错误($?!=0),则cmd2不执行&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cmd1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;cmd2&lt;/td&gt;
      &lt;td&gt;若cmd1执行完毕且正确执行($?=0),则cmd2不执行\若cmd1执行完毕且为错误($?!=0),则开始执行cmd2&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;注意&lt;/strong&gt;:&amp;amp;&amp;amp;与&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;放置的顺序其实是很重要的，因为命令永远是从左往右执行的。通常来说，假设判断式是这样的:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;cmd1 &amp;amp;&amp;amp; cmd2 || cmd3&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-39&quot;&gt;管道命令&lt;/h2&gt;

&lt;p&gt;bash命令执行的时候有输出的数据会出现，那么如果这群数据必须要经过几道手续之后才能得到我们所想要的格式，这就牵涉到管道(pipe)命令了。
管道命令使用的是&amp;rdquo;|&amp;rdquo;这个界定符号&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ls -al /etc | less&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;管道命令&lt;code&gt;|&lt;/code&gt;仅能够处理经由前面一个命令传来的正确信息，也就是standard output的信息，对于standard error 并没有直接处理的能力
每个管道后面接的第一个数据必定是&amp;rdquo;命令&amp;rdquo;，而且这个命令必须要能够接受standard input的数据才行，这样的命令可以是&amp;rdquo;管道命令&amp;rdquo;
管道命令主要有两个需要注意的地方:
- 管道命令仅会处理standard output，对于standard error output会予以忽略
- 管道命令必须要能够接受来自前一个命令的数据成为standard input继续处理才行&lt;/p&gt;

&lt;h3 id=&quot;cutgrep&quot;&gt;选取命令:cut,grep&lt;/h3&gt;

&lt;p&gt;所谓选取命令，就是将一段数据经过分析后，取出我们所想要的，或者是经由分析关键字，取得我们所想要的那一行
不过需要注意的是，一般来说，选取信息通常是针对&amp;rdquo;行&amp;rdquo;来分析的，并不是整篇信息分析的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;cut&lt;/strong&gt;
这个命令可以将一段信息的某一段&amp;rdquo;切&amp;rdquo;出来，处理的信息以&amp;rdquo;行&amp;rdquo;为单位
参数:
-d:后面接分隔字符，与-f一起使用
-f:依据-d的分隔符将一段信息切割成为数段，用-f取出第几段的意思
-c:以字符(characters)的单位取出固定字符区间&lt;/p&gt;

&lt;p&gt;cut主要的用途在于将同一行里面的数据进行分解，最常使用在分析一些数据或文字数据的时候。这是因为有时我们会以某些字符当做切割的参数，然后来将数据加以切割，以取得我们所需要的数据。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;grep&lt;/strong&gt;
&lt;code&gt;grep [-acinv] [--color=auto] '查找字符串' filename&lt;/code&gt;
参数:
-a:将binary文件以text文件的方式查找数据
-c:计算找到&amp;rsquo;查找字符串&amp;rsquo;的次数
-i:忽略大小写的不同，所以大小写视为相同
-n:顺便输出行号
-v:反向选择，即显示出没有&amp;rsquo;查找字符串&amp;rsquo;内容的那一行
&amp;ndash;color=auto:可以将找到的关键字部分加上颜色显示&lt;/p&gt;

&lt;p&gt;grep是一个很棒的命令，grep可以解析一行文字，取得关键字，若该行又存在关键字，就会整行列出来&lt;/p&gt;

&lt;h3 id=&quot;sortwcuniq&quot;&gt;排序命令:sort,wc,uniq&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;sort&lt;/strong&gt;
sort是很有趣的命令，它可以帮我们进行排序，而且可以依据不同的数据类型来排序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uniq&lt;/strong&gt;
uniq可以将重复的数据仅列出一个显示，这个命令用来将重复的行删除掉只显示一个。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;wc&lt;/strong&gt;
这个命令可以帮助我们计算输出的信息的整体数据&lt;/p&gt;

&lt;h3 id=&quot;tee&quot;&gt;双向重定向:tee&lt;/h3&gt;

&lt;p&gt;tee命令会同时将数据流送到文件与大屏幕，而输出到屏幕的，其实就是stdout，可以让下个命令继续处理&lt;/p&gt;

&lt;h3 id=&quot;trcoljoinpasteexpand&quot;&gt;字符转换命令:tr,col,join,paste,expand&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;tr&lt;/strong&gt;
tr可以用来删除一段信息当中的文字，或者是进行文字信息的替换&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;col&lt;/strong&gt;
col命令可以将[tab]按键替换成为空格键。col经常被利用于将man page转存为纯文本文件以方便查阅的功能&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;join&lt;/strong&gt;
将两个文件当中有相同数据的那一行加在一起。需要注意的是，在使用join之前，你所需要处理的文件应该要事先经过排序(sort)处理&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;paste&lt;/strong&gt;
&lt;code&gt;paste&lt;/code&gt;直接将两行贴在一起，且中间以[tab]键隔开&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;expand&lt;/strong&gt;
将[tab]按键转成空格键&lt;/p&gt;

&lt;h3 id=&quot;split&quot;&gt;切割命令:split&lt;/h3&gt;

&lt;p&gt;如果你有文件太大，导致一些携带式设备无法复制的问题，split可以帮你将一个大文件依据文件大小或行数来切割成为小文件，快速又有效&lt;/p&gt;

&lt;p&gt;&lt;code&gt;split [-bl] file PREFIX&lt;/code&gt;
-b:后面可接欲切割的文件大小，可加单位，例如b,k,m等
-l:以行数来进行切割
PREFIX:代表前导符，可作为切割文件的前导文字&lt;/p&gt;

&lt;h3 id=&quot;xargs&quot;&gt;参数代换:xargs&lt;/h3&gt;

&lt;p&gt;这个命令就是在产生某个命令的参数。xarg可以读入stdin的数据，并且以空格符或断行字符进行分辨，将stdin的数据分割成为arguments。因为是以空格符作为分隔，所以，如果有一些文件名或者是其他意义的名词内含有空格符的时候，xargs可能就会误判&lt;/p&gt;

&lt;h3 id=&quot;section-40&quot;&gt;关于减号-的用途&lt;/h3&gt;

&lt;p&gt;某些命令需要用到文件名来进行处理，该stdin与stdout可以利用减号&amp;rdquo;-&amp;ldquo;来替代&lt;/p&gt;

&lt;h1 id=&quot;section-41&quot;&gt;正则表达式与文件格式化处理&lt;/h1&gt;

&lt;h2 id=&quot;section-42&quot;&gt;前言:什么是正则表达式&lt;/h2&gt;

&lt;p&gt;正则表达式就是处理字符串的方法，它是以行为单位来进行字符串的处理行为，正则表达式通过一些特殊符号的辅助，可以让用户轻易达到查找、删除、替换某特定字符串的处理程序
正则表达式基本上是一种&amp;rdquo;表示法&amp;rdquo;，只要工具程序支持这种表示法，那么该工具程序就可以用来作为正则表达式的字符串处理之用
正则表达式的字符串表示方式依照不同的严谨度而分为基础正则表达式与扩展正则表达式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:正则表达式和通配符是完全不一样的东西，通配符代表的是bash接口的一个功能，而正则表达式则是一种字符串处理的表示方式&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-43&quot;&gt;基础正则表达式&lt;/h2&gt;

&lt;p&gt;既然正则表达式是处理字符串的一种表示方式，那么对字符排序有影响的语系数据就会对正则表达式的结果有影响！&lt;/p&gt;

&lt;h3 id=&quot;section-44&quot;&gt;语系对正则表达式的影响&lt;/h3&gt;

&lt;p&gt;使用正则表达式时，需要特别留意当时环境的语系为何，否则可能会发现与别人不相同的选取结果&lt;/p&gt;

&lt;p&gt;特殊符号:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;特殊符号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代表意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:alnum:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表英文大小写字符及数字，即0-9,A-Z,a-z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:alpha:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表任何英文大小写字符，即A-Z,a-z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:blank:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表空格键与[Tab]键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:cntrl:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表键盘上面的控制按键，即包括CR,LF,Tab,Del等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:digit:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表数字而已,即0-9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:graph:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;除了空格符(空格键与[Tab])外的其他所有按键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:lower:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表小写字符，即a-z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:print:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表任何可以被打印出来的字符&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:punct:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表标点符号，即&amp;rdquo;&amp;rsquo;?!;:#$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:upper:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表大写字符，即A-Z&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:space:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;任何产生空白的字符，包括空格键[Tab]CR等&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;[:xdigit:]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表十六进制的数字类型，因此包括0-9,A-F,a-f的数字与字符&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-45&quot;&gt;基础正则表达式字符&lt;/h3&gt;

&lt;p&gt;基础的正则表达式特殊字符
|&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
|  RE字符 |                                 意义                                                                        |
|:&amp;mdash;&amp;mdash;-:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|
|  ^word  |  意义:待查找的字符串(word)在行首                                                                            |
|  word$  |  意义:待查找的字符串(word)在行尾                                                                            |
|  .      |  意义:代表一定有一个任意字符串                                                                              |
|  \      |  意义:转义字符，将特殊符号的特殊意义去除                                                                    |
|  *      |  意义:重复零个到无穷多个的前一个字符                                                                        |
| [list]  |  意义:从字符集合的RE字符里面找出想要选取的字符                                                              |
| [n1-n2] |  意义:从字符集合的RE字符里面找出想要选取的字符范围                                                          |
| [^list] |  意义:从字符集合的RE字符里面找出不要的字符串或范围                                                          |
| {n,m} |  意义:连续n到m个的前一个RE字符，若为{n}则是连续n个的前一个RE字符，若为{n}则是连续n个以上的前一个RE字符  |
|&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&lt;/p&gt;

&lt;h3 id=&quot;sed&quot;&gt;sed工具&lt;/h3&gt;

&lt;p&gt;sed本身也是一个管道命令，可以分析standard input的，而且sed还可以将数据进行替换、删除、新增、选取特定行的功能
具体使用方式详见《鸟哥》P357-360&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:grep+sed+正则表达式可以完成很多事情，值得深入学习！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-46&quot;&gt;扩展正则表达式&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RE字符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;意义与范例&lt;/th&gt;
      &lt;th&gt;&amp;nbsp;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;意义:重复一个或一个以上的前一个RE字符&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;意义:零个或一个前一个RE字符&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;nbsp;&lt;/td&gt;
      &lt;td&gt;意义:用或(or)的方法找出数个字符串&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;()&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;意义:找出&amp;rdquo;组&amp;rdquo;字符串&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;()+&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;意义:多个重复组的判别&lt;/td&gt;
      &lt;td&gt;&amp;nbsp;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;code&gt;!&lt;/code&gt;在正则表达式中并不是特殊字符&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-47&quot;&gt;文件的格式化与相关处理&lt;/h2&gt;

&lt;h3 id=&quot;printf&quot;&gt;格式化打印:printf&lt;/h3&gt;

&lt;p&gt;可以使用&lt;code&gt;printf&lt;/code&gt;命令来在屏幕上格式化输出数据，其用法和C语言中的&lt;code&gt;printf&lt;/code&gt;函数差不多，事实上，C语言中就是的输出就是利用这边的&lt;code&gt;printf&lt;/code&gt;命令实现的&lt;/p&gt;

&lt;h3 id=&quot;awk&quot;&gt;awk:好用的数据处理工具&lt;/h3&gt;

&lt;p&gt;相比于&lt;code&gt;sed&lt;/code&gt;常常作用于一整行的处理，&lt;code&gt;awk&lt;/code&gt;则比较倾向于将一行分成数个&amp;rdquo;字段&amp;rdquo;来处理，&lt;code&gt;awk&lt;/code&gt;主要是处理每一行的字段内的数据，而默认的字段的分隔符为空格键或[tab]按键&lt;/p&gt;

&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;的运行模式:
awk &amp;lsquo;条件类型1{动作1}条件类型2{动作2}&amp;hellip;&amp;rsquo; filename&lt;/p&gt;

&lt;p&gt;&lt;code&gt;awk&lt;/code&gt;的内置变量:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;变量名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;代表意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NF&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;每一行($0)拥有的字段总数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;NR&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;目前&lt;code&gt;awk&lt;/code&gt;所处理的是&amp;rdquo;第几行&amp;rdquo;数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;FS&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;目前的分隔符，默认是空格键&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$n&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;代表每一行的第n个字段，其中$0代表一整行的数据&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;section-48&quot;&gt;文件比较工具&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;diff&lt;/code&gt;&lt;/strong&gt;
&lt;code&gt;diff&lt;/code&gt;就是用在比较两个文件之间的区别的，并且是以行为单位的来比较的。一般使用在ASCII纯文本文件的比较上，大部分情况下都是用在同一文件的新旧版本上&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;/strong&gt;
&lt;code&gt;cmp&lt;/code&gt;主要也是比较两个文件，它主要利用&amp;rdquo;字节&amp;rdquo;单位去比较。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;patch&lt;/code&gt;&lt;/strong&gt;
&lt;code&gt;patch&lt;/code&gt;主要是用来将就的文件升级成为新的文件，主要流程是这样的:先比较文件新旧版本的区别(&lt;code&gt;diff&lt;/code&gt;命令)，并将区别文件制作成为补丁文件，再由补丁文件更新旧文件即可。&lt;/p&gt;

&lt;h1 id=&quot;shell-script&quot;&gt;学习shell script&lt;/h1&gt;

&lt;h2 id=&quot;shell-script-1&quot;&gt;什么是shell script&lt;/h2&gt;

&lt;p&gt;shell script是利用shell功能所写的一个&amp;rdquo;程序&amp;rdquo;(program),这个程序是使用纯文本文件,将一些shell的语法与命令(含外部命令)写在里面，搭配正则表达式、管道命令与数据流重定向等功能，以达到我们所想要的处理目的&lt;/p&gt;

&lt;p&gt;shell script用在系统管理上是很好的一项工具，但是用在处理大量数值运算上，就不够好了，因为shell script的速度较慢，且使用的CPU资源较多，造成主机资源的分配不良&lt;/p&gt;

&lt;h3 id=&quot;script&quot;&gt;第一个script的编写与执行&lt;/h3&gt;

&lt;p&gt;在shell script的编写中还需要用到下面的注意事项:
1. 命令的执行时从上而下、从左而右地分析与执行
2. 命令执行时，命令、参数间的多个空白都会被忽略掉
3. 空白行也将被忽略掉，并且[Tab]按键所得的空白同样视为空格键
4. 如果读取到一个Enter符号(CR)，就尝试开始执行该行(或该串)命令
5. 至于如果一行的内容太多，则可以使用&amp;rdquo;[Enter]&amp;rdquo;来扩展至下一行
6. &amp;ldquo;#&amp;rdquo;可作为批注，任何加在&amp;rdquo;#&amp;rdquo;后面的数据将全部视为批注文字而被忽略&lt;/p&gt;

&lt;p&gt;当编写好一个名为&lt;code&gt;/home/dmtsai/shell.sh&lt;/code&gt;的script后，可以通过以下的方法来执行:
- 直接命令执行:
		- 绝对路径:使用&lt;code&gt;/home/dmtsai/shell.sh&lt;/code&gt;来执行命令
		- 相对路径:假设工作目录在&lt;code&gt;/home/dmtsai/&lt;/code&gt;，则使用&lt;code&gt;./shell&lt;/code&gt;来执行
		- 变量&lt;code&gt;PATH&lt;/code&gt;功能&lt;code&gt;:将shell.sh放在&lt;/code&gt;PATH&lt;code&gt;指定的目录内
- 以bash进程来执行:通过&lt;/code&gt;bash shell.sh&lt;code&gt;或&lt;/code&gt;sh shell.sh`来执行&lt;/p&gt;

&lt;p&gt;整个script可以分成数段，大致是这样的:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;第一行&lt;code&gt;#!/bin/bash&lt;/code&gt;声明这个script使用的shell名称
  script中的第一行必须声明这个script所使用的shell名称，否则很可能会无法执行,声明的方式是:&lt;code&gt;#!/bin/bash&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;script内容的说明
  整个script当中，除了第一行的&lt;code&gt;#!&lt;/code&gt;是用来声明shell的之外，其他的#都是批注用途。一般来说，一样要养成说明该script的内容与功能、版本信息、作者与联络方式、建立日期、历史记录等习惯。&lt;/li&gt;
  &lt;li&gt;主要环境变量的声明
  务必要把一些重要的环境变量设置好，&lt;code&gt;PATH&lt;/code&gt;与&lt;code&gt;LANG&lt;/code&gt;是当中最重要的&lt;/li&gt;
  &lt;li&gt;主要程序部分&lt;/li&gt;
  &lt;li&gt;告知执行结果
  我们可以利用&lt;code&gt;exit&lt;/code&gt;这个命令来让程序中断，并且回传一个数值给系统。(其实就是返回值)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;shell-script-2&quot;&gt;编写shell script的良好习惯&lt;/h3&gt;

&lt;p&gt;养成良好的script的编写习惯，在每个script的文件头处记录好:
- script的功能
- script的版本信息
- script的作者与联络方式
- script的版权声明方式
- script的History(历史记录)
- script内较为特殊的命令，使用&amp;rdquo;绝对路径&amp;rdquo;的方式来执行
- script执行时需要的环境变量预先声明与设置&lt;/p&gt;

&lt;h3 id=&quot;shell-script-3&quot;&gt;简单的shell script练习&lt;/h3&gt;

&lt;h3 id=&quot;scriptsourceshscriptscript&quot;&gt;script的执行方式区别(source,shscript,./script)&lt;/h3&gt;

&lt;p&gt;不同的script执行方式会造成不一样的结果。尤其对bash的环境影响很大。脚本的执行方式除了之前谈到的方式，还可以利用source或小数点(.)来执行。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用直接执行的方式来执行script
  当使用之前提到过的方式(不论是绝对路径、相对路径、&lt;code&gt;$PATH&lt;/code&gt;还是利用bash或sh)执行脚本时，该script都会使用一个新的bash环境来执行脚本内的命令，也就是说，使用这种方式时，其实script是在子进程的bash内执行的。重点是，&lt;strong&gt;当子进程完成后，子进程内的各项变量后操作将会结束而不会回传到父进程中&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;利用&lt;code&gt;source&lt;/code&gt;来执行脚本:在父进程中执行
  如果利用&lt;code&gt;source&lt;/code&gt;来执行script的话，script会直接在当前的bash进程中执行。这就是为什么你注销系统而要让某些写入&lt;code&gt;~/.bashrc&lt;/code&gt;设置生效时，需要使用&lt;code&gt;source ~/.bashrc&lt;/code&gt;而不能使用&lt;code&gt;bash ~/.bashrc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-49&quot;&gt;善用判断式&lt;/h2&gt;

&lt;h3 id=&quot;test&quot;&gt;利用test命令的测试功能&lt;/h3&gt;

&lt;p&gt;当我们需要检测系统上面某些文件或者是相关属性时，利用&lt;code&gt;test&lt;/code&gt;这个命令来工作真是好用的不得了
&lt;code&gt;test&lt;/code&gt;有很多测试标志，归纳成下面的表格
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;:|
|  测试的标志     |  代表意义                                                                                                    |
|    -f           |  该文件名是否存在且为文件(file)(常用)                                                                        |
|    -d           |  该文件名是否存在且为目录(directory)(常用)                                                                   |
|    -c           |  该文件名是否存在且为一个character device设备                                                                |
|    -b           |  该文件名是否存在且为一个block device设备                                                                    |
|    -S           |  该文件名是否存在且为一个Socket文件                                                                          |
|    -p           |  该文件名是否存在且为一个FIFO(pipe)文件                                                                      |
|    -L           |  该文件名是否存在且为一个连接文件                                                                            |
|                 |  关于文件的权限检测                                                                                          |
|    -r           |  该文件名是否存在且具有&amp;rdquo;可读&amp;rdquo;的权限                                                                          |
|    -w           |  该文件名是否存在且具有&amp;rdquo;可写&amp;rdquo;的权限                                                                          |
|    -x           |  该文件名是否存在且具有&amp;rdquo;可执行&amp;rdquo;的权限                                                                        |
|    -u           |  该文件名是否存在且具有&amp;rdquo;SUID&amp;rdquo;的属性                                                                          |
|    -g           |  该文件名是否存在且具有&amp;rdquo;SGID&amp;rdquo;的属性                                                                          |
|    -k           |  该文件名是否存在且具有&amp;rdquo;Sticky bit&amp;rdquo;的属性                                                                    |
|    -s           |  该文件名是否存在且为&amp;rdquo;非空白文件&amp;rdquo;                                                                            |
|                 |  两个文件之间的比较                                                                                          |
|    -nt          |  (newer than)判断file1是否比file2新                                                                          |
|    -ot          |  (old than)判断file1是否比file2旧|                                                                           |
|    -et          |  判断file1与file2是否为同一个文件，可用在判断hard link的判定上。主要意义在于判定两个文件是否均指向同一个inode|
|                 |  关于两个整数之间的判定                                                                                      |
|    -eq          |  两数值相等(equal)                                                                                           |
|    -ne          |  两数值不等(not equal)                                                                                       |
|    -gt          |  n1大于n2(greater than)                                                                                      |
|    -lt          |  n1小于n2(less than)                                                                                         |
|    -ge          |  n1大于等于n2(greater than or equal)                                                                         |
|    -le          |  n1小于等于n2(less than or equal)                                                                            |
|                 |  判定字符串的数据                                                                                            |
| Test -z string  |  判定字符串是否为0，若string为空字符串，则为true                                                             |
| Test -n string  |  判定字符串是否非为0，若string为空字符串，则为false 注:-n也可省略                                            |
| test str1=str2  |  判定str1是否等于str2，若相等，则回传true                                                                    |
| Test str1!=str2 |  判定str1是否不等于str2，若相等，则回传false                                                                 |
|                 |  多重条件判定                                                                                                |
|    -a           |  两个条件同时成立！如:&lt;code&gt;test -r file -a -x file&lt;/code&gt;,则file同时具有r与x权限时，才回传true                         |
|    -o           |  任何一个条件成立！                                                                                          |
|    -!           |  反向状态                                                                                                    |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;

&lt;h3 id=&quot;section-50&quot;&gt;利用判断符号[]&lt;/h3&gt;

&lt;p&gt;除了使用test以外，我们还可以利用判断符号&lt;code&gt;[]&lt;/code&gt;来进行数据的判断
在使用判断符&lt;code&gt;[]&lt;/code&gt;时，需要注意的是:
- 在中括号[]内每个组件都需要有空格键来分隔
- 在中括号[]内的变量，最好都以双引号括号起来
- 在中括号[]内的常量，最好都以单或双引号括起来&lt;/p&gt;

&lt;h3 id=&quot;shell-script01&quot;&gt;shell script的默认变量($0,$1&amp;hellip;)&lt;/h3&gt;

&lt;p&gt;可以给一个script设置参数，例如&lt;code&gt;ls -la&lt;/code&gt;一样，在script中可以通过一些默认变量来调用传进来的参数&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;默认变量&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;该脚本的文件名&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$n&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;第n个参数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$#&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;后面接的参数个数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$@&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表&amp;rdquo;$1&amp;rdquo;、&amp;rdquo;$2&amp;rdquo;、&amp;rdquo;$3&amp;rdquo;之意，每个变量是独立的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;$*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表“&amp;rdquo;$1c$2c$3c$4&amp;rdquo;”,其中c为分隔字符，默认为空格&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外&lt;code&gt;shift&lt;/code&gt;可以造成参数变量号码偏移&lt;/p&gt;

&lt;h2 id=&quot;section-51&quot;&gt;条件判断式&lt;/h2&gt;

&lt;h3 id=&quot;ifthen&quot;&gt;利用if&amp;hellip;then&lt;/h3&gt;

&lt;p&gt;判断式如下所示:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;条件一&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
		当条件一成立时，可以进行的命令工作内容
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;条件二&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; 
		当条件二成立时，可以进行的命令工作内容
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		当条件一与条件二均不成立时，可以进行的命令工作内容
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;caseesac&quot;&gt;利用case&amp;hellip;esac&lt;/h3&gt;

&lt;p&gt;语法如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$变&lt;/span&gt;量名称 in			&lt;span class=&quot;c&quot;&gt;#关键字为case，还有变量前有$&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;第一个变量内容&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;#每一个变量内容建议用双引号括起来，关键字则为小括号&lt;/span&gt;
			程序段
			;;							&lt;span class=&quot;c&quot;&gt;#每个类型结尾要使用两个连续的分号来处理&lt;/span&gt;
	&lt;span class=&quot;s2&quot;&gt;&amp;quot;第二个变量内容&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
			程序段
			;;
	*&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;									&lt;span class=&quot;c&quot;&gt;#最后一个变量内容都会用*来代表所有其他值&lt;/span&gt;
			不包含第一个变量内容与第二个变量内容的其他程序执行段
			;;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;									&lt;span class=&quot;c&quot;&gt;#最终的case结尾！&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;function&quot;&gt;利用function功能&lt;/h3&gt;

&lt;p&gt;函数语法格式为&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;fname&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
		程序段
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;由于shell script的执行方式是由上而下、由左而右，因此在shell script当中的function的设置一定要在程序的最前面(其实，简单来说就先定义后使用)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;function也是拥有内置变量的。它的内置变量与shell script很类似，函数名称用$0表示，而后接的变量也是用$1,$2&amp;hellip;来表示的&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;loop&quot;&gt;循环(loop)&lt;/h2&gt;

&lt;h3 id=&quot;section-52&quot;&gt;不定循环&lt;/h3&gt;

&lt;p&gt;不定循环有两种状态:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; condition &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	程序段落
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;说明:当condition条件成立时，就进行循环&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;until&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;condition&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	程序段落
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;说明:当condition条件成立时，就终止循环;否则就持续进行循环的程序段&lt;/p&gt;

&lt;h3 id=&quot;section-53&quot;&gt;固定循环&lt;/h3&gt;

&lt;p&gt;语法是:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;con3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;err&quot;&gt;程序段&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-54&quot;&gt;固定循环的数值处理&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt; 初始值;限制值;执行步长 &lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		程序段
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;shell-script-4&quot;&gt;shell script的追踪与调试&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sh [-nvx] script.sh&lt;/code&gt;
参数:
-n: 不要执行script,仅查询语法的问题
-v: 在执行script前，先将script的内容输出到屏幕上
-x: 将使用到的script内容显示到屏幕上，这是很有用的参数！&lt;/p&gt;

&lt;h1 id=&quot;linuxacl&quot;&gt;Linux账号管理与ACL权限设置&lt;/h1&gt;

&lt;h2 id=&quot;linux-13&quot;&gt;Linux的账号与用户组&lt;/h2&gt;

&lt;h3 id=&quot;uidgid&quot;&gt;用户标示符:UID与GID&lt;/h3&gt;

&lt;p&gt;虽然我们登录Linux主机的时候，输入的是我们账号，但是其实Linux主机并不会直接认识你的&amp;rdquo;账号名称&amp;rdquo;的，它仅认识ID(一组号码)。ID与账号的对应关系就在&lt;code&gt;/etc/passwd&lt;/code&gt;当中&lt;/p&gt;

&lt;p&gt;每个登录的用户至少会取得两个ID，一个是用户ID(UserID,简称UID)，一个是用户组ID(GroupID,简称GID)&lt;/p&gt;

&lt;p&gt;每一个文件都会有所谓的所有者ID与用户组ID，当我们有要显示文件属性的需求时，系统会依据&lt;code&gt;/etc/passwd&lt;/code&gt;与&lt;code&gt;/etc/group&lt;/code&gt;内容，找到UID/GID对应的账号名称再显示出来。&lt;/p&gt;

&lt;h3 id=&quot;section-55&quot;&gt;用户账号&lt;/h3&gt;

&lt;p&gt;用户登录的流程:
1. 先寻找&lt;code&gt;/etc/passwd&lt;/code&gt;里面是否有你输入的账号，如果没有则跳出;如果有的话则将该账号对应的UID与GID(在&lt;code&gt;/etc/group&lt;/code&gt;中)读出来，另外，该账号的主文件夹与shell设置也一并读出
2. 再来则是核对密码表，这是Linux会进入&lt;code&gt;/etc/shadow&lt;/code&gt;里面找出对应的账号与UID，然后核对一下你刚才输入的密码与里面的密码是否相符。
3. 如果一切都OK的话，就进入shell控管的阶段了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从上面的情况可以看出，&lt;code&gt;/etc/passwd&lt;/code&gt;和&lt;code&gt;/etc/shadow&lt;/code&gt;这两个文件是非常重要的，如果要备份Linux系统的账号的话，这个两个文件是必须要备份的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这两个文件的简单介绍:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/passwd文件结构&lt;/code&gt;&lt;/strong&gt;
这个文件构造是这样的:每一行都代表一个账号，有几行就代表有几个账号在你的系统中！不过需要特比留意的是，里面很多账号本来就是系统正常运行所必须要的，我们可以简称它为系统账号，例如bin,daemon,adm,nobody等，这些账号请不要随意删掉。
每一行信息都是使用&amp;rdquo;:&amp;rdquo;分隔开，共有七个字段，分别是:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;root:x:0:0:root:/root:/bin/root&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;4&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;5&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;6&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;7&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;x&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/bin/root&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ol&gt;
  &lt;li&gt;账号名称
     就是账号，用来对应UID的。&lt;/li&gt;
  &lt;li&gt;密码
     原来这个字段是用来存放密码的，但是考虑到安全的问题，现在所有的密码都保存在&lt;code&gt;/etc/shadow&lt;/code&gt;中，这里就只剩下一个x了&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UID
     这个就是用户标识符。通常Linux对UID有几个限制。
     |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
     |      id范围   	 				|  该ID用户特性&lt;br /&gt;
     |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
     |  0(系统管理员)   				|  当UID是0时，代表这个账号是&amp;rdquo;系统管理员&amp;rdquo;！所以你要让其他账号名称也具有root权限时，将该账号的UID改为0即可。也就是说一个系统上面的系统管理员不见得只有root。不过，很不建议有多个账号的UID是0。 		                                   |
     |  1~499(系统账号) 				|  保留给系统使用的的ID，其实除了0之外，其他UID权限与特性并没有不一样。默认500以下的数字让给系统作为保留账号只是一个习惯.由于系统上面启动的服务希望使用较小的权限去运行，因此不希望使用root的身份去执行这些服务，所以我们就得要提供这些运行中程序的所有者账号才行。这些系统账号通常是不可登录的.\格局系统账号的由来，通常系统账号又被分为两种:\1~99:由distribution自行创建的系统账号;\100~499:若用户有系统账号需求时，可以使用的账号UID                                                             |
     |  500~65535(可登陆账号)  |  给一般用户用的。                                                                                |
     |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;GID
     这个与&lt;code&gt;/etc/group&lt;/code&gt;有关！其实&lt;code&gt;/etc/group&lt;/code&gt;与&lt;code&gt;/etc/passwd&lt;/code&gt;差不多，只是它是用来规定组名与GID的对应而已&lt;/li&gt;
  &lt;li&gt;用户信息说明列
     这个字段基本上没有什么重要用途，只是用来说明这个账号的意义而已。不过，如果你提供使用&lt;code&gt;finger&lt;/code&gt;的功能时，这个字段可以提供很多的信息
6.主文件夹
     这是用户的主文件夹。默认是&lt;code&gt;/home/yourIDname&lt;/code&gt;
7.Shell
     指定该账号所使用的bash，需要注意的是，有一个shell可以用来替代成让账号无法取得shell环境的登录操作,那就是&lt;code&gt;sbin/nologin&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/shadow&lt;/code&gt;&lt;/strong&gt;
很多程序的运行都与权限有关，而权限与UID/GID有关！因此各程序当然需要读取&lt;code&gt;/etc/passwd&lt;/code&gt;来了解不同账号权限，因此&lt;code&gt;/etc/passwd&lt;/code&gt;的权限需设置为&lt;code&gt;-rw-r--r--&lt;/code&gt;，早起的密码也是放在&lt;code&gt;/etc/passwd&lt;/code&gt;中的，但是这样很容易被有心人所窃取，所以后来把密码移动到&lt;code&gt;/etc/shadow&lt;/code&gt;中，而且还加入很多的密码限制参数在&lt;code&gt;/etc/shadow&lt;/code&gt;里面！	
基本上，shadow同样以&amp;rdquo;:&amp;rdquo;作为分隔符，一共有9个字段，这9个字段的说明如下:
1. 账号名称
		密码也需要和账号对应，所以这个文件的第一列就是账号，必须要与&lt;code&gt;/etc/passwd&lt;/code&gt;相同才行
2. 密码
		这个字段内的数据才是真正的密码，而且是经过加密的密码，在这里只会看到一些特殊符号的字母。
3. 最近更动密码的日期
		这个字段记录了改动密码的日期，日期的时间时以1970年1月1日作为1而累加的日期，1971年1月1日则为366.
4. 密码不可被更改的天数(与第三个字段相比)
		第四个字段记录了这个账号的密码在最近一次被更改之后需要经过几天才可以再被更改！如果是0的话，表示密码随时可以改动的意思。
5. 密码需要重新更改的天数(与第3个字段相比)
		经常更改密码是一个好习惯。为了强制用户更改密码，这个字段可以指定在最近一次更改密码后在多少天数内需要再次更改密码才行。你必须要在这个天数内重新设置你的密码，否则这个账号的密码将会变为过期特性。如果是99999(计算为273年)的话，那就表示密码的更改没有强制性之意
6. 密码需要更改期限前的警告天数(与第5个字段相比)
		当账号的密码有效期限快要到的时候(第5个字段)，系统会依据这个字段的设置发出&amp;rdquo;警告&amp;rdquo;给这个账号，提醒他再过n天你的密码就要过期了。
7. 密码过期后的账号宽限时间(密码失效日)(与第5个字段相比)
		密码有效日期为&amp;rdquo;更新日期&amp;rdquo;(第3个字段)+&amp;rdquo;重新更改日期&amp;rdquo;(第5个字段)，过了该期限之后用户依旧没有更新密码，那改密码就算过期了。虽然密码过期但是该账号还是可以用来进行其他工作的，包括登录系统取得bash。不过如果密码过期了，那当你登录系统时，系统会强制要求你必须重新设置密码才能登录继续使用，这就是密码过期的特性
		在密码过期几天后，如果用户还是没有登录更改密码，那么这个账号的密码将会&amp;rdquo;失效&amp;rdquo;，即该账号再也无法使用改密码登录了。要注意&lt;strong&gt;密码过期&lt;/strong&gt;与&lt;strong&gt;密码失效&lt;/strong&gt;并不相同
8. 账号失效日期
		这个日期跟第三个字段一样，都是使用1970年以来的总日数设置。这个字段表示:这个账号在此字段规定的日期之后，将无法再使用。就是所谓的&amp;rdquo;账号失效&amp;rdquo;。此时不论你的密码是否过期，这个&amp;rdquo;账号&amp;rdquo;都不能再被使用。这个字段会被使用通常应该是在&amp;rdquo;收费服务&amp;rdquo;的系统中，你可以规定一个日期让该账号不能再使用。
9. 保留
		最后一个字段是保留的，看以后有没有新功能加入&lt;/p&gt;

&lt;h3 id=&quot;section-56&quot;&gt;有效与初始用户组&lt;/h3&gt;
&lt;p&gt;和用户组有关的数据信息是保存在&lt;code&gt;/etc/group&lt;/code&gt;和&lt;code&gt;/etc/gshadow&lt;/code&gt;中的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/group&lt;/code&gt;&lt;/strong&gt;
这个文件就是记录GID与组名的对应。这个文件每一行代表一个用户组，也是以冒号&amp;rdquo;:&amp;rdquo;作为字段的分隔符，共分为四列，每一个字段的意义是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户组名称
     就是用户组名称&lt;/li&gt;
  &lt;li&gt;用户组密码
     通常不需要设置，这个设置通常是给&amp;rdquo;用户组管理员&amp;rdquo;使用的，目前很少有这个机会设置用户组管理员。同样，密码已经移动&lt;code&gt;/etc/gshadow&lt;/code&gt;去，因此这个字段只会存在一个&amp;rdquo;x&amp;rdquo;而已&lt;/li&gt;
  &lt;li&gt;GID
     就是用户组ID。在&lt;code&gt;/etc/passwd&lt;/code&gt;第四个字段使用的GID对应的用户组名就是由这里对一个出来的。&lt;/li&gt;
  &lt;li&gt;此用户组支持的账号名称
     某个账号想要加入此用户组时，将该账号填入这个字段即可。(注意不要有空格)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;有效用户组(effective group)与初始用户组(initial group)&lt;/strong&gt;
每个用户在他的&lt;code&gt;/etc/passwd&lt;/code&gt;里面的第四列有所谓的GID，这个GID就是所谓的&amp;rdquo;初始用户组(&lt;code&gt;initial group&lt;/code&gt;)&amp;rdquo;,也就说，当用户登录系统，立刻就拥有这个用户组的相关权限，因此，每一个账号的初始用户组是不用写入到&lt;code&gt;/etc/group&lt;/code&gt;中的
如果一个账号加入了多个组，那么这个账号新建的文件或目录的组的是什么？这就要检查一下当时的有效用户组了(effective group)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;groups:有效与支持用户组的查看&lt;/strong&gt;
		可以直接通过&lt;code&gt;groups&lt;/code&gt;命令查看当前账号所支持的用户组。查询结果中的第一个用户组就是当前账号的有效用户组(effective group),通常来说，有效用户组的功能就是新建文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;newgrp:有效用户组的切换&lt;/strong&gt;
可以通过&lt;code&gt;newgrp&lt;/code&gt;命令来切换有效用户组，但是想要切换的用户组必须是你已经有支持的用户组&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/gshadow&lt;/code&gt;&lt;/strong&gt;
这个文件内同样还是使用冒号&amp;rdquo;:&amp;rdquo;来作为字段的分隔符，一共有四个字段，分别说明如下:
1. 用户组名
2. 密码列，同样，开头为!表示无合法密码，所以无用户组管理员
3. 用户组管理员的账号(相关信息在gpasswd中介绍)
4. 该用户组的所属的账号(与&lt;code&gt;/etc/group&lt;/code&gt;内容相同)&lt;/p&gt;

&lt;h2 id=&quot;section-57&quot;&gt;账号管理&lt;/h2&gt;

&lt;h3 id=&quot;useraddpasswdusermoduserdel&quot;&gt;新增与删除用户:useradd,相关配置文件,passwd,usermod,userdel&lt;/h3&gt;

&lt;p&gt;账号可以使用&lt;code&gt;useradd&lt;/code&gt;来新建账号，密码则是使用&lt;code&gt;passwd&lt;/code&gt;来设置&lt;/p&gt;

&lt;p&gt;系统其实已经帮我们规定好了很多的默认值，所以我们可以简单地使用&lt;code&gt;useradd username&lt;/code&gt;来创建用户即可,CentOS这些默认值会帮我们处理以下几个项目:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在&lt;code&gt;/etc/passwd&lt;/code&gt;里面创建一行与账号相关的数据，包括创建UID/GID/主文件夹等&lt;/li&gt;
  &lt;li&gt;在&lt;code&gt;/etc/shadow&lt;/code&gt;里面将此账号的密码相关参数填入，但是尚未有密码&lt;/li&gt;
  &lt;li&gt;在&lt;code&gt;/etc/group&lt;/code&gt;李米娜加入一个与账号名称一模一样的组名&lt;/li&gt;
  &lt;li&gt;在&lt;code&gt;/home&lt;/code&gt;下面创建一个与账号同名的目录作为用户主文件夹，且权限为700&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用&lt;code&gt;useradd&lt;/code&gt;创建用户账号时，其实会更改不少地方，有以下几个文件:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户账号与密码参数方面的文件:&lt;code&gt;/etc/passwd&lt;/code&gt;,&lt;code&gt;/etc/shadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;用户组相关方面的文件:&lt;code&gt;/etc/group&lt;/code&gt;,&lt;code&gt;/etc/gshadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;用户的主文件夹:&lt;code&gt;/home/username&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;useradd参考文件&lt;/strong&gt;
其实，&lt;code&gt;useradd&lt;/code&gt;的默认值可以用&lt;code&gt;useradd -D&lt;/code&gt;调出来，其中的默认值都是保存在&lt;code&gt;/etc/default/useradd&lt;/code&gt;中，可以使用vim查看并修改其内容
该文件的内容如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100							&lt;span class=&quot;c&quot;&gt;#默认的用户组&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home						&lt;span class=&quot;c&quot;&gt;#默认的主文件夹所在目录&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;INACTIVE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-1						&lt;span class=&quot;c&quot;&gt;#密码失效日，在shadow内的第7列  0代表立刻过期，-1代表永不过期&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EXPIRE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;								&lt;span class=&quot;c&quot;&gt;#账号失效日，在shadow内的第8列&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/bin/bash				&lt;span class=&quot;c&quot;&gt;#默认的shell&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SKEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/skel				&lt;span class=&quot;c&quot;&gt;#用户主文件夹内容数据参考目录&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CREATE_MAIL_SPOOL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes &lt;span class=&quot;c&quot;&gt;#是否主动帮用户创建邮件信箱(mailbox)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;其中有个字段需要特别说明:
- 关于用户组的角度有两种不同的机制，这两种机制分别是:
		- 私有用户组机制:系统会创建一个与账号一样的用户组给用户作为初始用户组，这种设置机制会比较有保密性，因为用户都有自己的用户组，而且主文件夹权限将设置为700。使用这种机制将不会参考&lt;code&gt;GROUP=100&lt;/code&gt;这个设置。代表性的distribution有RHEL,Fedora,CentOS等
		- 公共用户组机制:就是以&lt;code&gt;GROUP=100&lt;/code&gt;这个设置值作为新建账号的初始用户组，因此每个账号都属于users这个用户组，且默认主文件夹通常的权限会是&lt;code&gt;drwxr-xr-x&lt;/code&gt;，由于每个账号都属于users用户组，因此大家都可以互相分享主文件夹内的数据。代表性的distribution如SuSE
- &lt;code&gt;SKEL=/etc/skel&lt;/code&gt;:用户主文件夹参考基准目录。新建用户的主文件夹内的各项数据都是由&lt;code&gt;/etc/skel&lt;/code&gt;复制过去的，可以在新建&lt;code&gt;/etc/skel/www&lt;/code&gt;这个目录，那么将来新增用户后，在他的主文件夹下就会有www这个目录了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;/etc/login.defs&lt;/code&gt;&lt;/strong&gt;
该文件内容如下:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;MALL_DIR /var/spool/mail				&lt;span class=&quot;c&quot;&gt;#用户默认邮件信箱放置目录&lt;/span&gt;
PASS_MAX_DAYS 99999 						&lt;span class=&quot;c&quot;&gt;#/etc/shadow内的第5列，多久需要更改密码&lt;/span&gt;
PASS_MIN_DAYS 0									&lt;span class=&quot;c&quot;&gt;#/etc/shadow内的第4列，多久不可重新设置密码天数&lt;/span&gt;
PASS_MIN_LEN	5									&lt;span class=&quot;c&quot;&gt;#密码最短的字符长度，已被pam模块替代，失去效用！&lt;/span&gt;
PASS_WARN_AGE 7									&lt;span class=&quot;c&quot;&gt;#/etc/shadow内的第6列，过期前会警告的天数&lt;/span&gt;

UID_MIN 500											&lt;span class=&quot;c&quot;&gt;#用户最小的UID，意即小于500的UID为系统保留&lt;/span&gt;
UID_MAX 6000										&lt;span class=&quot;c&quot;&gt;#用户能够用的最大UID&lt;/span&gt;
GID_MIN 500											&lt;span class=&quot;c&quot;&gt;#用户自定义用户组的最小GID，小于500为系统保留&lt;/span&gt;
GID_MAX 6000										&lt;span class=&quot;c&quot;&gt;#用户自定义用户组的最大GID	&lt;/span&gt;

CREATE_HOME	yes									&lt;span class=&quot;c&quot;&gt;#在不加-M及-m时，是否主动创建用户文件夹&lt;/span&gt;
UMASK	077												&lt;span class=&quot;c&quot;&gt;#用户主文件夹建的umask，因此权限会是700&lt;/span&gt;
USERGROUPS_ENAB yes							&lt;span class=&quot;c&quot;&gt;#使用userdel删除时，是否会删除初始用户组&lt;/span&gt;
MD5_CRYPT_ENAB yes							&lt;span class=&quot;c&quot;&gt;#密码是否经过MD5的加密机制处理&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;要注意的是，系统给予一个账号UID时，它是先参考UID_MIN设置值取得最小数值，由&lt;code&gt;/etc/passwd&lt;/code&gt;查找最大的UID数值，将二者相比，找出最大的那个再加一就是新账号的UID了。
&lt;code&gt;USERROUPS_ENAB yes&lt;/code&gt;这个值设置的功能是:如果使用userdel去删除一个账号时，且该账号所属的初始用户组已经没有隶属于该用户组了，那么就删除该用户组&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;useradd&lt;/code&gt;这个程序在创建Linux上的账号时至少会参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;/etc/default/useradd&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/etc/login.defs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;/etc/skel/*&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;passwd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;useradd&lt;/code&gt;创建账号之后，在默认情况下，该账号是暂时被封锁的，也就是说，该账号是无法登陆的,需要root使用&lt;code&gt;passwd 账号&lt;/code&gt;的方式来修改密码。需要注意的是，&lt;code&gt;passwd&lt;/code&gt;不加任何参数时，是修改自己的密码&lt;/p&gt;

&lt;p&gt;新的distribution是使用较严格的PAM模块来管理密码，这个管理的机制写在&lt;code&gt;/etc/pam.d/passwd&lt;/code&gt;当中。该文件与密码有关的测试模块就是使用pam_cracklib.so,这个模块会检验密码相关的信息，并且替代&lt;code&gt;\etc\login.defs&lt;/code&gt;内的PASS_MIN_LEN的设置，理论上，你的密码最好哟啊符合如下要求:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;密码不能与账号相同&lt;/li&gt;
  &lt;li&gt;密码尽量不要选用字典里面会出现的字符串&lt;/li&gt;
  &lt;li&gt;密码需要超过8个字符&lt;/li&gt;
  &lt;li&gt;密码不要用个人信息、如身份证、手机号码、其他电话号码等&lt;/li&gt;
  &lt;li&gt;密码不要使用简单的关系式，如1+1=2,lamvbird等&lt;/li&gt;
  &lt;li&gt;密码尽量使用大小写字符、数字、特殊符号的组合&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;chage&lt;/strong&gt;
这个命令可以更加详细的显示密码参数.这个命令可以可以让用户在第一次登录时强制他们一定要更改密码后才能够使用系统资源&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;usermod&lt;/strong&gt;
可以对用户账号的相关数据进行微调&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;userdel&lt;/strong&gt;
删除用户的数据，用户的数据有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户账号/密码相关参数:&lt;code&gt;/etc/passwd&lt;/code&gt;,&lt;code&gt;/etc/shadow&lt;/code&gt;		&lt;/li&gt;
  &lt;li&gt;用户组相关参数:&lt;code&gt;/etc/group&lt;/code&gt;,&lt;code&gt;/etc/gshadow&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;用户个人文件数据:&lt;code&gt;/home/username&lt;/code&gt;,&lt;code&gt;/var/spool/mail/username&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;语法十分简单:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;userdel &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-r&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; username
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参数:
-r:连同用户的主文件也一起删除&lt;/p&gt;

&lt;h3 id=&quot;section-58&quot;&gt;用户功能&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;chfn&lt;/strong&gt;
可以用来修改用户的个人信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chsh&lt;/strong&gt;
change shell的简写,可以列出系统上所有可用的shell，也可以修改自己的shell&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;id&lt;/strong&gt;
可以查询某人或自己相关的UID/GID等的信息&lt;/p&gt;

&lt;h3 id=&quot;section-59&quot;&gt;新增与删除用户组&lt;/h3&gt;

&lt;p&gt;基本上用户组的内容都与这两个文件有关:&lt;code&gt;/etc/group&lt;/code&gt;,&lt;code&gt;/etc/gshadow&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;groupadd&lt;/strong&gt;
新建用户组&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;groupmod&lt;/strong&gt;
和&lt;code&gt;usermod&lt;/code&gt;相似，这个命令仅是在进行group相关参数的修改而已&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;groupdel&lt;/strong&gt;
删除用户组。这里需要注意的是，只有当这个用户组不是某个账户的初始用户组时，才能被删除&lt;/p&gt;

&lt;h2 id=&quot;acl&quot;&gt;主机的具体权限规划:ACL的使用&lt;/h2&gt;

&lt;p&gt;ACL:Access Control List,主要的目的是提供传统的owner、group、others的read、write、execute权限之外的具体权限设置。ACL可以针对单一用户、单一文件或目录来进行r、w、x的权限设置，对于需要特殊权限的使用状况非常有帮助&lt;/p&gt;

&lt;p&gt;ACL主要可以针对以下几个项目:
- 用户(user):可以针对用户来设置权限
- 用户组(group):可以对用户组来设置权限
- 默认属性(mask):还可以在该目录下载新建新文件/目录时设置新数据的默认权限&lt;/p&gt;

&lt;h3 id=&quot;aclgetfaclsetfacl&quot;&gt;ACL的设置技巧:getfacl,setfacl&lt;/h3&gt;

&lt;p&gt;设置与查看ACL有以下两个命令:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;getfacl&lt;/code&gt;:取得某个文件/目录的ACL设置项目
&lt;code&gt;setfacl&lt;/code&gt;:设置某个目录/文件的ACL规定&lt;/p&gt;

&lt;h2 id=&quot;section-60&quot;&gt;用户身份切换&lt;/h2&gt;

&lt;h3 id=&quot;su&quot;&gt;su&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;su						&lt;span class=&quot;c&quot;&gt;#使用non-login的方式变成root，不能拥有root的环境变量、信箱等&lt;/span&gt;
su -					&lt;span class=&quot;c&quot;&gt;#使用login shell的方式切换为root的身份并查看变量&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;
- 若要完整地切换到新用户的环境，必须要使用&lt;code&gt;su -username&lt;/code&gt;或&lt;code&gt;su -l username&lt;/code&gt;,才会连同&lt;code&gt;PATH/USER/MAIL&lt;/code&gt;等变量都转成新用户的环境；
- 如果仅想要执行一次root的命令时，可以利用&lt;code&gt;su -- c&quot;命令串&quot;&lt;/code&gt;的方式来处理
- 使用root切换成任何用户时，并不需要输入新用户的密码&lt;/p&gt;

&lt;h3 id=&quot;sudo&quot;&gt;sudo&lt;/h3&gt;

&lt;p&gt;相对于su需要了解新切换的用户密码，sudo的执行则仅需要自己的密码即可！并非所有人都能够执行sudo，&lt;strong&gt;而是仅有&lt;code&gt;/etc/sudoers&lt;/code&gt;内的用户才能够执行sudo这个命令。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;sudo&lt;/strong&gt;的执行流程
1. 当用户执行sudo时，系统于&lt;code&gt;/etc/sudoers&lt;/code&gt;文件中查找该用户是否有执行sudo的权限
2. 若用户具有可执行sudo的权限后，便让用户输入自己的密码来确认
3. 若密码输入成功，便开始进行sudo后续接的命令
4. 若欲切换的身份与执行者相同，那也不需要输入密码&lt;/p&gt;

&lt;p&gt;能否用&lt;code&gt;sudo&lt;/code&gt;必须要看&lt;code&gt;/etc/sudoer&lt;/code&gt;的设置值，而可使用&lt;code&gt;sudo&lt;/code&gt;的是通过输入用户自己的密码来执行后续的命令串&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;visudo&lt;/code&gt;与&lt;code&gt;/etc/sudoers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;root可以通过&lt;code&gt;visudo&lt;/code&gt;命令修改&lt;code&gt;/etc/sudoers&lt;/code&gt;中的内容，要注意的是&lt;code&gt;/etc/sudoers&lt;/code&gt;中是有格式的，如果设置错误会引起不良后果的。&lt;/p&gt;

&lt;h2 id=&quot;shellpam&quot;&gt;用户的特殊Shell与PAM模块&lt;/h2&gt;

&lt;h3 id=&quot;shellsbinnologin&quot;&gt;特殊的shell,/sbin/nologin&lt;/h3&gt;

&lt;p&gt;系统中有很多系统账号，所谓系统账号就是指那些不能通过shell登录的账号，他们使用的shell是&lt;code&gt;/sbin/nologin&lt;/code&gt;.系统中的各个服务是由不同的系统账号进行管理的，但是这些账号却是不能通过shell登录的。如果要让具有&lt;code&gt;/sbin/nologin&lt;/code&gt;的用户知道，他们不能登录主机时，我们可以新建&lt;code&gt;/etc/nologin.txt&lt;/code&gt;这个文件，并且在这个文件内说明不能登录的原因，那么下次当这个用户想要登录系统时，屏幕上就会出现&lt;code&gt;/etc/nologin.txt&lt;/code&gt;这个文件的内容，而不是默认的内容了&lt;/p&gt;

&lt;h3 id=&quot;pam&quot;&gt;PAM模块简介&lt;/h3&gt;

&lt;p&gt;PAM:Pluggable Authentication Modules&lt;/p&gt;

&lt;p&gt;PAM可以说是一套应用程序编程接口，它提供了一连串的验证机制，只要用户将验证阶段的需求告诉PAM后，PAM就能够回报用户验证的结果(成功或失败)
因为不论你使用什么程序，都可以使用PAM来进行验证，如此一来，就能够让账户密码或者其他方式的验证具有一致的结果，也让程序员方便处理验证的问题了。&lt;/p&gt;

&lt;h3 id=&quot;pam-1&quot;&gt;PAM模块的设置语法&lt;/h3&gt;

&lt;p&gt;PAM通过一个与程序相同文件名的配置文件来进行一连串的认证分析，到执行&lt;code&gt;passwd&lt;/code&gt;后，这个程序调用PAM的流程是:
1. 用户开始执行&lt;code&gt;/usr/bin/passwd&lt;/code&gt;这支程序，并输入密码
2. passwd调用PAM模块进行验证
3. PAM模块会到&lt;code&gt;/etc/pam.d&lt;/code&gt;中寻找与程序(passwd)同名的配置文件
4. 依据&lt;code&gt;/etc/pam.d/passwd&lt;/code&gt;内的设置，引用相关的PAM模块逐步进行验证分析
5. 将验证结果(成功、失败以及其他信息)回传给passwd这个程序
6. passwd这支程序会根据PAM回传的结果决定下一个操作(重新输入密码或通过验证)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/pam.d/passwd&lt;/code&gt;中的内容如下所示:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;auth			include			system-auth
account		include			system-auth
passwd		include			system-auth
验证类型 控制标准    PAM模块与该模块的参数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在这个配置文件中，除了第一行声明PAM版本之外，其他任何&amp;rdquo;#&amp;rdquo;开头的都是批注，而每一行都是一个独立的验证流程，每一行可以区分三个字段，分别是类别(tpye)，控制标准(flag),PAM的模块与该模块的参数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一个字段:验证类型(type)&lt;/strong&gt;
验证类型一共分为四种，分别说明如下:
- auth 
	是authentication的缩写，所以这种类型主要用来检验用户的身份验证，这种类型通常是需要密码来检验的，所有后续接的模块是用来检验用户的身份
- account
	account则大部分是在进行authentication，这种类型则主要在检验用户是否具有正确的权限，举例来说，当你使用一个过期的密码来登录时，当然就无法正确登录了
- session
	session管理的就是用户在这侧登录期间PAM所给予的环境设置，这个类型通常用于记录用户登录与注销时的信息
- passwd
	passwd就是密码。所以这种类别主要用于提供验证的修订工作，就是修改密码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二个字段:验证的控制标志(control flag)&lt;/strong&gt;
它是&amp;rdquo;验证通过的标准&amp;rdquo;,这个字段在管控验证的放行方式，主要也分为四种控制方式:
- required
	此验证若成功则带有success的标志，若失败则带有failure的标志，但不论成功或失败都会继续后续的验证流程。由于后续的验证流程可以继续进行，因此相当有利于数据的登录日志(log)，这也是PAM最常用required的原因
- requisite
	若验证失败则立刻回报原程序failure的标志。并终止后续的验证流程。若验证成功则带有success的标志并继续后续的验证流程。
- sufficient
	若验证成功则立刻回传success给原程序，并终止后续的验证流程；若验证失败则带有failure标志并继续后续的验证流程，这与requisite刚好相反！
- optional
	这个模块控件的目的大多是在显示信息而已，并不是用在验证方面&lt;/p&gt;

&lt;h3 id=&quot;section-61&quot;&gt;常用模块简介&lt;/h3&gt;

&lt;p&gt;这部分内容比较琐碎且只是介绍一些模块的功能，所以决定跳过这部分内容。具体的详细内容见P437&lt;/p&gt;

&lt;h2 id=&quot;linux-14&quot;&gt;Linux主机上的用户信息传递&lt;/h2&gt;

&lt;h3 id=&quot;wwholastlastlog&quot;&gt;查询用户:w,who,last,lastlog&lt;/h3&gt;

&lt;p&gt;如果想要知道目前已登录在系统上面的用户，可以通过&lt;code&gt;w&lt;/code&gt;或&lt;code&gt;who&lt;/code&gt;来查询
想知道每个账号的最近登录时间，则可以使用&lt;code&gt;lastlog&lt;/code&gt;这个命令&lt;/p&gt;

&lt;h3 id=&quot;writemesgwall&quot;&gt;用户对谈:write,mesg,wall&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;write&lt;/code&gt;这个命令可以直接将信息传给接收者，可以这样做：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;write 用户账号 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;用户所在终端接口&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果不想接收信息，则可以使用如下命令:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mesg n  &lt;span class=&quot;c&quot;&gt;#禁止别人发来的信息，但是root发的必须接收 &lt;/span&gt;
mesg y  &lt;span class=&quot;c&quot;&gt;#开禁&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;如果想向所有的用户广播，则可以使用如下命令:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;wall &lt;span class=&quot;s2&quot;&gt;&amp;quot;I will shutdown my linux server...&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;mail&quot;&gt;用户邮件邮箱:mail&lt;/h3&gt;

&lt;p&gt;一般来说，mailbox都会放置在&lt;code&gt;/var/spool/mail&lt;/code&gt;里面，一个账号一个mailbox(文件)。&lt;/p&gt;

&lt;p&gt;寄信的命令十分简单，直接执行&lt;code&gt;mail username@localhost -s&lt;/code&gt;即可
收信的命令也十分简单，直接运行&lt;code&gt;mail&lt;/code&gt;命令就行了&lt;/p&gt;

&lt;p&gt;由于读过的信件若使用&amp;rdquo;q&amp;rdquo;离开时，会将该信件移动到&lt;code&gt;~/mbox&lt;/code&gt;中，所以你也可以想象&lt;code&gt;/var/spool/mail/vbird1&lt;/code&gt;为vbird1的&amp;rdquo;信箱&amp;rdquo;,而&lt;code&gt;/home/vbird1/mbox&lt;/code&gt;则为&amp;rdquo;收信箱&amp;rdquo;的意思。那如何读取&lt;code&gt;/home/vbird1/mbox&lt;/code&gt;呢？就使用&lt;code&gt;mail -f /home/vbird/mbox&lt;/code&gt;即可&lt;/p&gt;

&lt;h2 id=&quot;section-62&quot;&gt;手动新增用户&lt;/h2&gt;

&lt;p&gt;一般来说，不建议使用手动的方式来新增用户。因为用户的新建涉及GID/UID等权限的关系，而且，与文件/目录的权限也有关系，使用&lt;code&gt;useradd&lt;/code&gt;可以帮我们自动设置好UID/GID主文件夹以及主文件夹相关的权限设置，但是，手动增加时，有可能忘东忘西，结果导致一些困扰。&lt;/p&gt;

&lt;p&gt;由于暂时不需要具体的手动新增用户，所以这部分内容暂且跳过，具体的内容在P443&lt;/p&gt;

&lt;h1 id=&quot;quota&quot;&gt;磁盘配额(Quota)与高级文件系统管理&lt;/h1&gt;

&lt;h2 id=&quot;quota-1&quot;&gt;磁盘配额(Quota)的应用与实践&lt;/h2&gt;

&lt;h3 id=&quot;quota-2&quot;&gt;什么是Quota&lt;/h3&gt;

&lt;p&gt;Quota的一般用途:
- 针对WWW server,每个人的网页空间的容量限制
- 针对mail server,每个人的邮件空间限制
- 针对file server,每个人最大的可用网络硬盘空间
- 限制某一用户组所能使用的最大磁盘配额
- 以link的方式使邮件可以作为限制的配额(更改&lt;code&gt;/var/spool/mail&lt;/code&gt;这个路径)&lt;/p&gt;

&lt;p&gt;Quota的限制:
- 仅能针对整文件系统
- 内核必须支持quota
- 只对一般身份用户有效&lt;/p&gt;

&lt;p&gt;Quota的规范设置选项
Quota针对整个文件系统的限制项目主要分为以下几个部分:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容量限制或文件数量限制(block或inode)&lt;/strong&gt;
- 限制inode用量:管理用户可以新建的&amp;rdquo;文件数量&amp;rdquo;
- 限制block用量:管理用户磁盘容量的限制，较常见的为这种方式&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;soft/hard&lt;/strong&gt;
- hard:表示用户决不超过这个限制值，若超过这个限制值系统会锁住该用户的磁盘使用权
- soft:表示用户低于soft值时，可以正常使用磁盘，但若超过soft且低于hard限制值时，每次用户登录系统时，系统会主动发出磁盘即将爆满的警告信息，且会给予一个宽限时间(gracetime)。不过，若用户在宽限时间倒数期间就将容量再次将低于soft限值之下，则宽限时间会停止&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;会倒计时的宽限时间(gracetime)&lt;/strong&gt;
默认的宽限时间时7天，如果7天内都不进行任何磁盘管理，那么soft限制值会即刻取代hard限制值来作为quota的限制，此时你的磁盘使用权就会锁住而无法新增文件&lt;/p&gt;

&lt;h3 id=&quot;quota1&quot;&gt;实践Quota流程1:文件系统支持&lt;/h3&gt;

&lt;p&gt;要想使用Quota，就必须要在需要使用Quota的文件系统中启用Quota功能,启用命令:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;mount -o remount,usrquota,grpquota /home
mount | grep home					&lt;span class=&quot;c&quot;&gt;#查看结果&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;使用如上的命令，当该文件系统重新挂载时，就会失去Quota功能，所以，如果想要长期使用Quota来限制一个文件系统，就必须要确定&lt;code&gt;/etc/mtab&lt;/code&gt;已经加入usrquota、grpquota的支持到你所想要设置的文件系统中&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vim /etc/fstab
&lt;span class=&quot;nv&quot;&gt;LABEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/home			/home 		ext4		defaults,usrquota,grpquota 1 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;quota2quta&quot;&gt;实践Quota流程2:新建Quta配置文件&lt;/h3&gt;

&lt;p&gt;其实Quota是通过分析整个文件系统中每个用户(组)拥有的文件总数与总容量，再将这些数据记录在该文件系统的最顶层目录，然后在该配置文件中再使用每个账号(或用户组)的限制值去规定磁盘使用量的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;quotacheck&lt;/code&gt;:扫描文件系统并新建Quota的配置文件&lt;/strong&gt;
常用的命令参数只要记得&lt;code&gt;-avug&lt;/code&gt;就行了，执行该命令后，会在文件系统的顶层目录新建两个文件:aquota.group,aquota.user。这两个文件是Quota自己的数据文件，并不是纯文本文件，且该文件一直变动，因此要新建这个两个文件，记得要使用&lt;code&gt;quotacheck&lt;/code&gt;命令，不要手动编辑&lt;/p&gt;

&lt;h3 id=&quot;quota3quota&quot;&gt;实践Quota流程3:Quota启动、关闭与限制值设置&lt;/h3&gt;

&lt;p&gt;制作好Quota配置文件之后，接下来就是要启动quota了。启动的方式很简单，使用&lt;code&gt;quotaon&lt;/code&gt;,至于关闭就用&lt;code&gt;quotaoff&lt;/code&gt;即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quotaon&lt;/code&gt;:启动quota的服务
&lt;code&gt;quotaoff&lt;/code&gt;:关闭quota的服务
&lt;code&gt;edquota&lt;/code&gt;:编辑账号/用户组的限制与宽限时间&lt;/p&gt;

&lt;p&gt;编辑Quota时，一共有七个字段，意义分别如下:
1. 文件系统(filesystem):说明该限制值时针对哪个文件系统
2. 磁盘容量(blocks):这个数值是quota自己算出来的，单位为KB，请不要修改它
3. soft:磁盘容量(block)的soft限制值，单位为KB
4. hard:block的hard限制值，单位KB
5. 文件数量(inodes):这是quota自己算出来的，单位为个数，请不要修改它
6. soft:inode的soft限制值
7. hard:inode的hard限制值&lt;/p&gt;

&lt;p&gt;当soft/hard为0时，表示没有限制的意思&lt;/p&gt;

&lt;h3 id=&quot;quota4quota&quot;&gt;实践Quota流程4:Quota限制值的报表&lt;/h3&gt;

&lt;p&gt;quota的报表主要有两种模式，一种是针对每个个人或用户组的&lt;code&gt;quota&lt;/code&gt;命令，一个是针对整个文件系统的&lt;code&gt;repquota&lt;/code&gt;命令。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;quota&lt;/code&gt;:单一用户的quota报表
&lt;code&gt;repquota&lt;/code&gt;:针对文件系统的限额做报表&lt;/p&gt;

&lt;h3 id=&quot;quota5&quot;&gt;实践Quota流程5:测试与管理&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;warnquota&lt;/code&gt;:对超过限额者发出警告信。它可以根据&lt;code&gt;/etc/warnquota.conf&lt;/code&gt;的设置，然后找出目前系统上面quota用量超过soft的账号，通过Email的功能将警告信件发送到用户的电子邮件信箱&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setquota&lt;/code&gt;:直接于命令中设置quota限额&lt;/p&gt;

&lt;h2 id=&quot;software-raid&quot;&gt;软件磁盘阵列(Software RAID)&lt;/h2&gt;

&lt;h3 id=&quot;raid&quot;&gt;什么是RAID&lt;/h3&gt;

&lt;p&gt;RAID(RedundantArrays of Inexpensive Disks),即容错廉价磁盘阵列。RAID可以通过一些技术(软件或硬件)将多个较小的磁盘整合成为一个较大的磁盘设备，而这个较大的磁盘功能可不止是存储而已，它还具有数据保护功能。
不同的等级有不同的功能:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAID-0(等量模式,stripe):性能最佳&lt;/strong&gt;
这种模式如果使用相同型号与容量的磁盘来组成时，效果最佳。这种模式的RAID将会将磁盘先切出等量的区块，然后当一个文件要写入RAID时，该文件会依据块的大小切割好，之后再依序放到各个磁盘里面去。由于每个磁盘会交错存放数据，因此当你的数据要写入RAID时，&lt;strong&gt;数据会被等量放置在各个磁盘上面。&lt;/strong&gt;
越多块磁盘组成的RAID-0性能越好，因为每块负责的数据量就更低了。
但是性能好了，安全性就降低了。RAID-0只要有任何一块磁盘损坏，在RAID上面的所有数据都会丢失而无法读取。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RADI-1(映像模式):完整备份&lt;/strong&gt;
这种模式也是需要相同的磁盘容量的，最好一模一样的磁盘。如果是不同容量的磁盘组成RAID-1时，那么总容量将以最小的那一块磁盘为主！这种模式主要是&lt;strong&gt;让同一份数据完整保存在两块磁盘上&lt;/strong&gt;。
RAID-1最好的优点大概在于数据的备份，不过由于磁盘容量有一半用在备份，因此总容量会是全部磁盘容量的一半而已&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAID0+1,RAID1+0&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RAID0+1就是先将两块磁盘组成RAID0，并且这样的设置共有两组；然后将这两组RAID0再组成一组RAID1。RAID1+0就是反过来，先组成RAID1，再组成RAID0&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;RAID5:性能与数据备份的均衡考虑&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RAID-5至少需要三块以上的磁盘才能够组成这种类型的磁盘整列。这种磁盘阵列的数据写入有点类似RAID-0，不过每个循环的写入过程中，在每块磁盘还加入一个同位检查数据(Parity),这个数据会记录其他磁盘的备份数据，用于当磁盘损坏时的救援。
由于有同位检查码，因此RAID5的总容量会是整体磁盘数量减一块。而且当损坏的磁盘数量大于等于两块时，这整组RAID5的数据就损毁了。因为RAID5默认仅能够支持一块磁盘的损毁情况。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spare Disk:预备磁盘功能&lt;/strong&gt;
当磁盘阵列的磁盘损毁时，就得要将毁掉的磁盘拔出，然后换一块新的磁盘。换成新的磁盘并且顺利启动磁盘阵列后，磁盘阵列就会开始主动重建(rebuild)原本坏掉的那块磁盘数据到新的磁盘上，然后你的磁盘阵列上面的数据就能恢复了。
为了让系统可以实时地在坏掉硬盘时主动重建，因为就需要预备磁盘(spare disk)的辅助。所谓的sapre disk就是一块或多块没有包含在原本磁盘阵列等级中的磁盘，这块磁盘平时并不会被磁盘阵列所使用，当磁盘阵列有任何磁盘损毁时，则这块Spare disk会被主动拉进磁盘阵列中，并将坏掉的那块硬盘移除磁盘阵列，然后立即重建数据系统。&lt;/p&gt;

&lt;h3 id=&quot;softwarehardware-raid&quot;&gt;software,hardware RAID&lt;/h3&gt;
&lt;p&gt;所谓的硬件磁盘阵列(hardware RAID)是通过磁盘阵列卡来完成数组的目的。磁盘阵列卡上面有一个专门的芯片在处理RAID的任务，因此在性能方面会比较好，在很多任务时(例如RAID5的同为检查码)磁盘阵列并不会重复消耗原本系统的I/O总线，理论上性能会较佳。
由于磁盘阵列有很多优秀的功能，然而硬件磁盘阵列卡却很贵，因此就发展出利用软件来仿真磁盘阵列的功能，这就是所谓的软件磁盘阵列(software RAID).软件磁盘阵列主要是通过软件来仿真数组的任务，因此会损耗较多的系统资源，比如说CPU的运算与I/O总线资源等。&lt;/p&gt;

&lt;h2 id=&quot;logical-volume-manager&quot;&gt;逻辑卷管理器(Logical Volume Manager)&lt;/h2&gt;

&lt;p&gt;LVM的重点在于可以弹性调整文件系统的容量！LVM可以整合多个物理分区在一起，让这些分区看起来就像是一个磁盘一样，而且，还可以在将来增加其他的物理分区或将其从这个LVM管理的磁盘当中删除。&lt;/p&gt;

&lt;h3 id=&quot;lvmpvpevglv&quot;&gt;上面是LVM:PV,PE,VG,LV的意义&lt;/h3&gt;

&lt;p&gt;LVM:Logical Volume Manager
LVM的做法是将几个物理的分区(或磁盘)通过软件组合成为一块看起来是独立的大磁盘(VG),然后将这块大磁盘再经过切分成为可使用分区(LV)，最终能够挂载使用了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PhysicalVolume,PV,物理卷&lt;/strong&gt;
我们实际的分区需要调整物理系统标示符(system ID)成为8e(LVM的标示符)，然后再经过pvcreate的命令将它转成LVM最底层的物理卷(PV)，之后才能够将这些PV加以利用，调整system ID的方法就是通过fdisk&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;VolumeGroup,VG,卷用户组&lt;/strong&gt;
所谓的LVM大磁盘就是将许多PV整合成这个VG，所以VG就是LVM组合起来的大磁盘。那么这个大磁盘最大可以达到多少容量呢？这与下面要说明的PE有关，因为每个VG最多仅能包含65534个PE而已。如果使用LVM默认的参数，则一个VG最大可达256G的容量&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PhysicalExtend,PE,物理扩展块&lt;/strong&gt;
LVM默认使用4MB的PE块，而LVM的VG最多仅能包含65534个PE，因此默认的LVMVG会有4M*65534/(1024M/G)=256G。这个PE是整个LVM最小的存储块，也就是说，其实我们的文件数据都是由写入PE来处理的。简单的说，这个PE就有点像文件系统里面的block的大小。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LogicalVolmue,LV,逻辑卷&lt;/strong&gt;
最终的VG还会被切分成LV，这个LV就是最后可以被格式化使用的类似分区。LV是不可以随意指定大小的，因为PE是整个LVM的最小存储单位，那么LV的大小就与在此LV内的PE总数有关。
LVM可以弹性更改文件系统的容量，其实它就是通过交换PE来进行数据交换，将原本LV内的PE移转到其他设备中以降低LV容量，或将其它设备的PE加到此LV中以加大容量。&lt;/p&gt;

&lt;p&gt;在使用LVM时，依据写入机制的不同，而有两种方式:
- 线性模式(liner):一个分区接一个分区的写入
- 交错模式(triped):将一条数据拆成两部分，分别写入到两个分区中&lt;/p&gt;

&lt;p&gt;基本上，LVM最主要的用处是在实现一个可以弹性调整容量的文件系统上，而不是在新建一个性能为主的磁盘上。&lt;/p&gt;

&lt;h1 id=&quot;crontab&quot;&gt;例行性工作(crontab)&lt;/h1&gt;

&lt;h2 id=&quot;section-63&quot;&gt;什么是例行性工作&lt;/h2&gt;

&lt;h3 id=&quot;linuxatcron&quot;&gt;Linux工作调度的种类:at,cron&lt;/h3&gt;

&lt;p&gt;Linux中有两种工作调度的方式:
- 一种是例行的，就是每隔一定的周期要来办的事项
- 一种是突发性的，就是每次做完以后就没有的那一种&lt;/p&gt;

&lt;p&gt;Linux中有以下两种命令:
- &lt;code&gt;at&lt;/code&gt;: &lt;code&gt;at&lt;/code&gt;是可以处理仅执行一次就结束调度的命令，需要atd服务
- &lt;code&gt;crontab&lt;/code&gt;:&lt;code&gt;crontab&lt;/code&gt;这个命令所设置的工作将会循环一直进行下去，可循环的时间为分钟、小时、每周、每月或每年等。&lt;code&gt;crontab&lt;/code&gt;除了可以使用命令执行外，也可编辑&lt;code&gt;/etc/crontab&lt;/code&gt;来支持。这个命令需要crond这个服务&lt;/p&gt;

&lt;h3 id=&quot;linux-15&quot;&gt;Linux上常见的例行性工作&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;进行日志文件的轮替(log rotate)
  日志文件会不断增大，我们需要适时地整理日志文件&lt;/li&gt;
  &lt;li&gt;日志文件分析logwatch的任务&lt;/li&gt;
  &lt;li&gt;新建locate的数据库&lt;/li&gt;
  &lt;li&gt;whatis数据库的建立&lt;/li&gt;
  &lt;li&gt;RPM软件日志文件的新建&lt;/li&gt;
  &lt;li&gt;删除临时文件&lt;/li&gt;
  &lt;li&gt;与网络服务有关的分析行为&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-64&quot;&gt;仅执行一次的工作调度&lt;/h2&gt;

&lt;h3 id=&quot;atdat&quot;&gt;atd的启动与at运行的方式&lt;/h3&gt;

&lt;p&gt;首先要启动atd这个服务:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/etc/init.d/atd restart
 &lt;span class=&quot;c&quot;&gt;#设置开机启动这个服务&lt;/span&gt;
chkconfig atd on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;at&lt;/code&gt;的运行方式&lt;/strong&gt;
我们使用&lt;code&gt;at&lt;/code&gt;这个命令来生成所要运行的工作，并将这个工作以文本文件的方式写入&lt;code&gt;/var/spool/at/&lt;/code&gt;目录内，该工作便能等待atd这个服务的取用与执行了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;at&lt;/code&gt;的管理&lt;/strong&gt;
我们可以利用&lt;code&gt;/etc/at.allow&lt;/code&gt;和&lt;code&gt;/etc/at.deny&lt;/code&gt;这两个文件来进行&lt;code&gt;at&lt;/code&gt;的使用限制！加上这个两个文件后，&lt;code&gt;at&lt;/code&gt;的工作情况其实是这样的：
1. 先寻找&lt;code&gt;/etc/at.allow&lt;/code&gt;这个文件，写在这个文件中的用户才能使用&lt;code&gt;at&lt;/code&gt;，没有在这个文件中的用户则不能使用&lt;code&gt;at&lt;/code&gt;(即使没有写在&lt;code&gt;at.deny&lt;/code&gt;中)
2. 如果&lt;code&gt;/etc/at.allow&lt;/code&gt;不存在，就寻找&lt;code&gt;/etc/a.deny&lt;/code&gt;这个文件，若写在这个&lt;code&gt;at.deny&lt;/code&gt;的用户则不能使用&lt;code&gt;at&lt;/code&gt;，而没有在这个&lt;code&gt;at.deny&lt;/code&gt;文件中的用户就可以使用&lt;code&gt;at&lt;/code&gt;了。
3. 如果两个文件都不存在，那么只有root可以使用&lt;code&gt;at&lt;/code&gt;这个命令&lt;/p&gt;

&lt;p&gt;建议在使用&lt;code&gt;at&lt;/code&gt;命令时，建议最好使用绝对路径来执行命令，比较不会有问题。需要注意的是,&lt;strong&gt;&lt;code&gt;at&lt;/code&gt;在运行时，会跑到当时执行&lt;code&gt;at&lt;/code&gt;命令的那个工作目录中去&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;at&lt;/code&gt;命令的执行与终端机环境无关，而所有standard output/standard error output都会传送到执行者的mailbox中去&lt;/p&gt;

&lt;p&gt;由于在&lt;code&gt;at&lt;/code&gt;工作调度的使用上，系统会将该项&lt;code&gt;at&lt;/code&gt;工作独立出你的bash环境中，直接交给系统的&lt;code&gt;atd&lt;/code&gt;程序来接管，因此，当你执行了&lt;code&gt;at&lt;/code&gt;的工作之后就可以立刻脱机了，剩下的工作就完全交给Linux管理即可！所以有长时间的网络工作时，使用&lt;code&gt;at&lt;/code&gt;可以免除网络断线后的困扰&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;at&lt;/code&gt;工作的管理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;atq&lt;/code&gt;:查询目前主机上有多少的&lt;code&gt;at&lt;/code&gt;工作调度
&lt;code&gt;atrm&lt;/code&gt;:删除&lt;code&gt;at&lt;/code&gt;工作调度&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;batch&lt;/code&gt;:系统有空时才进行后台任务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;batch&lt;/code&gt;是利用&lt;code&gt;at&lt;/code&gt;来进行命令的执行，只是加入了一些控制参数而已，它的特殊地方在于:&lt;strong&gt;它会在CPU工作负载低于0.8的时候，才进行你所执行的工作任务&lt;/strong&gt;
工作负载:CPU在单一时间点所负责的工作数量
还需要说明的是，&lt;code&gt;batch&lt;/code&gt;也是可以使用&lt;code&gt;atq&lt;/code&gt;和&lt;code&gt;atrm&lt;/code&gt;来管理&lt;/p&gt;

&lt;h2 id=&quot;section-65&quot;&gt;循环执行的例行性工作调度&lt;/h2&gt;

&lt;h3 id=&quot;section-66&quot;&gt;用户的设置&lt;/h3&gt;

&lt;p&gt;用户想要新建循环型工作调度时，使用的是&lt;code&gt;crontab&lt;/code&gt;这个命令，与&lt;code&gt;at&lt;/code&gt;相似，我们也可以限制使用&lt;code&gt;crontab&lt;/code&gt;的用户账号。使用的限制数据有:
- &lt;code&gt;/etc/cron.allow&lt;/code&gt;
	将可以使&lt;code&gt;crontab&lt;/code&gt;的账号写入其中，若不在这个文件内的用户则不可使用&lt;code&gt;crontab&lt;/code&gt;
- &lt;code&gt;/etc/cron.deny&lt;/code&gt;
	将不可以使用&lt;code&gt;crontab&lt;/code&gt;的账号写入其中，若未记录到这个文件当中的用户，就可以使用&lt;code&gt;crontab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;优先级和&lt;code&gt;at&lt;/code&gt;的相似，一般来说，系统的默认保留一个空的&lt;code&gt;/etc/cron.deny&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当用户使用&lt;code&gt;crontab&lt;/code&gt;这个命令来新建工作调度之后，该项工作就会被记录到&lt;code&gt;/var/spool/cron/&lt;/code&gt;里面去了，而且是以账号来作为判别的。另外，&lt;code&gt;cron&lt;/code&gt;执行的每一项工作都会被记录到&lt;code&gt;/var/log/cron&lt;/code&gt;这个日志文件中，所以，如果你的Linux不知道有否被植入木马时，也可以查询一下&lt;code&gt;/var/log/cron&lt;/code&gt;这个日志文件&lt;/p&gt;

&lt;p&gt;当执行&lt;code&gt;crontab -e&lt;/code&gt;命令后，会进入vi编辑界面，然后以一个工作一行来编辑，每项工作(每行)的格式都是具有六个字段，这六个字段的意义分别如下:&lt;/p&gt;

&lt;p&gt;|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;|
|  代表意义  |  分钟  |  小时  |  日期  |  月份  |  周  |  命令  |
|:&amp;mdash;&amp;mdash;&amp;mdash;-:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;-:|:&amp;mdash;&amp;mdash;:|
|  数字范围  |  0~59  |  0~23  |  1~31  |  1~12  |  0~7 |  命令  |
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;|
周:周的数字为0或7时，都代表&amp;rdquo;星期天&amp;rdquo;的意思&lt;/p&gt;

&lt;p&gt;辅助字符:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;特殊字符&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代表意义&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*(星号)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表任何时刻都接受的意思。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;,(逗号)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表分隔时段的的意思。举例来说，如果要执行的工作是3:00与6:00时，就会是:&lt;code&gt;0 3,6 * * * command&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-(减号)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;代表一段时间范围内，举例来说，8点到12点之间的每小时的20分钟都进行一项工作:&lt;code&gt;20 8-12 * * * command&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;/n(斜线)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;那个n代表数字，即是每隔n单位间隔的意思，例如每五分钟进行一次，则:&lt;code&gt;*/5 * * * * command&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;需要注意的是,如果只是要删除某个&lt;code&gt;crontab&lt;/code&gt;的工作项目，那么请使用&lt;code&gt;crontab -e&lt;/code&gt;来重新编辑即可，如果使用&lt;code&gt;-r&lt;/code&gt;的参数，是会将所有的&lt;code&gt;crontab&lt;/code&gt;数据内容都删掉的，千万注意了！&lt;/p&gt;

&lt;h3 id=&quot;etccrontab&quot;&gt;系统的配置文件:&lt;code&gt;/etc/crontab&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个&lt;code&gt;crontab -e&lt;/code&gt;是针对用户的&lt;code&gt;cron&lt;/code&gt;来设计的，如果是系统的例行性任务时，只需要编辑&lt;code&gt;/etc/crontab&lt;/code&gt;这个文件就可以了。需要注意的是，&lt;code&gt;crontab -e&lt;/code&gt;这个crontab其实是&lt;code&gt;/usr/bin/crontab&lt;/code&gt;这个可执行文件，但是&lt;code&gt;/etc/crontab&lt;/code&gt;可是一个&amp;rdquo;纯文本文件&amp;rdquo;，你可以以root的身份编辑这个文件&lt;/p&gt;

&lt;p&gt;基本上，cron这个服务最低检测限制是&amp;rdquo;分钟&amp;rdquo;,所以cron会每分钟去读取一次&lt;code&gt;/etc/cronable&lt;/code&gt;与&lt;code&gt;/var/spool/cron/&lt;/code&gt;里面的数据内容，因此，只要编辑完&lt;code&gt;/etc/crontab&lt;/code&gt;这个文件，并且将它保存之后，那么cron的设置就自动会来执行了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/crontab&lt;/code&gt;文件中的内容如下所示:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;分&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;时&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;日&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;月&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;周&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;执行者&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;命令串&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;*&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;run-parts  /etc/cron.hourly&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;run-parts&lt;/code&gt;:将后面接的&amp;rdquo;目录&amp;rdquo;内的所有文件找出来执行&lt;/p&gt;

&lt;p&gt;由于CentOS提供的&lt;code&gt;run-parts&lt;/code&gt;这个script的辅助，因此&lt;code&gt;/etc/crontab&lt;/code&gt;这个文件里面支持两种执行命令的方式，一种是直接执行命令，一种则是以目录来规划:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;命令类型:&lt;code&gt;01 * * * * flyaway mail -s &quot;testing&quot; kiki &amp;lt; /home/flyaway/test.txt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;目录规划:&lt;code&gt;*/5 * * * * root run-parts /root/runcron&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-67&quot;&gt;可唤醒停机期间的工作任务&lt;/h2&gt;

&lt;h3 id=&quot;anacron&quot;&gt;什么是anacron&lt;/h3&gt;

&lt;p&gt;anacron并不是用来替代crontab的，anacron并不能指定何时执行某项任务，而是以天为单位或者是在开机后立刻进行anacron的操作，它会去检测停机期间应该进行但并没有进行的crontab任务，并将该任务执行一遍，然后anacron就会自动停止了。&lt;/p&gt;

&lt;h1 id=&quot;selinux&quot;&gt;程序管理与SELinux初探&lt;/h1&gt;

&lt;h2 id=&quot;process&quot;&gt;什么是进程(process)&lt;/h2&gt;

&lt;p&gt;在Linux中，触发任何一个事件时，系统都会将它定义成为一个进程，并且给予这个进程一个ID，成为PID,同时依据触发这个进程的用户与相关属性关系，给予这个PID一组有效的权限设置&lt;/p&gt;

&lt;h3 id=&quot;process--program&quot;&gt;进程与程序(process &amp;amp; program)&lt;/h3&gt;

&lt;p&gt;由当前进程衍生出来的其他进程在一般状态下，也会沿用这个进程的相关权限
&lt;strong&gt;总结&lt;/strong&gt;
程序(program):通常二进制程序放置在存储媒介中，以物理文件的形式存在
进程(process):程序被触发之后，执行者的权限与属性、程序的程序代码与所需要数据等会被加载到内存中，操作系统并给予这个内存内的单元的一个标示符(PID),可以说，进程就是一个正在运行中的程序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fork and exec:过程调用的流程&lt;/strong&gt;
进程之间的相互调用，在Linux中通常称为fork-and-exec的流程。进程会通过父进程以复制(fork)的方式产产生一个一模一样的子进程，然后被复制出来的子进程再以exec的方式来执行实际要进行的进程，最终就成为一个子进程的存在。
系统先以fork的方式复制一个与父进程相同的暂存进程，这个进程与父进程唯一的区别就是PID不同，但是这个暂存进程还会多一个PPID的参数，PPID就是父进程的进程标示符。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;系统或网络服务:常驻在内存的进程&lt;/strong&gt;
常驻进程被我们成为服务(daemon),系统的服务非常多，大致分为系统本身需要的服务，还有一些负责网络联机的服务。&lt;/p&gt;

&lt;h2 id=&quot;job-control&quot;&gt;工作管理(job control)&lt;/h2&gt;

&lt;h3 id=&quot;section-68&quot;&gt;什么是工作管理&lt;/h3&gt;

&lt;p&gt;在进行工作管理的行为中，其实每个工作都是目前bash的子进程，即彼此之间是有相关性的。我们无法以job control的方式由tty1的环境去管理tty2的bash&lt;/p&gt;

&lt;p&gt;出现提示符让你的操作的环境成为前台(foreground)，至于其他工作就可以让你放入后台(background)去暂停或运行。要注意的是，放入后台的工作想要运行时，它必须不能够与用户互动。举例来说，vim绝对不可能在后台里面执行(running)，而且放入后台的工作不可以使用[ctrl]+c来终止的&lt;/p&gt;

&lt;p&gt;要进行bash的job control必须要注意到的限制是:
- 这些工作所触发的进程必须来自于你shell的子进程
- 前台:你可以控制欲执行命令的这个环境称为前台(foreground)的工作
- 后台:可以运行的工作，无法使用[ctrl]+c终止它，可以使用bg/fg调用该工作
- 后台中的程序分为&amp;rdquo;暂停&amp;rdquo;(stop)与&amp;rdquo;运行中&amp;rdquo;(running)
- 后台中&amp;rdquo;执行&amp;rdquo;的进程不能等待terminal/shell的输入(input)&lt;/p&gt;

&lt;h3 id=&quot;job-control-1&quot;&gt;job control管理&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;直接将命令丢到后台中&amp;rdquo;执行&amp;rdquo;的&amp;amp;&lt;/strong&gt;
在需要执行的命令后面加上一个&amp;rdquo;&amp;amp;&amp;rdquo;就代表说这个命令丢到后台中去执行，此时bash会给予这个命令一个&amp;rdquo;工作号码&amp;rdquo;(job number),同时每个工作都会搭配一个PID，因为每一个工作都是一个进程。将工作放到后台去最大的好处就是不怕被[ctrl]+c中断，此外，将工作丢到后台当中要特别注意数据流的重定向，如果没有重定向的话，错误信息都会直接输出到屏幕上，影响前台的工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将目前工作丢到后台中&amp;rdquo;暂停&amp;rdquo;:[ctrl]-z&lt;/strong&gt;
默认情况下，使用[ctrl]-z丢到后台当中的工作都是&amp;rdquo;暂停&amp;rdquo;的状态&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看目前的后台工作状态:jobs&lt;/strong&gt;
利用&lt;code&gt;jobs&lt;/code&gt;命令可以查看目前有多少工作是在后台中的，输出结果中的&amp;rdquo;+&amp;rdquo;号表示默认取用的工作
其实+代表最近被放到后台的工作号码，-代表最近最后第二个被放置到后台中的工作号码，而超过最后第三个以后的工作，就不会有+/-符号存在了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将后台工作拿到前台来处理:fg&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;fg&lt;/span&gt; %jobnumber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;jobnumber表示工作号码&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;让工作在后台下的状态变成运行中:bg&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用法与&lt;code&gt;fg&lt;/code&gt;相同，只是是放在后台中运行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;管理后台当中的工作:kill&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -signal %jobnumber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;通过&lt;code&gt;kill&lt;/code&gt;命令可以给后台中执行的工作发送一个信号(signal),信号有很多种类，需要特别注意的是,-9通常是在强制删除一个不正常的工作时所使用的，-15则是以正常步骤结束一项工作(15也是默认值)，-1则是重新读一次配置文件(类似于reload)&lt;/p&gt;

&lt;p&gt;另外需要注意的是，&lt;code&gt;kill&lt;/code&gt;后面接的数字默认是PID，如果想要管理bash的工作控制，就得要加上%数字了&lt;/p&gt;

&lt;h3 id=&quot;section-69&quot;&gt;脱机管理问题&lt;/h3&gt;

&lt;p&gt;需要注意的是，我们在工作管理当中提到的&amp;rdquo;后台&amp;rdquo;指的是在终端机模式下可以避免[ctrl]-c中断的一个情境，并不是放到系统的后台去。所以，工作管理的后台依旧与终端机有关。在这样的情况下，如果是以远程连接的方式连接到你的Linux主机，并且将工作以&amp;amp;的方式放到后台去，在工作尚未结束时就脱机了，这个工作也会被中断掉，并不会继续执行
为了避免上述的情况，可以使用&lt;code&gt;nohup&lt;/code&gt;命令:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;nohup &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;命令与参数&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;			&lt;span class=&quot;c&quot;&gt;#在终端机前台中工作&lt;/span&gt;
nohup &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;命令与参数&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;amp;		&lt;span class=&quot;c&quot;&gt;#在终端机后台中工作&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;需要注意的是，&lt;code&gt;nohup&lt;/code&gt;并不支持bash内置的命令，因此你的命令必须要是外部命令才行，即把命令写入一个脚本文件中，然后用&lt;code&gt;nohup&lt;/code&gt;去调用这个脚本&lt;/p&gt;

&lt;h2 id=&quot;section-70&quot;&gt;进程管理&lt;/h2&gt;

&lt;h3 id=&quot;section-71&quot;&gt;进程的查看&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;ps:将某个时间点的进程运行情况选取下来&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;ps aux					&lt;span class=&quot;c&quot;&gt;#查看系统所有进程数据&lt;/span&gt;
ps -lA					&lt;span class=&quot;c&quot;&gt;#也是能够查看所有系统的数据&lt;/span&gt;
ps axjf					&lt;span class=&quot;c&quot;&gt;#连同部分进程数状态&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;仅查看自己的bash相关的进程:ps -l&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;|&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;|
|  F  |  S  |  UID|  PID    |  PPID   |  C  |  PRI | NI  | ADDR|  SZ    |  WCHAN |  TTY     |  TIME      |  CMD   | 
|:&amp;mdash;:|:&amp;mdash;:|:&amp;mdash;:|:&amp;mdash;&amp;mdash;-:|:&amp;mdash;&amp;mdash;-:|:&amp;mdash;:|:&amp;mdash;-:|:&amp;mdash;:|:&amp;mdash;:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;:|:&amp;mdash;&amp;mdash;&amp;ndash;:|:&amp;mdash;&amp;mdash;&amp;mdash;-:|:&amp;mdash;&amp;mdash;:|
|  4  |  S  |  0  |  13639  |  13637  |  0  |  75  |  0  |  -  |  1287  |  wait  |  pts/1   |  00:00:00  |  bash  |
|  4  |  R  |  0  |  13700  |  13639  |  0  |  77  |  0  |  -  |  1101  |  -     |  pts/1   |  00:00:00  |  ps    |
|&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;+&amp;mdash;&amp;mdash;&amp;ndash;|
说明如下:
- F:代表这个进程标志(precess flags)，说明这个进程的权限，常见的号码有:
		- 若为4，则表示权限为root
		- 若为1，则表示此子进程仅可进行复制(fork)而无法实际执行(exec)
- S:代表这个进程的状态(STAT),主要的状态有:
		- R(Running):该进程正在运行中
		- S(Sleep):该进程目前正在睡眠状态(idle),但可以被唤醒(signal)
		- D:不可被唤醒的状态，通常这个进程可能在等待I/O的情况(ex&amp;gt;打印)
		- T:停滞状态(stop),可能是工作控制(后台暂停)或除错(traced)状态
		- Z(Zombie):&amp;rdquo;僵尸&amp;rdquo;状态,进程已经终止但却无法被删除至内存外
- UID/PID/PPID:代表此进程被该UID所拥有/进程的PID号码/此进程的父进程PID号码。
- C:代表CPU使用率，单位为百分比
- PRI/NI:Priority/Nice的缩写，代表此进程被CPU所执行的优先级，数值越小代表该进程越快被CPU执行。
- ADDR/SZ/WCHAN:都与内存有关，ADDR是kernel function,指出该进程在内存的哪个部分，如果是running的进程，一般就会显示&amp;rdquo;-&amp;ldquo;。SZ代表此进程用掉多少内存。WCHAN表示目前进程是否运行中，同样，若为-表示正在进行中
- TTY:登陆者的终端机位置，若为远程登录则使用动态终端接口(pts/n)
- TIME:使用掉的CPU时间，注意，是此进程实际花费CPU运行的时间，而不是系统时间。
- CMD:就是command的缩写，造成此程序的触发进程的命令为何&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;查看系统所有进程:ps aux&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;USER&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;PID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;%CPU&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;%MEM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;VSZ&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RSS&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TTY&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;STAT&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;START&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;TIME&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;COMMAND&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;root&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2046&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;616&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;?&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ss&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;09:48&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0:01&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;init&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code&gt;ps -l&lt;/code&gt;和&lt;code&gt;ps aux&lt;/code&gt;显示的项目并不相同，各字段意义如下:
- USER:该进程属于哪个用户账号的。
- PID:该进程的进程标示符
- %CPU:该进程使用掉的CPU资源百分比
- %MEN:该进程所占用的物理内存百分比
- VSZ:该进程使用掉的虚拟内存量(KB)
- RSS:该进程占用的固定的内存量(KB)
- TTY:该进程是在哪个终端机上面运行，若与终端机无关，则显示?另外,tty1~tty6是本机上面的登陆者程序，若为pts/0等的，则表示为由网络连接进主机的进程
- STAT:该进程目前的状态，状态显示与ps -l的S标识相同(R/S/T/Z)
- START:该进程被触发启动的时间
- TIME:该进程实际使用CPU运行的时间
- COMMAND:该进程的实际命令&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;僵尸进程&lt;/strong&gt;
通常，造成僵尸进程的成因是因为该进程应该已经执行完毕，或者是因故应该要终止了，但是该进程的父进程却无法完整将该进程结束掉，而造成一直存在内存当中。如果你发现在某个进程的CMD后面还接上了&lt;defunct&gt;时，就代表该进程是僵尸进程。&lt;/defunct&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;top:动态查看进程的变化&lt;/strong&gt;
相对于ps是选取一个时间点的进程状态，top则可以持续检测进程运行的状态,top默认是每隔5s更新一次进程资源，可以使用-d来进行修改。top主要分为两个界面，上面的界面为整个系统的资源使用状态，基本上总共有六行，显示的内容依序是:
- 第一行(top&amp;hellip;): 
		- 目前的开机时间
		- 开机到目前为止所经过的时间
		- 已经登录的用户人数
		- 系统在1,5,15分钟的平均工作负载，越小代表系统越闲置，若高于1得要注意你的系统压力是否太过繁复了。
- 第二行(Tasks&amp;hellip;):显示的目前进程总数与个别进程在什么状态(running,sleeping,stopped,zombie)。比较需要注意的是最后的zombie那个数值，如果不是0的，那就需要查看哪个进程变成了僵尸
- 第三行(Cpus&amp;hellip;):显示的是CPU的整体负载，每个选项可用?查询。需要特别注意的是%wa,那个选项代表的是I/Owait，通常你的系统会变慢都是I/O产生的问题比较大！
- 第四行与第五行:表示目前物理内存与虚拟内存(Mem/Swap)的使用情况。
- 第六行:这个是当在top进程当中输入命令时显示状态的地方&lt;/p&gt;

&lt;p&gt;至于top下半部分的界面，则是每个进程使用的资源情况，比较需要注意的是：
- PID:每个进程的ID
- USER:该进程所属的用户
- PR:Priority的简写，进程的优先执行顺序，越小越早被执行
- NI:Nice的简写，与Priority有关，也是越小越早被执行
- %CPU:CPU的使用率 - %MEM:内存的使用率
- TIME+:CPU使用时间的累加&lt;/p&gt;

&lt;p&gt;top默认使用CPU使用率作为排序的重点，如果你想要使用内存使用率排序，则可以按下&amp;rdquo;M&amp;rdquo;,若要恢复则按下&amp;rdquo;P&amp;rdquo;即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pstree&lt;/strong&gt;
通过&lt;code&gt;pstree&lt;/code&gt;可以查看进程之间的相关性，所有进程都是依附在init这个进程下面的，它的进程号是1，因为它是由Linux内核主动调用的第一个进程&lt;/p&gt;

&lt;h3 id=&quot;section-72&quot;&gt;进程的管理&lt;/h3&gt;

&lt;p&gt;通过给予进程一个信号(signal)，就可以方便的管理进程。可以使用&lt;code&gt;kill -l&lt;/code&gt;查看所有的信号(signal)
主要的信号与名称及内容如下表所示:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;代号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SIGHUP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;启动被终止的进程，可让该PID重新读取自己的配置文件，类似于重新启动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SIGINT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;相当于用键盘[ctrl]-c来中断一个进程的进行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;9&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SIGKILL&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;代表强制中断一个进程的进行，如果该进程进行到一半，那么尚未完成的部分可能会有&amp;rdquo;半成品&amp;rdquo;产生，类似vim会有filename.swap保留下来&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;15&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SIGTERM&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;以正常的结束进程来终止该进程。由于是正常的终止，所以后续的操作会将它完成。不过，如果该进程已经发生问题，就是无法用正常的方法终止时，输入这个signal也是没用的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;17&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;SIGSTOP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;相当于用键盘[ctrl]-z来暂停一个进程的执行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;kill -siganl PID&lt;/strong&gt;
kill可以帮我们将信号传送给某个工作(%jobnumber)或者是某个PID(直接输入数字)，这个需要强调的是:&lt;strong&gt;kill后面直接加数字与加上%number的情况是不同的&lt;/strong&gt; 
使用kill命令也可以将某个莫名其妙的登陆者的连接删除，先通过&lt;code&gt;pstree -p&lt;/code&gt;找到相关进程，然后再以&lt;code&gt;kill -9&lt;/code&gt;将该进程删除，该连接就会被踢掉了！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;killall -signal&lt;/strong&gt;
&lt;code&gt;killall&lt;/code&gt;可以通过&amp;rdquo;执行命令的名称&amp;rdquo;来给予信号&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;killall -9 httpd			&lt;span class=&quot;c&quot;&gt;#强制删除所有以httpd启动的进程&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-73&quot;&gt;关于进程的执行顺序&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Priority与Nice值&lt;/strong&gt;
Linux给予进程一个所谓的&amp;rdquo;优先执行序&amp;rdquo;(priority,PRI),这个PRI值越低代表越优先的意思。不过这个PRI值是由内核动态调整的，用户无法直接调整PRI的值
由于PRI是内核动态调整的，用户无法干涉。如果想要调整进程的优先执行顺序时，就得要通过Nice值了，PRI与NI的相关性如下:
&lt;code&gt;PRI(new) = PRI(old) + nice&lt;/code&gt;
虽然nice值是可以影响PRI，不过，最终的PRI仍是要经过系统分析后才会决定的。当nice值为负值时，那么该程序就会降低PRI值，即会变得较优先被处理。
另外需要注意的是:
- nice值可调整的范围是-20~19
- root可随意调整自己或他人进程的Nice值，且范围为-20~19
- 一般用户仅可调整自己进程的nice值，且范围仅为0~19(避免一般用户抢占系统资源：)
- 一般用户仅可将nice值越调越高
- nice值是可以在父进程与子进程之间传递&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nice:新执行的命令即给予新的nice值&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;nice &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-n 数字&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;#用root给一个nice值为-5,用于执行vi&lt;/span&gt;
nice -n -5 vi &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;nice:已存在进程的nice重新调整&lt;/strong&gt;
如果要调整的是已经存在的某个进程的话，那么就要使用renice了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;renice &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;number&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; PID
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-74&quot;&gt;系统资源的查看&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;free:查看内存使用情况&lt;/strong&gt;
通常来说，系统会很有效率的把所有内存都用光，内存被用光是正常的，相反需要注意的是swap容量，一般来说，swap最好不要被使用，尤其swap最好不要被使用超过20%以上，如果发现超过20%，那最好更换物理内存了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uname:查看系统与内核相关信息&lt;/strong&gt;
这个命令可以列出目前系统的内很版本、主要硬件平台以及CPU类型等信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uptime:查看系统启动时间与工作负载&lt;/strong&gt;
显示目前系统已经开机多久的时间，以及1,5,15分钟的平均负载。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;netstat:跟踪网络&lt;/strong&gt;
基本上，&lt;code&gt;ntstat&lt;/code&gt;的输出分为两大部分，分别是网络与系统自己的进程相关性部分
先看网络部分:
- Proto:网络的数据包协议，主要分为TCP与UDP数据包
- Recv-Q:非由用户进程连接到此socket的复制的总字节数
- Send-Q:非由远程主机传送过来的acknowledged的总字节数
- LocalAddress:本地的IP端口情况
- ForeignAddress:远程主机的IP端口情况
- State:连接状态，主要有建立(ESTABLISED)及监听(LISTEN)&lt;/p&gt;

&lt;p&gt;socket进程部分:
- Protr:一般就是Unix
- RefCnt:连接到此socket的进程数量
- Flags:连接的标识
- Type:socket访问类型。主要确认连接的STREAM与不需要确认的DGRAM两种
- State:若为CONNECTED表示多个进程之间已经建立连接
- Path:连接到此socket的相关程序的路径，或者是相关数据输出的路径&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dmesg:分析内核产生的信息&lt;/strong&gt;
系统在开机的时候，内核会去检测系统的硬件，某些硬件到底有没有被识别出来，那就与这个时候的检测有关。通过&lt;code&gt;dmesg&lt;/code&gt;就能显示出这些系统检测信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;vmstat:检测系统资源变化&lt;/strong&gt;
如果想要动态了解系统资源的运行，那么就可以使用&lt;code&gt;vmstat&lt;/code&gt;这个命令
输出信息的各个字段的说明如下:
进程字段(procs)的选项分别为:
- r:等待运行中的进程数量
- b:不可被唤醒的进程数量，这两个选项越多，代表系统越忙碌
内存字段(memory)的选项分别为:
- swpd:虚拟内存被使用的容量
- free:未被使用的内存容量
- buff:用于缓冲存储器
- cache:用于高速缓存
内存交换空间(swap)的选项分别为:
- si:由磁盘中将程序取出的量
- so:由于内存不足而将没用到的程序写入到磁盘的swap容量。如果si/so的数值太大，表示内存的数据经常得在磁盘与内存之间传来传去，系统性能会很差
- 磁盘读写(io)的选项分别为:
- bi:由磁盘写入的块数量
- bo:写入到磁盘去的块数量。如果这部分的值越高，代表系统的I/O非常忙碌
系统(system)的项目分别为:
- in:每秒钟被中断的进程次数
- cs:每秒钟进行的事件切换次数。这两个数值越大，代表系统与接口设备的通信非常频繁。这些接口设备包括磁盘、网卡、时钟等
CPU的选项分别为:
- us:非内核层的CPU使用状态
- sy:内核层所使用的CPU状态
- id:闲置的状态
- wa:等待I/O所耗费的CPU状态
- st:被虚拟机(virtual machine)所盗用的CPU使用状态&lt;/p&gt;

&lt;h2 id=&quot;section-75&quot;&gt;特殊文件与程序&lt;/h2&gt;

&lt;h3 id=&quot;suidsgid&quot;&gt;具有SUID/SGID权限的命令执行状态&lt;/h3&gt;

&lt;p&gt;SUID的程序被一般用户执行的过程:
- SUID权限仅对二进制程序(binary program)有效
- 执行者对于该程序需要具有x的可执行权限
- 本权限仅在执行该程序的过程中有效(run-time)
- 执行者具有该程序所有(owner)的权限&lt;/p&gt;

&lt;p&gt;当一般用户触发一个具有SUID权限的程序时，会取得一个新的进程与PID，该PID产生时通过SUID来给予该PID特殊的权限设置。&lt;/p&gt;

&lt;h3 id=&quot;proc&quot;&gt;/proc/*代表的意义&lt;/h3&gt;

&lt;p&gt;我们之前提到的所谓的进程都是在内存当中的，而内存当中的数据又都是写入到/proc/*这个目录下的，所以，我们可以直接查看/proc这个目录当中的文件
基本上，目前主机上面的各个进程的PID都是以目录的类型存在于/proc当中,每个进程的目录中，包含了各自的各种数据&lt;/p&gt;

&lt;h3 id=&quot;section-76&quot;&gt;查询已打开文件或已执行程序打开的文件&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;fuser:通过文件(或文件系统)找出正在使用该文件的程序&lt;/strong&gt;
输出结果中的Access的选项代表的意义为:
- c:此进程在当前目录下(非子目录)
- e:可被触发为执行状态
- f:是一个被打开的文件
- F:该文件被打开了，不过在等待回应中
- m:可能为分享的动态函数库&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;lsof:列出被进程所打开的文件名&lt;/strong&gt;
相对于&lt;code&gt;fuser&lt;/code&gt;反过来的操作就是&lt;code&gt;lsof&lt;/code&gt;，&lt;code&gt;lsof&lt;/code&gt;能够查出某个进程打开或者使用的文件与设备&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pidof:找出某个正在执行的进程的PID&lt;/strong&gt;
这个&lt;code&gt;pidof&lt;/code&gt;命令配合上&lt;code&gt;ps aux&lt;/code&gt;与正则表达式，就可以很轻易地找到你所想要的程序内容了&lt;/p&gt;

&lt;h2 id=&quot;selinux-1&quot;&gt;SELinux初探&lt;/h2&gt;

&lt;h3 id=&quot;selinux-2&quot;&gt;什么是SELinux&lt;/h3&gt;

&lt;p&gt;SELinux:Security Enhanced Linux,字面上意义就是&lt;strong&gt;安全强化的Linux&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这部分内容比较多，而且暂时没有什么实际用途，所以放在以后再学习这部分内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;daemons&quot;&gt;认识系统服务(daemons)&lt;/h1&gt;

&lt;h2 id=&quot;daemonservice&quot;&gt;什么是daemon与服务(service)&lt;/h2&gt;

&lt;p&gt;service:常驻在内存中的进程，且可以提供一些系统或网络的功能
deemon:实现某个service的程序&lt;/p&gt;

&lt;h3 id=&quot;daemon&quot;&gt;daemon的主要分类&lt;/h3&gt;

&lt;p&gt;如果依据deamon的启动与管理方式来区分，基本上，可以将daemon分为可独立启动的stand alone，与通过一个super daemon来统一管理的服务这两大类
- &lt;strong&gt;stand alone:此daemon可以自行单独启动服务&lt;/strong&gt;
	这种类型的daemon可以自动启动而不必通过其他机制的管理，daemon启动并加载到内存后就一直占用内存与系统资源。最大的优点就是:因为是一直存在在内存内持续提供服务，因此对于发生客户端请求时，stand alone的daemon响应速度较快。常见的stand alone daemon有www的daemon(httpd)、FTP的daemon(vsftpd)等
- &lt;strong&gt;super daemon:一个特殊的daemon来统一管理&lt;/strong&gt;
	这种服务的启动方式则是通过一个统一的daemon来负责唤起服务。这个特殊的daemon就被称为super daemon。早期的super daemon是inetd这一个，后来则被xinetd所代替。这种机制有趣的地方在于:&lt;strong&gt;当没有客户端请求时，各项服务都是未启动的状态，等到来自客户端的请求时，super daemon才会唤醒对应的服务，当客户端的请求结束后，被唤醒的这个服务也会关闭并释放系统资源&lt;/strong&gt;
	这种机制的好处是:1.由于super daemon负责唤醒各项服务，因此super daemon可以具有安全控管机制，就是类似网络防火墙的功能 2.由于服务在客户端连接结束后就关闭，因此不会一直占用系统资源。缺点是服务的反应时间会比较慢，因为该服务要先从磁盘加载到内存中去，常见的super daemon所管理的服务例如有telnet&lt;/p&gt;

&lt;p&gt;另外需要注意的是，针对super daemon的处理模式有两种:
- multi-threaded(多线程)
- single-threaded(单线程)&lt;/p&gt;

&lt;p&gt;在Linux中stand daemon与super daemon是可以共存的&lt;/p&gt;

&lt;p&gt;如果以daemon提供服务的工作状态来区分，又可以将daemon分为两类，分别是:
- signal-control:这种daemon是通过信号来管理的，只要有任何客户端请求进来，它就会立即启动区处理，例如打印机的服务(supsd)
- interval-control:这种daemon则主要是每隔一段时间去主动执行某项工作，所以需要做的就是在配置文件中指定服务要进行的时间与工作，该服务在制定的时间才回去完成工作&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;daemon的命名规则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当开发一个服务时，通常程序的文件名是服务名后面加上一个&amp;rsquo;d&amp;rsquo;,例如at和cron这两个服务，它们的程序文件名会被取为atd与crond&lt;/p&gt;

&lt;h3 id=&quot;section-77&quot;&gt;服务与端口的对应&lt;/h3&gt;

&lt;p&gt;网络服务需要和端口绑定，服务与端口的对应文件:&lt;code&gt;/etc/services&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;daemon-1&quot;&gt;daemon的自动脚本与启动方式&lt;/h3&gt;

&lt;p&gt;虽然提供某个服务的daemon只是一个进程，但是这个daemon的启动还需要执行文件、配置文件、执行环境等，要启动一个daemon，需要考虑的事情有很多，并非单纯执行一个进程就够了
通常distribution会给我们一个简单的shell script来进行启动的功能。该script可以进行环境的检查、配置文件的分析、PID文件的放置，以及相关重要交换文件的锁住(lock)操作，只要执行该script，上述的操作就一口气连续进行，最终就能够顺利且简单地启动这个daemon。
daemon相关文件的放置位置:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/init.d/*:启动脚本放置处&lt;/strong&gt;
系统上几乎所有的服务启动脚本都放置在这里，事实上这是公认的目录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/sysconfig/*:各服务的初始化环境配置文件&lt;/strong&gt;
几乎所有的服务都会将初始化的一些参数设置写入到这个目录下&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/xinetd.conf,/etc/xinetd.d/*:super daemon配置文件&lt;/strong&gt;
super daemon的主要配置文件(其实是默认值)为&lt;code&gt;/etc/xinetd.d.conf&lt;/code&gt;,但是super daemon只是一个统一管理的机制，它所管理的其他daemon的设置则写在&lt;code&gt;/etc/xinetd.d/*&lt;/code&gt;里面&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/*:各服务各自的配置文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/var/lib/*:各服务产生的数据库&lt;/strong&gt;
一些会产生数据的服务都会将它的数据写入到&lt;code&gt;/var/lib/&lt;/code&gt;目录下。举例来说，数据库管理系统MySQL的数据默认就是写入到&lt;code&gt;/var/lib/mysql/&lt;/code&gt;这个目录下。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/var/run/*:各服务的程序的PID记录处&lt;/strong&gt;
虽然之前说过，所有内存中的进程都是写入到&lt;code&gt;/proc/*&lt;/code&gt;中的，但是，为了在管理服务时不影响其他的进程，所以daemon通常会将自己的PID记录一份到&lt;code&gt;/var/run/*&lt;/code&gt;当中&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stand alone的/etc/init.d/*启动&lt;/strong&gt;
之前说过，几乎系统上面所有服务的启动脚本都在&lt;code&gt;/etc/ini.d&lt;/code&gt;下面，这里面的脚本会去检测环境、查找配置文件、加载distribution提供的函数功能、判断环境是否可以运行此daemon等，等一切都检测完成完毕且确定可以运行后，再以shell script的case&amp;hellip;esac语法来启动、关闭、查看此daemon。&lt;/p&gt;

&lt;p&gt;CentOS还提供了另外的可以启动stand alone服务的脚本，那就是service这个进程。其实service仅是一个script，它可以分析你执行的service后面的参数，然后根据你的参数再到&lt;code&gt;/etc/init.d&lt;/code&gt;去去的正确的服务来start或stop&lt;/p&gt;

&lt;p&gt;事实上，在Linux系统中，要开或关某个端口，就是需要启动或关闭某个服务。因此，你可以找出某个端口对应的服务及程序对应的服务，进而启动或关闭它，那么那个由该服务而启动的端口自然就会关掉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;super daemon的启动方式&lt;/strong&gt;
其实super daemon本身也是一个stand daemon的服务，因为super daemon要管理后续的其他服务，它当然自己要常驻在内存中，所以super daemon自己自动的方式与stand alone是相同的。但是它所管理的其他daemon就不是这样做了，必须要在配置文件中设置为启动该daemon才行。配置文件就是&lt;code&gt;/etc/xinetd.d/*&lt;/code&gt;的所有文件&lt;/p&gt;

&lt;h2 id=&quot;super-daemon&quot;&gt;解析super daemon的配置文件&lt;/h2&gt;
&lt;p&gt;super daemon是一个总管进程，这个super daemon是xinetd这个进程实现的，这个xinetd可以进行安全性或者其他管理机制的控制，xinetd也能控制连接的行为，这些控制手段都可以让我们的某些服务更为安全、资源管理更为合理
super daemon的默认配置文件是&lt;code&gt;/etc/xinetd.conf&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;xinetdconf&quot;&gt;默认配置文件:xinetd.conf&lt;/h3&gt;

&lt;p&gt;如果你启动某个supe daemon管理的服务，但是该服务设置值并没有&lt;code&gt;/etc/xinetd.conf&lt;/code&gt;中指定的那些项目，那么该服务的设置值就以上述的默认值为主
既然这只是一个默认参数文件，那么自然有更多的服务参数文件。而所有的服务参数文件都在&lt;code&gt;/etc/xinetd.d&lt;/code&gt;里面,其中的参数文件的格式如下所示:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;service &amp;lt;service_name&amp;gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&amp;lt;attribute&amp;gt;			&amp;lt;assign_op&amp;gt;			&amp;lt;value&amp;gt;				&amp;lt;value&amp;gt;			...
			....
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;第一行一定都有一个service，至于那个&lt;service_name&gt;里面的内容则与`/etc/services`有关，因为它可以对照着`/etc/services`内的服务名称与端口号来决定所要启动的port是哪个。相关的参数就在两个大括号中间。atribute是一些xinetd的管理参数，assign_op则是参数的设置方法，assign_op的主要设置形式有:
- =:表示后面的设置参数就是这样
- +=:表示后面的设置为在原来的设置里面加入新的参数
- -=:表示后面的设置为在原来的参数中舍弃这里输入的参数&lt;/service_name&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-78&quot;&gt;系统开启的服务&lt;/h2&gt;

&lt;h3 id=&quot;section-79&quot;&gt;查看系统启动的服务&lt;/h3&gt;

&lt;p&gt;服务名称与port对应的数据在&lt;code&gt;/etc/services&lt;/code&gt;中
基本上，以&lt;code&gt;ps&lt;/code&gt;来查看整个系统上面的服务是比较妥当的，因为它可以将全部的process都找出来。但是，如果只关心网络监听服务的话，利用&lt;code&gt;netstat&lt;/code&gt;可以取得很多跟网络有关的服务信息，通过这个命令，我们可以轻易了解到网络的状态，并且可以通过PID与kill相关功能，将有问题的数据给它杀掉。当然，要更详细地取得PPID的话，才能够完全阻挡有问题的进程！&lt;/p&gt;

&lt;h3 id=&quot;section-80&quot;&gt;设置开机后立即启动服务的方法&lt;/h3&gt;

&lt;p&gt;Linux开机过程:
1. 打开计算机电源，开始读取BIOS并进行主机的自我测试
2. 通过BIOS取得第一个可开机设备，读取主要开机区(MBR)取得启动装载程序
3. 通过启动装载程序的设置，取得kernel并加载内存且检测系统硬件
4. 内核主动调用init进程
5. init进程开始执行系统初始化(&lt;code&gt;/etc/rc.d/rc.sysinit&lt;/code&gt;)
5. 依据init的设置进行daemonstart(&lt;code&gt;/etc/rc.d/rc[0-6].d/*&lt;/code&gt;)
6. 加载本机设置(&lt;code&gt;/etc/rc.d/rc.local&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;我们在启动Linux系统时，可以进入不同的模式，这模式我们称为执行等级(run level)。不同的执行等级有不同的功能与服务，目前所知道的正常的执行等级有两个，一个是具有X窗口界面的run level 5，另一个则是纯文本界面的run level 3.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;chkconfig:管理系统服务默认开机启动与否&lt;/strong&gt;
我们可以通过&lt;code&gt;chkconfig&lt;/code&gt;命令很轻松地管理super daemon的服务&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt; &lt;span class=&quot;c&quot;&gt;#列出目前系统上面所有被chkconfig管理的服务&lt;/span&gt;
chkconfig --list | more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外需要注意的是，&lt;code&gt;chkconfig&lt;/code&gt;命令仅是设置开机默认启动的服务而已，所以该服务目前的状态如何是不知道的&lt;/p&gt;

&lt;h1 id=&quot;section-81&quot;&gt;认识与分析日志文件&lt;/h1&gt;

&lt;h2 id=&quot;section-82&quot;&gt;什么是日志文件&lt;/h2&gt;

&lt;p&gt;日志文件简单地说，就是&lt;strong&gt;记录系统活动的几个文件，例如:何时、何地(来源IP)、何人(什么服务名称)、做了什么操作(信息日志)&lt;/strong&gt;换句话说，记录系统在什么时候由哪个进程做了什么样的行为时，发生了何种的事件等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日志文件的重要性&lt;/strong&gt;
- 解决系统方面的错误
- 解决网络服务的问题
- 过往事件记录簿&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linux常见的日志文件名&lt;/strong&gt;
日志文件的权限通常是设置为仅有root能够读取而已
- /var/log/cron
	例行性工作的日志文件
- /var/log/dmesg
	记录系统在开机的时候内核检测过程所产生的各项信息
- /var/log/lastlog
	记录系统上面所有的账号最近一次登录系统时的相关信息
- /var/log/mailog或/var/log/mail/*
	记录邮件往来的信息，其实主要是记录sendmail(SMTP协议提供者)与dovecot(POP3协议提供者)所产生的信息
- /var/log/messages
	这个文件相当重要，几乎系统发生的错误信息都会记录在这个文件中，如果系统发生莫名的错误时，这个文件一定要查阅的日志文件之一
- /var/log/secure
	基本上，只要牵涉到需要输入账号密码的软件，那么当登录时(不管登录正确或错误)都会被记录在此文件中
- /var/log/wtmp,/var/log/faillog
	这两个文件可以记录正确登录系统者的账户信息(wtmp)与错误登录时所使用的账户信息(faillog)
- /var/log/httpd/&lt;em&gt;,/var/log/news/&lt;/em&gt;,/var/log/samba/*
	不同的网络服务会使它们自己的日志文件案来记载它们自己产生的各项信息&lt;/p&gt;

&lt;p&gt;常见的日志文件就是这几个，但是不同的Linux distribution中，通常日志文件的文件名不会相同。对于不同的系统还需要查阅相关的日志文件设置数据才行&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日志文件所需相关服务(daemon)与进程&lt;/strong&gt;
日志文件的产生方式一般有两种:一种是有软件开发商自行定义写入的日志文件与相关格式，例如apache；另一种则是由Linux distribution提供的日志文件管理服务来统一管理，只要将信息丢给这个服务之后，它就会自己分门别类地将各种信息放置到相关日志文件去
CentOS提供syslog这个服务来统一管理日志文件，除了syslog以外，内核也需要额外的登录服务来记录内核产生的各项信息，这个专门记录内核信息的日志文件服务就是klogd。总的来说，日志文件所需的服务主要就是syslog和klogd这两者
为了防止日志文件无限量增大，我们可以通过logrotate(日志文件轮替)来自动化处理日志文件容量与更新的问题&lt;/p&gt;

&lt;p&gt;所谓logrotate，基本上就是将旧的日志文件更改名称，然后新建一个空的日志文件，如果以来，新的日志文件将重新开始记录，然后只要将旧的日志文件留下一阵子，那就可以达到将日志文件&amp;rdquo;轮转&amp;rdquo;。
总结如下:
syslogd:主要登录系统与网络等服务的信息要
klogd:主要登录内核产生的各项信息
logrotate:主要进行日志文件的轮替功能&lt;/p&gt;

&lt;h2 id=&quot;syslogd&quot;&gt;syslogd:记录日志文件的服务&lt;/h2&gt;

&lt;h3 id=&quot;section-83&quot;&gt;日志文件内容的一般格式&lt;/h3&gt;

&lt;p&gt;一般来说，系统产生的信息经过syslog而记录下来的数据中，每条信息均会记录下面几个重要的数据:
- 事件发生的日期与时间
- 发生此事件的主机名
- 启动该时间的服务名称或函数名称
- 该信息的实际数据内容&lt;/p&gt;

&lt;h3 id=&quot;syslogetcsyslogconf&quot;&gt;syslog的配置文件:/etc/syslog.conf&lt;/h3&gt;

&lt;p&gt;基本上，syslog针对各种服务与信息记录在某些文件的配置文件就是/etc/syslog.conf,这个文件规定了什么服务的什么等级信息以及需要被记录在哪里(设备或文件)这三个东西，设置的语法如下所示:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;服务名称&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;.&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;信息等级				信息记录的文件名或设备或主机
 &lt;span class=&quot;c&quot;&gt;#以mail举例:&lt;/span&gt;
mail.info			/var/log/maillog_info
 &lt;span class=&quot;c&quot;&gt;#这一行说明:mail服务产生的大于等于info等级的信息，都记录到/var/log/maillog_info文件中&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;服务名称&lt;/strong&gt;
syslog本身有设置一些服务，你可以通过这些服务来存储系统的信息.syslog设置的服务主要有下面这些:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;服务类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;auth(authpriv)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;主要与认证有关的机制，例如login,ssh,su等需要账号/密码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;cron&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;就是例行性工作调度cron/at等生成信息日志的地方&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;daemon&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与各个daemon有关的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;kern&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;就是内核(kernel)产生信息的地方&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lpr&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;即是打印相关的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;mail&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;只要与邮件收发有关的信息记录都属于这个&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;news&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与新闻组服务器有关的东西&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;syslog&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;就是syslogd这个程序本身生成的信息&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;user,uucp,local0~7&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与Unix like机器本身有关的一些信息&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;上述表格中的都是syslog自行制定的服务名称，软件开发商可以通过调用上述的服务名称来记录他们的软件。举例来说，sendmail与postfix及dovecot都是与邮件有关的软件，这些软件在设计日志文件记录时，都会主动调用syslogd内的mail服务名称(LOG_MAIL)，所以上述的三个软件(sendmail,postfix,dovecot)产生的信息在syslog看起来，就会是mail类型的服务了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信息等级&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;等级&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;等级名称&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;info&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;仅是一些基本的信息说明而已&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;notice&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;除了info外还需要注意的一些信息内容&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;warning(warn)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;警示的信息，可能有问题，但是还不至于影响到某个daemon运行的信息；基本上，info,notice,warn这三个信息都是在告知一些基本信息而已，应该还不至于造成一些系统运行困扰&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;4&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;err(error)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;一些重大错误信息，例如配置文件的某些设置造成该服务器无法启动的信息说明，通常通过err的错误告知，应该可以了解到无法启动的问题&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;crit&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;比error还要严重的错误信息，这个crit是临界点(critical)的缩写，这个错误已经很严重了&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;6&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;alert&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;警告，已经很有问题的等级，比crit还要严重&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;7&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;emerg(panic)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&amp;ldquo;疼痛&amp;rdquo;等级，意指系统已经几乎要死机的状态！很严重的错误信息了。通常大概只有硬件出问题导致整个内核无法顺利运行，就会出现这样的等级的信息&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;除了这些等级之外，还有两个特殊的等级，那就是debug(错误检测等级)与none(不需要登录等级)两个，当我们想要做一些错误检测或者是忽略掉某些服务的信息时，就用这两个&lt;/p&gt;

&lt;p&gt;另外，还需要注意一下信息等级之前的[.=!]连接符号，它的意思是这样的:
- &amp;ldquo;.&amp;rdquo;代表后面还要高的等级(含该等级)都被记录下来的意思，例如:mail.info代表只要是mail的信息，而该信息等级高于info(含info)时，就会被记录下来的意思
- &amp;ldquo;.=&amp;rdquo;代表所需要的等级就是后面接的等级而已，其他的不要
- &amp;ldquo;.!&amp;rdquo;代表不等于，即是除了该等级外的其他等级都记录&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;信息记录的文件名或设备或主机&lt;/strong&gt;
下面是一些常见的放置处:
- 文件的绝对路径:通常就是放在/var/log里面的文件
- 打印机或其他:例如/dec/lp0这个打印设备
- 用户名称:显示给用户
- 远程主机:例如@www.vbird.tsai,当然，要对方主机也能支持才行
- *:代表目前在线的所有人&lt;/p&gt;

&lt;h2 id=&quot;section-84&quot;&gt;日志文件的轮替&lt;/h2&gt;

&lt;p&gt;syslog利用的是daemon的方式来启动的，当有需求的时候立刻会被执行的，但是logrotate却是在规定时间到了之后才来进行日志文件的轮替，所以这个logrotate程序当然是挂在cron下面进行的。/etc/cron.daily/logrotate就是记录了每天要进行的日志文件轮替行为&lt;/p&gt;

&lt;h3 id=&quot;logrotate&quot;&gt;logrotate的配置文件&lt;/h3&gt;

&lt;p&gt;logrotate的参数配置文件:
- /etc/logrotate.conf
- /etc/logrotate.d/&lt;/p&gt;

&lt;p&gt;其中，logrotate.conf才是主要的参数文件，至于logrotate.d是一个目录，该目录里面的所有文件都会被主动读入/etc/logrotate.conf当中进行.另外，在/etc/logrotate.d/里面的文件中，如果没有指定一些详细的设置，在以/etc/logrotate.conf这个文件的规定来指定为默认值&lt;/p&gt;

&lt;p&gt;logrotate.conf和logrotate.d目录里面的文件都是具有一定格式的，可以进行修改，做成自定义的logrotate操作,具体的格式请参阅P589的例子&lt;/p&gt;

&lt;h2 id=&quot;section-85&quot;&gt;重点回顾&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;日志文件可以记录一个事件的何时、何地、何人、何事四大信息，故系统有问题时务必查询日志文件 &lt;/li&gt;
  &lt;li&gt;系统的日志文件默认都集中放置到/var/log/目录内，其中又以messages记录的信息最多&lt;/li&gt;
  &lt;li&gt;日志文件记录的主要服务与程序为syslogd,klogd,log&lt;/li&gt;
  &lt;li&gt;syslogd的配置文件在/etc/syslog.conf中，内容语法为:服务.等级记载设备或文件&lt;/li&gt;
  &lt;li&gt;syslogd本身有提供日志文件服务器的功能，通过修改/etc/sysconfig/syslog内容即可实现&lt;/li&gt;
  &lt;li&gt;logrotate程序利用crontab来进行日志文件的轮替功能&lt;/li&gt;
  &lt;li&gt;logrotate的配置文件为/etc/logrotate.conf，而额外的设置则可写入/etc/logrotate.d/*内&lt;/li&gt;
  &lt;li&gt;logwatch为CentOS5默认提供的一个日志文件分析软件&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;loader&quot;&gt;启动流程、模块管理与Loader&lt;/h1&gt;

&lt;h2 id=&quot;linux-16&quot;&gt;Linux的启动流程分析&lt;/h2&gt;

&lt;h3 id=&quot;section-86&quot;&gt;启动流程一览&lt;/h3&gt;

&lt;p&gt;系统启动的过程如下:
1. 加载BIOS的硬件信息与进行自我测试，并依据设置取得一个可启动的设备
2. 读取并执行第一个启动设备内MBR的boot Loader(即是grub,spfdisk等程序)
3. 依据boot loader的设置加载Kernel,Kernel会开始检测硬件与加载驱动程序
4. 在硬件驱动成功之后，Kernel会主动调用init进程，而init会取得run-level信息
5. init执行/etc/rc.d/rc.sysinit文件来准备软件执行的操作环境(如网络、时区等)
6. init执行run-level的各个服务的启动(script)
7. init执行/etc/rc.d/rc.local文件
8. init执行终端机模拟程序mingetty来启动login进程，最后就等待用户登录&lt;/p&gt;

&lt;h3 id=&quot;biosboot-loaderkernel&quot;&gt;BIOS,boot loader与kernel加载&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Boot Loader的功能&lt;/strong&gt;
每个文件系统都会保留一块引导扇区(boot sector)提供操作系统安装boot loader，而通常操作系统默认都会安装一份loader到它根目录所在的文件系统的boot sector上。
每个操作系统默认是会安装一套boot loader到它自己的文件系统中，而在Linux系统安装时，你可以将boot loader安装到MBR去，也可以选择不安装。如果选择安装到MBR的话，那理论上你在MBR于boot sector都会保留一份boot loader程序。至于windows安装时，它默认会主动将MBR与boot sector都装上一份boot loader。所以，你会发现安装多重操作系统时，你的MBR经常会被不同的操作系统的boot loader覆盖&lt;/p&gt;

&lt;p&gt;boot loader的主要功能如下:
- 提供菜单:用户可以选择不同的启动选项，这也是多重引导的重要功能
- 加载内核文件:直接指向可启动的程序区段来开始操作系统
- 转交其他loader:将引导装载功能转交给其他loader负责&lt;/p&gt;

&lt;p&gt;但是，windows的boot loader是没有转交功能的！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;加载内核检测硬件与initrd的功能&lt;/strong&gt;
当我们通过boot loader的管理而开始读取内核文件后，接下来，Linux就会将内核解压缩到内存当中,并且利用内核的功能，开始测试与驱动各个周边设备，包括存储设备、CPU、网卡、声卡等。此时Linux内核会以自己的功能重新检测一次硬件，而不一定会使用BIOS检测到的硬件信息。也就是说，内核此时才开始接管BIOS后的工作。
一般来说，内核文件会被放置到/boot里面，并且取名为/boot/vmlinuz&lt;/p&gt;

&lt;p&gt;为了硬件开发商与其他内核功能开发者的便利，因此Linux内核是可以通过动态加载内核模块的，这些内核模块就放置在/lib/modules目录内。由于模块放置到磁盘根目录内(要记得/lib不可以与/分别放在不同的分区)，因此在启动的过程中内核必须要挂载根目录，这样才能够读取内核模块提供加载驱动程序的功能,而且为了担心影响到磁盘内的文件系统，因此启动过程中根目录是以只读的方式来挂载的&lt;/p&gt;

&lt;p&gt;一般来说，非必要的功能且可以编译成为模块的内核功能，目前的Linux distribution都会将它编译成为模块。因此，USB,SATA,SCSI等磁盘设备的驱动程序通常都是以模块的方式来存在的&lt;/p&gt;

&lt;p&gt;虚拟文件系统(InitialRAM Disk)一般使用的文件名为/boot/initrd，这个文件的特色，它也能够通过boot loader来加载到内存中，然后这个文件会被解压缩并且在内存当中仿真成一个目录，且此仿真在内存当中的文件系统能够提供一个可执行的程序，通过该程序来加载启动过程中所需要的内核模块，通常这些模块就是USB,RAID,LVM,SCSI等文件系统与磁盘接口的驱动程序&lt;/p&gt;

&lt;p&gt;事实上，initrd不是必须的，需要initrd最重要的原因是，当启动时无法挂载根目录的情况下，此时就一定需要initrd，例如的你根目录在特殊在磁盘接口(USB,SATA,SCSI)中，或者是你的文件系统较为特殊(LVM,RAID)，才会需要initrd
如果你的Linux是安装在IDE接口的磁盘上，并且使用默认的ext2/ext3文件系统，那么不需要initrd也能够顺利启动进入Linux的&lt;/p&gt;

&lt;h3 id=&quot;initetcinittabrunlevel&quot;&gt;第一个进程init及配置文件/etc/inittab与runlevel&lt;/h3&gt;

&lt;p&gt;在内核加载完毕进行完硬件检测与驱动程序加载后，此时你的主机硬件应该已经准备就绪了，此时内核会主动调用第一个进程，那就是/sbin/init.
/sbin/init最主要的功能就是准备软件执行的环境，包括系统的主机名、网络设置、语系处理、文件系统格式以及其他服务的启动.而所有的操作都会通过init的配置文件，即/etc/inittab来规划，而inittab内还有一个很重要的设置选项，那就是默认的run level(启动执行等级)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run level:执行等级&lt;/strong&gt;
Linux通过设置run level来规定系统使用不同的服务来启动，让Linux的使用环境不同。基本上run level分为7个等级:
- 0-halt(系统直接关机)
- 1-single user mode(单用户维护模式，用在系统出问题时维护)
- 2-Multi-user,without NFS(类似下面的runlevel3,但无NFS服务)
- 3-Full multi-user mode(完整含有网络功能的纯文本模式)
- 4-unused(系统保留功能)
- 5-X11(与runlevel3类似，但加载使用X Window)
- 6-reboot(重新启动)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/inittab的内容与语法&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;设置选项&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;run level&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;init的操作行为&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;命令选项&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;设置选项:最多四个字符，代表init的主要工作选项，只是一个简单的代表说明&lt;/li&gt;
  &lt;li&gt;run level:该选项在哪些run level下面进行的意思。如果是35则代表run level 3/5都会执行&lt;/li&gt;
  &lt;li&gt;init的操作行为:主要可以进行的操作选项意义如下表:
 |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|
     |  inittab的设置值  |    意义说明                                                         |
 |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;|
 |  initdefault      |  代表默认的runlevel设置值                                           |
 |  sysinit          |  代表系统初始化的操作选项                                           |
 |  ctrlaltdel       |  代表[ctrl]+[alt]+[del]三个按键是否可以重新启动的设置               |
 |  wait             |  代表后面字段设置的命令项目必须要执行完毕才能继续下面的其他操作     |
 |  respawn          |  代表后面字段的命令可以无限制再生(重新启动)。举例来说，tty1的mingetty产生的可登陆界面，在你注销而结束后，系统再开一个新的可登陆界面等待下一个登录                                                    |
 |&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|&lt;/li&gt;
  &lt;li&gt;命令选项:即应该可以进行的命令，通常是一些script&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;initetcrcdrcsysinit&quot;&gt;init处理系统初始化流程(/etc/rc.d/rc.sysinit)&lt;/h3&gt;

&lt;p&gt;开始加载各项系统服务之前，得先设置好整个系统环境，主要利用/etc/rc.d/rc.sysinit这个shell script来设置好系统环境
如果使用vim去查阅/etc/rc.d/rc.sysinit的话，那么可以发现主要的工作大体有这么几项:
1. 取得网络环境与主机类型:
   读取网络配置文件/etc/sysconfig/network,取得主机名与默认网关(gateway)等网络环境
2. 测试与挂载内存设备/proc及USB设备/sys
3. 决定是否启动SELinux
4. 启动系统的随机数生成器
5. 设置终端机(console)字体
6. 设置显示于启动过程中的欢迎界面(textbanner)
7. 设置系统时间(clock)与时区设置:需读入/etc/sysconfig/clock设置值
8. 设置设备的检测与Plug and Play(PnP)参数的测试
9. 用户自定义模块加载
   用户可以在/etc/sysconfig/modules/*.modules中加入自定义的模块，则此时会被加载到系统当中
10. 加载内核的相关设置
    系统会主动去读取/etc/sysctl.conf这个文件的设置值，使内核功能成为我们想要的样子
11. 设置主机与初始化电源管理模块(ACPI)
12. 初始化软件磁盘阵列:主要是通过/etc/mdadm.conf来设置好
13. 初始化LVM的文件系统功能
14. 以fsck检验磁盘文件系统:会进行filesystem check
15. 进行磁盘配额quota的转换(非必要)
16. 重新以可读写模式挂载系统磁盘
17. 启动quota功能:所以我们不需要自定义quotaon的操作
18. 启动系统伪随机数生成器(pseudo-random)
19. 清除启动过程中的临时文件
20. 将启动相关信息加载/var/log/dmesg文件中&lt;/p&gt;

&lt;h3 id=&quot;etcrcdrc-n--etcsysconfig&quot;&gt;启动系统服务与相关启动配置文件(/etc/rc.d/rc N &amp;amp; /etc/sysconfig)&lt;/h3&gt;

&lt;p&gt;加载内核让整个系统准备接受命令来工作，再经过/etc/rc.d/rc.sysinit的系统模块与相关硬件信息的初始化后，我们需要启动系统所需要的各项服务。这个时候，依据我们在/etc/inittab里面提到的run level设置值，就可以来决定启动的服务选项了。各个不同的runlevel的shell script放置在/etc/rc.d/中，/etc/rc.d/rc5的意义是这样的:
- 通过外部第一号参数($1)来取得想要执行的脚本目录，即由/etc/rc.d/rc 5可以取得/etc/rc5.d/这个目录来准备处理相关的脚本程序
- 找到/etc/rc5.d/K??&lt;em&gt;开头的文件，并进行&amp;rdquo;/etc/rc5.d/K??&lt;/em&gt;stop&amp;rdquo;的操作
- 找到/etc/rc5.d/S??&lt;em&gt;开头的文件，并进行&amp;rdquo;/etc/rc5.d/K??&lt;/em&gt;start&amp;rdquo;的操作&lt;/p&gt;

&lt;p&gt;/etc/rcN.d/目录下的文件很有趣，主要具有几个特点:
- 文件名全部以Sxx或Kxx开头，其中xx为数字，且这些数字在文件之间是有相关性的，即这些数字就是文件的执行顺序
- 全部是连接文件，连接到stand alone服务启动的目录/etc/init.d/去&lt;/p&gt;

&lt;h3 id=&quot;etcrcdrclocal&quot;&gt;用户自定义开机启动程序(/etc/rc.d/rc.local)&lt;/h3&gt;

&lt;p&gt;在完成默认runlevel指定的各项服务启动后，如果还有其他操作想要完成时，直接将它写入/etc/rc.d/rc.local,那么该工作就会在启动的时候自动加载&lt;/p&gt;

&lt;h3 id=&quot;etcinttabx-window&quot;&gt;根据/etc/inttab的设置加载终端机或X Window界面&lt;/h3&gt;
</content>
 </entry>
 
 
</feed>